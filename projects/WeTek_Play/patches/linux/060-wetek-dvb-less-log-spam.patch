From 8b7d9e995c6af7ac0a5ae231afcf02790d99b671 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Fri, 7 Aug 2015 15:03:23 +0300
Subject: [PATCH] wetek/dvb: less log spam

---
 drivers/amlogic/wetek/avl6211.c |    8 ++++----
 drivers/amlogic/wetek/cxd2837.c |   18 +++++++++---------
 drivers/amlogic/wetek/mn88436.c |    2 +-
 drivers/amlogic/wetek/mxl603.c  |    4 ++--
 4 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/amlogic/wetek/avl6211.c b/drivers/amlogic/wetek/avl6211.c
index 0bb0f23..74eb19f 100644
--- a/drivers/amlogic/wetek/avl6211.c
+++ b/drivers/amlogic/wetek/avl6211.c
@@ -628,7 +628,7 @@ static int av2011_lock(struct dvb_frontend* fe)
 		BW = 40000;
 	BF = (BW * 127 + 21100/2) / 21100; 
 	
-	dev_info(&state->i2c->dev, "BF is %d,BW is %d\n", BF, BW);
+	dev_dbg(&state->i2c->dev, "BF is %d,BW is %d\n", BF, BW);
 	
 	reg[5] = (u8)BF;
 
@@ -1578,7 +1578,7 @@ static int avl6211_set_frontend(struct dvb_frontend* fe)
 	
 	state->locked = 0;
 
-	dev_info(&state->i2c->dev, 
+	dev_dbg(&state->i2c->dev, 
 		"%s: delivery_system=%d frequency=%d symbol_rate=%d\n", 
 		__func__, c->delivery_system, c->frequency, c->symbol_rate);
 
@@ -1611,7 +1611,7 @@ static int avl6211_set_frontend(struct dvb_frontend* fe)
 		goto err;
 	}
 	
-	dev_info(&state->i2c->dev, "Tuner successfully lock!\n");
+	dev_dbg(&state->i2c->dev, "Tuner successfully lock!\n");
 
 	state->flags = (CI_FLAG_IQ_NO_SWAPPED) << CI_FLAG_IQ_BIT;			//Normal IQ
 	state->flags |= (CI_FLAG_IQ_AUTO_BIT_AUTO) << CI_FLAG_IQ_AUTO_BIT;	//Enable automatic IQ swap detection
@@ -1644,7 +1644,7 @@ static int avl6211_set_frontend(struct dvb_frontend* fe)
 		ret = -EAGAIN;
 		goto err;
 	}
-	dev_info(&state->i2c->dev, "Service locked!!!\n");
+	dev_dbg(&state->i2c->dev, "Service locked!!!\n");
 
 	ret = avl6211_send_op(OP_RX_RESET_BERPER, state);
 	if (ret)
diff --git a/drivers/amlogic/wetek/cxd2837.c b/drivers/amlogic/wetek/cxd2837.c
index 0638f38..33658d5 100644
--- a/drivers/amlogic/wetek/cxd2837.c
+++ b/drivers/amlogic/wetek/cxd2837.c
@@ -795,7 +795,7 @@ static int set_parameters(struct dvb_frontend *fe)
 		fe_status_t status;
 		ret = read_status(fe, &status);
 		if (!ret && status == 0x1F) {
-			dev_info(&state->i2c->dev, "Ignoring tuning to same freq, allready locked!\n");	
+			dev_dbg(&state->i2c->dev, "Ignoring tuning to same freq, allready locked!\n");	
 			return 0;
 		}
 	}
@@ -1056,7 +1056,7 @@ static int get_ber_t(struct cxd_state *state, u32 *ber)
 	unfreeze_regst(state);
 	
 	if (!(BERRegs[0] & 0x10)) {
-		dev_info(&state->i2c->dev, "%s: no valid BER data\n", __func__);	
+		dev_dbg(&state->i2c->dev, "%s: no valid BER data\n", __func__);	
 		return 0;
 	}
 	
@@ -1093,7 +1093,7 @@ static int get_ber_t2(struct cxd_state *state, u32 *ber)
 	unfreeze_regst(state);
 	
 	if (!(BERRegs[0] & 0x10)) {
-		dev_info(&state->i2c->dev, "%s: no valid BER data\n", __func__);	
+		dev_dbg(&state->i2c->dev, "%s: no valid BER data\n", __func__);	
 		return 0;
 	}
 	
@@ -1102,7 +1102,7 @@ static int get_ber_t2(struct cxd_state *state, u32 *ber)
 	n_ldpc = ((plp & 0x03) == 0 ? 16200 : 64800);
 			
 	if (bitError > ((1U << periodExp) * n_ldpc)) {
-		dev_info(&state->i2c->dev, "%s: invalid BER value\n", __func__);	
+		dev_dbg(&state->i2c->dev, "%s: invalid BER value\n", __func__);	
         return -EINVAL;
     }
 
@@ -1142,7 +1142,7 @@ static int get_ber_c(struct cxd_state *state, u32 *ber)
 
 		
 	if ((BERRegs[0] & 0x80) == 0) {
-		dev_info(&state->i2c->dev, "%s: no valid BER data\n", __func__);	
+		dev_dbg(&state->i2c->dev, "%s: no valid BER data\n", __func__);	
 		return 0;
 	}
 	
@@ -1150,7 +1150,7 @@ static int get_ber_c(struct cxd_state *state, u32 *ber)
 	periodExp = (Scale & 0x1F);
 
 	if ((periodExp <= 11) && (bitError > (1U << periodExp) * 204 * 8)) {
-		dev_info(&state->i2c->dev, "%s: invalid BER value\n", __func__);	
+		dev_dbg(&state->i2c->dev, "%s: invalid BER value\n", __func__);	
         return -EINVAL;
     }
 	
@@ -1223,7 +1223,7 @@ static void GetSignalToNoiseT2(struct cxd_state *state, int *SignalToNoise)
 
 	reg = ((u32)Data[0] << 8) | (u32)Data[1];
 	if (reg == 0) {
-		dev_info(&state->i2c->dev, "%s(): reg value out of range\n", __func__);
+		dev_dbg(&state->i2c->dev, "%s(): reg value out of range\n", __func__);
 		return;
 	}
 	if (reg > 10876)
@@ -1245,7 +1245,7 @@ static void GetSignalToNoiseT(struct cxd_state *state, int *SignalToNoise)
 
 	reg = ((u32)Data[0] << 8) | (u32)Data[1];
 	if (reg == 0) {
-		dev_info(&state->i2c->dev, "%s(): reg value out of range\n", __func__);
+		dev_dbg(&state->i2c->dev, "%s(): reg value out of range\n", __func__);
 		return;
 	}
 	if (reg > 4996)
@@ -1272,7 +1272,7 @@ static void GetSignalToNoiseC(struct cxd_state *state, int *SignalToNoise)
 
 	reg = ((u32)(Data[0] & 0x1F) << 8) | ((u32)Data[1]);
 	if (reg == 0) {
-		dev_info(&state->i2c->dev, "%s(): reg value out of range\n", __func__);
+		dev_dbg(&state->i2c->dev, "%s(): reg value out of range\n", __func__);
 		return;
 	}
 
diff --git a/drivers/amlogic/wetek/mn88436.c b/drivers/amlogic/wetek/mn88436.c
index 7d49d44..2ee5990 100644
--- a/drivers/amlogic/wetek/mn88436.c
+++ b/drivers/amlogic/wetek/mn88436.c
@@ -168,7 +168,7 @@ static int mn88436_set_frontend(struct dvb_frontend* fe)
 		goto err;
 	}
 	
-	dev_info(&state->i2c->dev, "Service locked!!!\n");
+	dev_dbg(&state->i2c->dev, "Service locked!!!\n");
 	
 	state->current_frequency = p->frequency;
 	state->current_modulation = p->modulation;
diff --git a/drivers/amlogic/wetek/mxl603.c b/drivers/amlogic/wetek/mxl603.c
index 8f18fb5..2fb2ad3 100644
--- a/drivers/amlogic/wetek/mxl603.c
+++ b/drivers/amlogic/wetek/mxl603.c
@@ -798,7 +798,7 @@ static int mxl603_get_status(struct dvb_frontend *fe, u32 *status)
 	if (ret)
 		goto err;
 
-	dev_info(&state->i2c->dev, "%s%s", rf_locked ? "rf locked " : "",
+	dev_dbg(&state->i2c->dev, "%s%s", rf_locked ? "rf locked " : "",
 			ref_locked ? "ref locked" : "");
 
 	if ((rf_locked) || (ref_locked))
@@ -827,7 +827,7 @@ static int mxl603_set_params(struct dvb_frontend *fe)
 	int ret;
 	u32 freq = c->frequency;
 	
-	dev_info(&state->i2c->dev, 
+	dev_dbg(&state->i2c->dev, 
 		"%s: delivery_system=%d frequency=%d bandwidth_hz=%d\n", 
 		__func__, c->delivery_system, c->frequency, c->bandwidth_hz);		
 			
-- 
1.7.10.4

