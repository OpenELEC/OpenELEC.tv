#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name"
  exit 1
fi

if [ ! -f $PKG_DIR/package.mk ]; then
  printf "${boldred}$1: no package.mk file found${endcolor}\n"
  exit 1
fi

$SCRIPTS/get $1

STAMP=$PKG_BUILD/.openelec-unpack

mkdir -p $BUILD

[ ! -d "$SOURCES/$1" -a ! -d "$PKG_DIR/sources" ] && exit 0

STAMP_DEPENDS="$PKG_DIR $PKG_NEED_UNPACK $PROJECT_DIR/$PROJECT/patches/$PKG_NAME"

for i in $BUILD/$1-*; do
  if [ -d $i -a -f "$i/.openelec-unpack" ] ; then
    . "$i/.openelec-unpack"
    if [ "$STAMP_PKG_NAME" = "$1" ]; then
      PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
      if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
        $SCRIPTS/clean $1
      fi
    fi
  fi
done

[ ! -f "$STAMP" -a -d "$PKG_BUILD" ] && $SCRIPTS/clean $1 # stale builddir
[ -f "$STAMP" ] && exit 0

printf "%${BUILD_INDENT}c ${boldcyan}UNPACK${endcolor}   $1\n" ' '>&$SILENT_OUT
export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

# unset functions
unset -f pre_unpack
unset -f unpack
unset -f post_unpack
unset -f pre_patch
unset -f post_patch

. $PKG_DIR/package.mk

if [ "$(type -t pre_unpack)" = "function" ]; then
  pre_unpack
fi

if [ "$(type -t unpack)" = "function" ]; then
  unpack
else
  if [ -n "$PKG_URL" ]; then
    $SCRIPTS/extract $1 "$1*.tar.bz2" $BUILD
    $SCRIPTS/extract $1 "$1*.tbz"     $BUILD
    $SCRIPTS/extract $1 "$1*.tar.gz"  $BUILD
    $SCRIPTS/extract $1 "$1*.tar.xz"  $BUILD
    $SCRIPTS/extract $1 "$1*.txz"     $BUILD
    $SCRIPTS/extract $1 "$1*.tgz"     $BUILD
    $SCRIPTS/extract $1 "$1*.7z"      $BUILD
    $SCRIPTS/extract $1 "$1*.zip"     $BUILD
  elif [ -n "$PKG_GIT_URL" ]; then
    $SCRIPTS/extract $1 "$1*.tar.xz"  $BUILD
  fi
fi

if [ -n "$PKG_SOURCE_DIR" ]; then
  mv $BUILD/$PKG_SOURCE_DIR $BUILD/$PKG_NAME-$PKG_VERSION
fi

if [ -d "$PKG_DIR/sources" ]; then
  [ ! -d "$BUILD/${PKG_NAME}-${PKG_VERSION}" ] && mkdir -p $BUILD/${PKG_NAME}-${PKG_VERSION}
  cp -PRf $PKG_DIR/sources/* $BUILD/${PKG_NAME}-${PKG_VERSION}
fi

if [ -z "$PKG_URL" -o -z "$PKG_GIT_URL" ]; then
  mkdir -p "${BUILD}/${PKG_NAME}-${PKG_VERSION}"
fi

if [ "$(type -t post_unpack)" = "function" ]; then
  post_unpack
fi

if [ "$(type -t pre_patch)" = "function" ]; then
  pre_patch
fi

if [ "$TARGET_ARCH" = "x86_64" ]; then
  PATCH_ARCH="x86"
else
  PATCH_ARCH="$TARGET_ARCH"
fi

PATCH_DIRS=""
if [ -n "$PKG_PATCH_DIRS" ]; then
  for patch_dir in $PKG_PATCH_DIRS; do
    PATCH_DIRS="$PATCH_DIRS $PKG_DIR/patches/$patch_dir/$PKG_NAME-*.patch"
  done
fi

for i in $PKG_DIR/patches/$PKG_NAME-*.patch \
         $PKG_DIR/patches/$PATCH_ARCH/$PKG_NAME-*.patch \
         $PATCH_DIRS \
         $PKG_DIR/patches/$PKG_VERSION/*.patch \
         $PKG_DIR/patches/$PKG_VERSION/$PATCH_ARCH/*.patch \
         $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/*.patch \
         $HOME/.openelec/patches/$PKG_NAME/*.patch \
         $HOME/.openelec/projects/$PROJECT/patches/$PKG_NAME/*.patch; do

  if [ $(dirname $i) = "$PKG_DIR/patches" ]; then
    PATCH_DESC="(common)"
  elif [ $(dirname $i) = "$PKG_DIR/patches/$PATCH_ARCH" ]; then
    PATCH_DESC="(common - $PATCH_ARCH)"
  elif [ $(dirname $i) = "$PKG_DIR/patches/$PKG_VERSION/$PATCH_ARCH" ]; then
    PATCH_DESC="($PKG_VERSION - $PATCH_ARCH)"
  elif [ $(dirname $i) = "$PROJECT_DIR/$PROJECT/patches/$PKG_NAME" ]; then
    PATCH_DESC="(project)"
  elif [ $(dirname $i) = "$HOME/.openelec/patches/$PKG_NAME" ]; then
    PATCH_DESC="(vendor)"
  elif [ $(dirname $i) = "$HOME/.openelec/projects/$PROJECT/patches/$PKG_NAME" ]; then
    PATCH_DESC="(vendor - $PROJECT)"
  else
    PATCH_DESC="(common - $(basename $(dirname $i)))"
  fi

  if [ -f "$i" ]; then
    printf "%${BUILD_INDENT}c ${boldgreen}APPLY PATCH${endcolor} ${boldwhite}${PATCH_DESC}${endcolor}   $i\n" ' '>&$SILENT_OUT
    if [ -n "$(grep -E '^GIT binary patch$' $i)" ]; then
      cat $i | git apply --directory=`echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 --verbose --whitespace=nowarn >&$VERBOSE_OUT
    else
      cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 >&$VERBOSE_OUT
    fi
  fi
done

if [ "$(type -t post_patch)" = "function" ]; then
  post_patch
fi

for config in `find $BUILD/$1* -name config.guess | sed 's/config.guess//'`; do
  if [ ! "$PKG_NAME" == "configtools" ] ; then
    printf "%${BUILD_INDENT}c ${boldyellow}FIXCONFIG${endcolor}   $config\n" ' '

    [ -f "$config/config.guess" -a -f $ROOT/$TOOLCHAIN/configtools/config.guess ] && \
      cp -f $ROOT/$TOOLCHAIN/configtools/config.guess $config
    [ -f "$config/config.sub" -a -f $ROOT/$TOOLCHAIN/configtools/config.sub ] && \
      cp -f $ROOT/$TOOLCHAIN/configtools/config.sub $config
  fi
done

rm -f $STAMPS/$1/build_*

PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
for i in PKG_NAME PKG_DEEPMD5; do
  eval val=\$$i
  echo "STAMP_$i=\"$val\"" >> $STAMP
done
