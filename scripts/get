#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

if [ -z "$1" ]; then
  for i in `find packages/ -type f -name package.mk`; do
    GET_PKG=`grep ^PKG_NAME= $i | sed -e "s,\",,g" -e "s,PKG_NAME=,,"`
    $SCRIPTS/get $GET_PKG
  done
fi

if [ -n "$PKG_URL" -o -n "$PKG_GIT_URL" ]; then
  mkdir -p $SOURCES/$1

  # Avoid concurrent downloads of the same package
  _isblocked=N
  exec 99<$SOURCES/$1
  while ! flock --nonblock --exclusive 99; do
    [ ${_isblocked} == N ] && { echo "Project ${PROJECT} waiting to avoid concurrent download of ${1}..."; _isblocked=Y; }
    sleep 1
  done

  if [ -n "$PKG_URL" ]; then
    for i in $PKG_URL; do
      SOURCE_NAME="`basename $i`"
      PACKAGE="$SOURCES/$1/$SOURCE_NAME"
      PACKAGE_MIRROR="$DISTRO_MIRROR/$PKG_NAME/$SOURCE_NAME"
      [ "$VERBOSE" != "yes" ] && WGET_OPT=-q
      WGET_CMD="wget --timeout=30 --passive-ftp -c $WGET_OPT -P $SOURCES/$1"

      NBWGET="1"

      STAMP="$PACKAGE.url"
      MD5SUM="$PACKAGE.md5"

      if [ -f "$STAMP" ]; then
        [ "`cat $STAMP`" = "$i" ] && continue
      fi
      DL="yes"

      rm -f $STAMP

      printf "%${BUILD_INDENT}c ${boldcyan}GET${endcolor}      $1\n" ' '>&$SILENT_OUT
      export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

      until [ -f "$STAMP" ] || $WGET_CMD $i || $WGET_CMD $PACKAGE_MIRROR; do
        NBWGET=$(($NBWGET+1))
        if [ "$NBWGET" -gt "10" ]; then
          echo -e "\nCant't get $1 sources : $i\n Try later !!"
          exit 1
        fi
      done

      echo $i > $STAMP
      md5sum -t $PACKAGE > $MD5SUM

      rm -f $BUILD_BASE*/$STAMPS_NOARCH/$1/unpack
      rm -f $BUILD_BASE*/$STAMPS_NOARCH/$1/build
    done

  elif [ -n "$PKG_GIT_URL" ]; then

    SOURCE_NAME="${PKG_NAME}-${PKG_VERSION}.tar.xz"
    PACKAGE="$SOURCES/$1/$SOURCE_NAME"
    [ "$VERBOSE" = "yes" ] && GIT_OPT=-v
    [ -z "$PKG_GIT_BRANCH" ] && PKG_GIT_BRANCH=master

    if [ "$PKG_KEEP_CHECKOUT" = "yes" -a -d $SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git ]; then
      GIT_CLONE_CMD="git fetch -v origin $PKG_GIT_BRANCH:$PKG_GIT_BRANCH"
    else
      GIT_CLONE_CMD="git clone -v --bare -b "$PKG_GIT_BRANCH" "$PKG_GIT_URL" $SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git"
    fi

    NBGIT="1"

    STAMP="$PACKAGE.url"
    MD5SUM="$PACKAGE.md5"

    if [ -f "$STAMP" ]; then
      [ "`cat $STAMP`" = "$PKG_GIT_URL $PKG_GIT_BRANCH $PKG_VERSION" ] && exit 0
    fi
    DL="yes"

    rm -f $STAMP

    printf "%${BUILD_INDENT}c ${boldcyan}CHECKOUT${endcolor}      $1\n" ' '>&$SILENT_OUT
    export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

    if [ "$PKG_KEEP_CHECKOUT" = "yes" -a -d $SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git ]; then
      cd $SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git
    else
      rm -rf $SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git
    fi

    until [ -f "$STAMP" ] || $GIT_CLONE_CMD; do
      NBGIT=$(($NBGIT+1))
      if [ "$NBGIT" -gt "10" ]; then
        echo -e "\nCant't get $1 sources : $i\n Try later !!"
        exit 1
      fi
    done

    if [ "$PKG_KEEP_CHECKOUT" = "yes" ]; then
      cd $ROOT
    fi

    pushd $ROOT/$SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git > /dev/null
      git archive --format=tar --prefix=${PKG_NAME}-${PKG_VERSION}/ ${PKG_VERSION} | \
        xz > $ROOT/$SOURCES/$1/${PKG_NAME}-${PKG_VERSION}.tar.xz
    popd > /dev/null

    echo "$PKG_GIT_URL $PKG_GIT_BRANCH $PKG_VERSION"> $STAMP
    md5sum -t $PACKAGE > $MD5SUM

    if [ ! "$PKG_KEEP_CHECKOUT" = "yes" ]; then
      rm -rf $SOURCES/${1}/${1}-${PKG_GIT_BRANCH}.git
    fi

    rm -f $BUILD_BASE*/$STAMPS_NOARCH/$1/unpack
    rm -f $BUILD_BASE*/$STAMPS_NOARCH/$1/build

  fi
fi
