#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2012 Stephan Raue (stephan@openelec.tv)
#
#  This Program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.tv; see the file COPYING.  If not, write to
#  the Free Software Foundation, 51 Franklin Street, Suite 500, Boston, MA 02110, USA.
#  http://www.gnu.org/copyleft/gpl.html
################################################################################

. config/options $1

if [ -z "$1" ]; then
  for i in `find packages/ -type f -name package.mk`; do
    GET_PKG=`grep ^PKG_NAME= $i | sed -e "s,\",,g" -e "s,PKG_NAME=,,"`
    $SCRIPTS/get $GET_PKG
  done
  for i in `find packages/ -type f -name meta`; do
    GET_PKG=`grep ^PKG_NAME= $i | sed -e "s,\",,g" -e "s,PKG_NAME=,,"`
    $SCRIPTS/get $GET_PKG
  done
fi

[ -z "$PKG_URL" ] && exit 0

PKG_URL_PROTO=$(echo $PKG_URL | sed -n 's|\([^,]*\),.*$|\1|p')    # get proto
case $PKG_URL_PROTO in
  git|svn)
    PKG_URL_BRANCH=$(echo $PKG_URL | sed -n 's|\([^,]*\),\([^,:]*\),.*$|\2|p')  # get branch
    if [ -z "$PKG_URL_BRANCH" ]; then
      PKG_URL_BRANCH=master
      PKG_URL=$(echo $PKG_URL | sed -n 's|\([^,]*\),\(.*\)$|\2|p')              # get url
    else
      PKG_URL=$(echo $PKG_URL | sed -n 's|\([^,]*\),\([^,:]*\),\(.*\)$|\3|p')   # get url
    fi
    SOURCE_NAME="$PKG_NAME-$PKG_VERSION.tar.xz"
    ;;
  file)
    PKG_URL=$(echo $PKG_URL | sed -n 's|\([^,]*\),\(.*\)$|\2|p')  # get file
    PKG_URL=${PKG_URL// /_spc_}     # replace spaces
    eval PKG_URL=${PKG_URL}         # put spaces back
    PKG_URL=${PKG_URL//_spc_/ }
    SOURCE_NAME="$(basename $PKG_URL)"
    ;;
  *)
    SOURCE_NAME="$(basename $PKG_URL)"
    ;;
esac

if [ -n "$PKG_URL" ]; then
  PACKAGE="$SOURCES/$1/$SOURCE_NAME"
  PACKAGE_MIRROR="$DISTRO_MIRROR/$PKG_NAME/$SOURCE_NAME"
  [ "$VERBOSE" != "yes" ] && WGET_OPT=-q
  WGET_CMD="wget --passive-ftp --no-check-certificate -c $WGET_OPT -P $SOURCES/$1"

  NBWGET="1"

  STAMP="$PACKAGE.url"
  MD5SUM="$PACKAGE.md5"

  mkdir -p $SOURCES/$1

  if [ -f "$STAMP" ]; then
    [ `cat $STAMP` = "$PKG_URL" ] && exit 0
  fi
  DL="yes"

  $SCRIPTS/checkdeps get

  rm -f $STAMP

  printf "%${BUILD_INDENT}c GET      $1\n" ' '>&$SILENT_OUT
  export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

  case $PKG_URL_PROTO in
    file)
      # local file must always exist without using stamp & md5sum
      exit 0
      ;;
    git)
      cd $SOURCES/$1

      rm -fr $PKG_NAME-$PKG_VERSION
      echo "Getting sources from git..."
      git clone $PKG_URL -b $PKG_URL_BRANCH $PKG_NAME-$PKG_VERSION
      if [ $? != 0 ]; then
        rm -fr $PKG_NAME-$PKG_VERSION
        exit 1
      fi

      cd $PKG_NAME-$PKG_VERSION
      if [ "$PKG_VERSION" = "latest" ]; then
      	GIT_REV=$(git log -n1 --format=%h)
      	echo "Latest revison: $GIT_REV"
      else
      	git checkout $PKG_VERSION
      	if [ $? != 0 ]; then
      	  cd - >/dev/null 2>&1
      	  rm -fr $PKG_NAME-$PKG_VERSION
      	  exit 1
      	fi
      fi
      cd - >/dev/null 2>&1

      echo "Packing sources..."
      tar cJf $PKG_NAME-$PKG_VERSION.tar.xz $PKG_NAME-$PKG_VERSION

      echo "Removing temporary folder..."
      rm -rf $PKG_NAME-$PKG_VERSION
      ;;
    svn)
      cd $SOURCES/$1

      rm -fr $PKG_NAME-$PKG_VERSION
      echo "Getting sources from svn..."
      if [ "$PKG_VERSION" = "latest" ]; then
      	svn checkout $PKG_URL $PKG_NAME-$PKG_VERSION
      else
      	svn checkout -r $PKG_VERSION $PKG_URL $PKG_NAME-$PKG_VERSION
      fi
      if [ $? != 0 ]; then
        rm -fr $PKG_NAME-$PKG_VERSION
        exit 1
      fi

      echo "Cleaning sources..."
      find $PKG_NAME-$PKG_VERSION -name .svn -type d | xargs rm -rf

      echo "Packing sources..."
      tar cJf $PKG_NAME-$PKG_VERSION.tar.xz $PKG_NAME-$PKG_VERSION

      echo "Removing temporary folder..."
      rm -rf $PKG_NAME-$PKG_VERSION
      ;;
    *)
      until [ -f "$STAMP" ] || $WGET_CMD $PKG_URL || $WGET_CMD $PACKAGE_MIRROR; do
        NBWGET=$(($NBWGET+1))
        if [ "$NBWGET" -gt "10" ]; then
          echo -e "\nCant't get $1 sources : $PKG_URL\n Try later !!"
          exit 1
        fi
      done
      ;;
  esac

  echo $PKG_URL > $STAMP
  md5sum -t $PACKAGE > $MD5SUM

  rm -f $BUILD_BASE*/$STAMPS_NOARCH/$1/unpack
  rm -f $BUILD_BASE*/$STAMPS_NOARCH/$1/build
fi
