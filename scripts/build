#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name[:<host|target|init|bootstrap>]"
  exit 1
fi

if [ ! -f $PKG_DIR/package.mk ]; then
  printf "${boldred}$1: no package.mk file found${endcolor}\n"
  exit 1
fi

PACKAGE_NAME=$(echo $1 | awk -F : '{print $1}')
TARGET=$(echo $1 | awk -F : '{print $2}')
if [ -z "$TARGET" ]; then
  TARGET="target"
fi

if [ -n "$PKG_ARCH" -a ! "$PKG_ARCH" = "any" ]; then
  echo "$PKG_ARCH" | grep -q "$TARGET_ARCH" || exit 0
  echo "$PKG_ARCH" | grep -q "\-$TARGET_ARCH" && exit 0
fi

unset INSTALL

mkdir -p $STAMPS/$PACKAGE_NAME
STAMP=$STAMPS/$PACKAGE_NAME/build_$TARGET

$SCRIPTS/unpack $PACKAGE_NAME

STAMP_DEPENDS="$PKG_DIR $PKG_NEED_UNPACK $PROJECT_DIR/$PROJECT/patches/$PKG_NAME"

if [ -f $STAMP ] ; then
  . $STAMP
  PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
  if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
    rm -f $STAMP
  fi
fi

if [ ! -f $STAMP ]; then
  rm -f $STAMP

  setup_toolchain $TARGET

  # unset functions
    unset -f pre_build_$TARGET
    unset -f pre_configure_$TARGET
    unset -f configure_$TARGET
    unset -f post_configure_$TARGET
    unset -f pre_make_$TARGET
    unset -f make_$TARGET
    unset -f post_make_$TARGET
    unset -f pre_makeinstall_$TARGET
    unset -f makeinstall_$TARGET
    unset -f post_makeinstall_$TARGET

  # include builddefaults
    . $CONFIG/build.builddefaults

  # include buildfile
    . $PKG_DIR/package.mk

    case "$TARGET" in
      target)
        for p in $PKG_DEPENDS_TARGET; do
          $SCRIPTS/build $p
        done
        ;;
      host)
        for p in $PKG_DEPENDS_HOST; do
          $SCRIPTS/build $p
        done
        ;;
      init)
        for p in $PKG_DEPENDS_INIT; do
          $SCRIPTS/build $p
        done
        ;;
      bootstrap)
        for p in $PKG_DEPENDS_BOOTSTRAP; do
          $SCRIPTS/build $p
        done
        ;;
    esac

    printf "%${BUILD_INDENT}c ${boldyellow}BUILD${endcolor}    $PACKAGE_NAME ${boldwhite}($TARGET)${endcolor}\n" ' '>&$SILENT_OUT
    export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

    if [ "$PKG_AUTORECONF" = yes ]; then
      if [ ! -f "$PKG_BUILD/configure.in" \
          -a ! -f "$PKG_BUILD/configure.ac" ] ; then
        echo "configure.in or configure.ac not found"
        exit 1
      fi

      if [ ! -f $PKG_BUILD/.autoreconf-done ] ; then
        touch $PKG_BUILD/NEWS $PKG_BUILD/AUTHORS $PKG_BUILD/ChangeLog
        mkdir -p $PKG_BUILD/m4
        mkdir -p $PKG_BUILD/build-aux

        printf "%${BUILD_INDENT}c ${boldmagenta}AUTORECONF${endcolor}   $1\n" ' '>&$SILENT_OUT
        export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

        do_autoreconf $PKG_BUILD
        touch $PKG_BUILD/.autoreconf-done
      fi
    fi

    # virtual packages dont must be build, they only contains dependencies, so dont go further here
    if [ ! "$PKG_SECTION" = "virtual" ]; then

      # configure other variables
      INSTALL_DEV=$ROOT/$PKG_BUILD/.install_dev
      case "$TARGET" in
        target)
          INSTALL=$ROOT/$PKG_BUILD/.install_pkg
          ;;
        init)
          INSTALL=$ROOT/$PKG_BUILD/.install_init
          ;;
      esac

      # clean up
      [ -n "$INSTALL" ] && rm -rf $INSTALL

      # setup configure script
      if [ -z "$PKG_CONFIGURE_SCRIPT" ]; then
        PKG_CONFIGURE_SCRIPT="$ROOT/$PKG_BUILD/configure"
      else
        PKG_CONFIGURE_SCRIPT="$ROOT/$PKG_BUILD/$PKG_CONFIGURE_SCRIPT"
      fi

      PKG_CMAKE_SCRIPT="$ROOT/$PKG_BUILD/CMakeLists.txt"
      if [ "$TARGET" = "target" -a -n "$PKG_CMAKE_SCRIPT_TARGET" ]; then
        PKG_CMAKE_SCRIPT="$ROOT/$PKG_BUILD/$PKG_CMAKE_SCRIPT_TARGET"
      elif [ "$TARGET" = "host" -a -n "$PKG_CMAKE_SCRIPT_HOST" ]; then
        PKG_CMAKE_SCRIPT="$ROOT/$PKG_BUILD/$PKG_CMAKE_SCRIPT_HOST"
      elif [ "$TARGET" = "init" -a -n "$PKG_CMAKE_SCRIPT_INIT" ]; then
        PKG_CMAKE_SCRIPT="$ROOT/$PKG_BUILD/$PKG_CMAKE_SCRIPT_INIT"
      elif [ "$TARGET" = "bootstrap" -a -n "$PKG_CMAKE_SCRIPT_BOOTSTRAP" ]; then
        PKG_CMAKE_SCRIPT="$ROOT/$PKG_BUILD/$PKG_CMAKE_SCRIPT_BOOTSTRAP"
      fi

      # include build template and build
      if [ "$(type -t pre_build_$TARGET)" = "function" ]; then
        pre_build_$TARGET
      fi

      # ensure $PKG_BUILD is there. (installer? PKG_URL="")
      mkdir -p $PKG_BUILD

      cd $PKG_BUILD
        case "$TARGET" in
          target)
            if [ -f "$PKG_CONFIGURE_SCRIPT" -o -f "$PKG_CMAKE_SCRIPT" ]; then
              mkdir -p .$TARGET_NAME
              cd .$TARGET_NAME
            fi
            ;;
          host)
            if [ -f "$PKG_CONFIGURE_SCRIPT" -o -f "$PKG_CMAKE_SCRIPT" ]; then
              mkdir -p .$HOST_NAME
              cd .$HOST_NAME
            fi
            ;;
          init)
            if [ -f "$PKG_CONFIGURE_SCRIPT" -o -f "$PKG_CMAKE_SCRIPT" ]; then
              mkdir -p .$TARGET_NAME-$TARGET
              cd .$TARGET_NAME-$TARGET
            fi
            ;;
          bootstrap)
            if [ -f "$PKG_CONFIGURE_SCRIPT" -o -f "$PKG_CMAKE_SCRIPT" ]; then
              mkdir -p .$HOST_NAME-$TARGET
              cd .$HOST_NAME-$TARGET
            fi
            ;;
        esac

      # configure
      if [ "$(type -t pre_configure_$TARGET)" = "function" ]; then
        pre_configure_$TARGET
      fi
      if [ "$(type -t configure_$TARGET)" = "function" ]; then
        configure_$TARGET
      elif [ -f "$PKG_CMAKE_SCRIPT" -a ! "$PKG_USE_CMAKE" = "no" ]; then
        case "$TARGET" in
          target)
            cmake $TARGET_CMAKE_OPTS $PKG_CMAKE_OPTS_TARGET $(dirname $PKG_CMAKE_SCRIPT)
            ;;
          host)
            cmake $HOST_CMAKE_OPTS $PKG_CMAKE_OPTS_HOST $(dirname $PKG_CMAKE_SCRIPT)
            ;;
          init)
            cmake $INIT_CMAKE_OPTS $PKG_CMAKE_OPTS_INIT $(dirname $PKG_CMAKE_SCRIPT)
            ;;
          bootstrap)
            cmake $BOOTSTRAP_CMAKE_OPTS $PKG_CMAKE_OPTS_BOOTSTRAP $(dirname $PKG_CMAKE_SCRIPT)
            ;;
        esac
      elif [ -f "$PKG_CONFIGURE_SCRIPT" ]; then
        case "$TARGET" in
          target)
            $PKG_CONFIGURE_SCRIPT $TARGET_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_TARGET
            ;;
          host)
            $PKG_CONFIGURE_SCRIPT $HOST_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_HOST
            ;;
          init)
            $PKG_CONFIGURE_SCRIPT $INIT_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_INIT
            ;;
          bootstrap)
            $PKG_CONFIGURE_SCRIPT $BOOTSTRAP_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_BOOTSTRAP
            ;;
        esac
      fi
      if [ "$(type -t post_configure_$TARGET)" = "function" ]; then
        post_configure_$TARGET
      fi

      # make
      if [ "$(type -t pre_make_$TARGET)" = "function" ]; then
        pre_make_$TARGET
      fi
      if [ "$(type -t make_$TARGET)" = "function" ]; then
        make_$TARGET
      else
        case "$TARGET" in
          target)
            make $PKG_MAKE_OPTS_TARGET
            ;;
          host)
            make $PKG_MAKE_OPTS_HOST
            ;;
          init)
            make $PKG_MAKE_OPTS_INIT
            ;;
          bootstrap)
            make $PKG_MAKE_OPTS_BOOTSTRAP
            ;;
        esac
      fi
      if [ "$(type -t post_make_$TARGET)" = "function" ]; then
        post_make_$TARGET
      fi

      # make install
      if [ "$(type -t pre_makeinstall_$TARGET)" = "function" ]; then
        pre_makeinstall_$TARGET
      fi
      if [ "$(type -t makeinstall_$TARGET)" = "function" ]; then
        makeinstall_$TARGET
        if [ "$TARGET" = "target" -a -d "$INSTALL_DEV" ]; then
          mkdir -p $INSTALL
            cp -PRv $INSTALL_DEV/* $INSTALL
        fi
      else
        case "$TARGET" in
          target)
            make install DESTDIR=$INSTALL_DEV $PKG_MAKEINSTALL_OPTS_TARGET
            for i in `find $INSTALL_DEV/lib/ -name "*.la" 2>/dev/null`; do \
              $SED "s:\(['= ]\)/lib:\\1$SYSROOT_PREFIX/lib:g" $i; \
            done
            for i in `find $INSTALL_DEV/usr/lib/ -name "*.la" 2>/dev/null`; do \
              $SED "s:\(['= ]\)/usr:\\1$SYSROOT_PREFIX/usr:g" $i; \
            done
            mkdir -p $SYSROOT_PREFIX
              cp -PRvf $INSTALL_DEV/* $SYSROOT_PREFIX
            mkdir -p $INSTALL
              cp -PRvf $INSTALL_DEV/* $INSTALL
            ;;
          host)
            make install $PKG_MAKEINSTALL_OPTS_HOST
            ;;
          init)
            make install DESTDIR=$INSTALL $PKG_MAKEINSTALL_OPTS_INIT
            ;;
          bootstrap)
            make install $PKG_MAKEINSTALL_OPTS_BOOTSTRAP
            ;;
        esac
      fi
      if [ "$(type -t post_makeinstall_$TARGET)" = "function" ]; then
        post_makeinstall_$TARGET
      fi

      if [ "$TARGET" = "target" -o "$TARGET" = "init" ]; then
        if [ -d $INSTALL ] ; then
          rm -rf $INSTALL/{usr/,}include
          rm -rf $INSTALL/{usr/,}lib/cmake
          rm -rf $INSTALL/{usr/,}lib/pkgconfig
          rm -rf $INSTALL/{usr/,}man
          rm -rf $INSTALL/{usr/,}share/aclocal
          rm -rf $INSTALL/{usr/,}share/bash-completion
          rm -rf $INSTALL/{usr/,}share/doc
          rm -rf $INSTALL/{usr/,}share/gtk-doc
          rm -rf $INSTALL/{usr/,}share/info
          rm -rf $INSTALL/{usr/,}share/locale
          rm -rf $INSTALL/{usr/,}share/man
          rm -rf $INSTALL/{usr/,}share/pkgconfig
          rm -rf $INSTALL/{usr/,}share/zsh
          rm -rf $INSTALL/{usr/,}var
          find $INSTALL \( -name "*.orig" -o \
                           -name "*.a" -o \
                           -name "*.la" -o \
                           -name "*.so*T" -o \
                           -name "*.o" -o \
                           -name "*.in" -o \
                           -name "*.rej" -o \
                           -name ".git*" \) \
                           -exec rm -f "{}" ";" 2>/dev/null || true
          find $INSTALL -type d -exec rmdir -p "{}" ";" 2>/dev/null || true

          if [ ! "$DEBUG" = yes ]; then
            $STRIP `find $INSTALL -name "*.so" 2>/dev/null` 2>/dev/null || :
            $STRIP `find $INSTALL -name "*.so.[0-9]*" 2>/dev/null` 2>/dev/null || :

            # strip kernel modules
            for MOD in `find $INSTALL -type f -name *.ko`; do
              $STRIP --strip-debug $MOD
            done
          fi
        fi
      fi

      cd $ROOT
    fi  # ! "$PKG_SECTION" = "virtual"

    PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
    for i in PKG_NAME PKG_DEEPMD5; do
      eval val=\$$i
      echo "STAMP_$i=\"$val\"" >> $STAMP
    done
fi
