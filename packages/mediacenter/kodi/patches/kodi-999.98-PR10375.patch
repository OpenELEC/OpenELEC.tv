From 5d60b324b6297b0f3355000cd65c10015c18798a Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Thu, 25 Aug 2016 21:52:39 +0200
Subject: [PATCH 01/19] [IMX] add Supports(ERENDERFEATURE)

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp  |  3 ++-
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h    |  2 ++
 .../VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp   | 12 ++++++++++++
 .../VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h     |  1 +
 4 files changed, 17 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 4aae4c3..6b31ca5 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1709,6 +1709,7 @@ void CIMXContext::PrepareTask(IPUTaskPtr &ipu, CIMXBuffer *source_p, CIMXBuffer
 bool CIMXContext::TileTask(IPUTaskPtr &ipu)
 {
   int pad = ipu->task.input.height == 1080 && ipu->current->iHeight>ipu->task.input.height ? 16*ipu->current->iWidth : 0;
+  m_zoomAllowed = true;
 
   if (ipu->current->iFormat != _4CC('T', 'N', 'V', 'F') && ipu->current->iFormat != _4CC('T', 'N', 'V', 'P'))
   {
@@ -1725,13 +1726,13 @@ bool CIMXContext::TileTask(IPUTaskPtr &ipu)
   // Use band mode directly to FB, as no transformations needed (eg cropping)
   if (m_fps >= 49 && m_fbWidth == 1920 && ipu->task.input.width == 1920 && !ipu->task.input.deinterlace.enable)
   {
+    m_zoomAllowed = false;
     ipu->task.output.crop.pos.x = ipu->task.input.crop.pos.x = 0;
     ipu->task.output.crop.pos.y = ipu->task.input.crop.pos.y = 0;
     ipu->task.output.crop.h     = ipu->task.input.height     = ipu->task.input.crop.h = ipu->current->iHeight;
     ipu->task.output.paddr     += m_fbLineLength * (m_fbHeight - ipu->task.input.crop.h)/2;
     return true;
   }
-
   // rasterize from tile (frame)
   struct ipu_task    vdoa;
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index bde21ac..9b9f068 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -116,6 +116,7 @@ class CIMXContext : private CThread, IDispResource
   void SetVideoPixelFormat(CProcessInfo *m_pProcessInfo);
 
   void SetBlitRects(const CRect &srcRect, const CRect &dstRect);
+  bool IsZoomAllowed() const { return m_zoomAllowed; }
 
   // Blits a buffer to a particular page (-1 for auto page)
   // source_p (previous buffer) is required for de-interlacing
@@ -212,6 +213,7 @@ class CIMXContext : private CThread, IDispResource
   CEvent                         m_waitFlip;
   CProcessInfo                  *m_processInfo;
 
+  bool                           m_zoomAllowed;
   CCriticalSection               m_pageSwapLock;
 public:
   void                          *m_g2dHandle;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
index 73fc323..01272ff 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
@@ -80,6 +80,18 @@ bool CRendererIMX::IsGuiLayer()
   return false;
 }
 
+bool CRendererIMX::Supports(ERENDERFEATURE feature)
+{
+  if (!g_IMXContext.IsZoomAllowed())
+    return false;
+
+  if (feature == RENDERFEATURE_PIXEL_RATIO ||
+      feature == RENDERFEATURE_ZOOM)
+    return true;
+
+  return false;
+}
+
 bool CRendererIMX::Supports(EINTERLACEMETHOD method)
 {
   if(method == VS_INTERLACEMETHOD_AUTO)
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h
index 440badb..e2582a6 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h
@@ -44,6 +44,7 @@ class CRendererIMX : public CLinuxRendererGLES
   // Feature support
   virtual bool Supports(EINTERLACEMETHOD method);
   virtual bool Supports(ESCALINGMETHOD method);
+  virtual bool Supports(ERENDERFEATURE feature);
 
   virtual bool WantsDoublePass() override;
 

From e2ac3ebc6bebd2dfdf4ad7d3bea5d5c629e85189 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Fri, 26 Aug 2016 00:56:03 +0200
Subject: [PATCH 02/19] [IMX] update to fps detect

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 27 +++++---
 xbmc/linux/imx/IMX.cpp                             | 80 ++++++++++------------
 xbmc/linux/imx/IMX.h                               | 16 ++---
 3 files changed, 62 insertions(+), 61 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 6b31ca5..bfb9a3f 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -744,21 +744,23 @@ int CIMXCodec::Decode(BYTE *pData, int iSize, double dts, double pts)
   int ret = 0;
   if (!g_IMXCodec->IsRunning())
   {
-    if ((!m_decInput.full() || !ptrn.Recalc()) && m_decInput.size() < 40)
+    if (!m_decInput.full())
     {
-      if (m_decInput.full())
-        m_decInput.setquotasize(m_decInput.getquotasize()+1);
-
-      if (dts != DVD_NOPTS_VALUE)
-        ptrn.Add(dts);
-      else if (pts != DVD_NOPTS_VALUE)
+      if (pts != DVD_NOPTS_VALUE)
         ptrn.Add(pts);
+      else if (dts != DVD_NOPTS_VALUE)
+        ptrn.Add(dts);
 
       ret |= VC_BUFFER;
     }
     else
     {
-      m_fps = DVD_TIME_BASE / ptrn.GetFrameDuration();
+      double fd = ptrn.GetFrameDuration(true);
+      if (!fd && m_hints.fpsscale)
+        m_fps = (double)m_hints.fpsrate / m_hints.fpsscale;
+      else if (fd)
+        m_fps = DVD_TIME_BASE / fd;
+
       m_decOpenParam.nMapType = 1;
 
       ptrn.Flush();
@@ -940,9 +942,12 @@ void CIMXCodec::Process()
           m_decOpenParam.nMapType = 0;
           Dispose();
           VpuOpen();
-          m_fps /= 2;
           continue;
         }
+
+        if (m_initInfo.nInterlace && m_fps <= 30)
+          m_fps *= 2;
+
         m_processInfo->SetVideoFps(m_fps);
 
         CLog::Log(LOGDEBUG, "%s - VPU Init Stream Info : %dx%d (interlaced : %d - Minframe : %d)"\
@@ -1277,7 +1282,7 @@ bool CIMXContext::AdaptScreen(bool allocate)
   m_fbVar.xoffset = 0;
   m_fbVar.yoffset = 0;
 
-  if (!allocate && (fbVar.bits_per_pixel == 16 || m_currentFieldFmt || (m_fbHeight >= 1080 && m_fps >= 49)))
+  if (!allocate && (fbVar.bits_per_pixel == 16 || m_fps >= 49))
   {
     m_fbVar.nonstd = _4CC('Y', 'U', 'Y', 'V');
     m_fbVar.bits_per_pixel = 16;
@@ -1724,7 +1729,7 @@ bool CIMXContext::TileTask(IPUTaskPtr &ipu)
   }
 
   // Use band mode directly to FB, as no transformations needed (eg cropping)
-  if (m_fps >= 49 && m_fbWidth == 1920 && ipu->task.input.width == 1920 && !ipu->task.input.deinterlace.enable)
+  if (m_fps > 51 && m_fbWidth == 1920 && ipu->task.input.width == 1920 && !ipu->task.input.deinterlace.enable)
   {
     m_zoomAllowed = false;
     ipu->task.output.crop.pos.x = ipu->task.input.crop.pos.x = 0;
diff --git a/xbmc/linux/imx/IMX.cpp b/xbmc/linux/imx/IMX.cpp
index e4284ac..ee4e60a 100644
--- a/xbmc/linux/imx/IMX.cpp
+++ b/xbmc/linux/imx/IMX.cpp
@@ -36,14 +36,10 @@
 #include "windowing/WindowingFactory.h"
 #include "utils/log.h"
 #include "guilib/GraphicContext.h"
-#include "utils/MathUtils.h"
-#include "DVDClock.h"
 #include "cores/VideoPlayer/DVDCodecs/DVDCodecUtils.h"
-
-#include <algorithm>
+#include "utils/StringUtils.h"
 
 #define  DCIC_DEVICE    "/dev/mxc_dcic0"
-#define  FB_DEVICE      "/dev/fb0"
 
 CIMX::CIMX(void) : CThread("CIMX")
   , m_change(true)
@@ -162,7 +158,6 @@ void CIMX::OnResetDisplay()
   m_change = true;
 }
 
-
 bool CIMXFps::Recalc()
 {
   double prev = DVD_NOPTS_VALUE;
@@ -175,54 +170,57 @@ bool CIMXFps::Recalc()
   m_hgraph.clear();
   for (auto d : m_ts)
   {
-    if (d != 0.0 && prev != DVD_NOPTS_VALUE)
-      m_hgraph[MathUtils::round_int(d - prev)]++;
+    if (prev != DVD_NOPTS_VALUE)
+    {
+      frameDuration = CDVDCodecUtils::NormalizeFrameduration((d - prev), &hasMatch);
+      if (fabs(frameDuration - rint(frameDuration)) < 0.01)
+        frameDuration = rint(frameDuration);
+
+      m_hgraph[(unsigned long)(frameDuration * 100)]++;
+    }
     prev = d;
   }
 
-  unsigned int patternLength = 0;
   for (auto it = m_hgraph.begin(); it != m_hgraph.end();)
   {
-    if (it->second > 1)
+    if (it->second > 2)
     {
-      count += it->second;
-      frameDuration += it->first * it->second;
+      double duration = CDVDCodecUtils::NormalizeFrameduration((double)it->first / 100, &hasMatch);
+
       ++it;
     }
     else
+    {
+      for (auto iti = m_hgraph.begin(); it != iti; iti++)
+      {
+        if (!iti->first)
+          continue;
+        int dv = it->first / iti->first;
+        if (dv * iti->first == it->first)
+        {
+          m_hgraph[it->first] += dv;
+          break;
+        }
+      }
       m_hgraph.erase(it++);
+    }
   }
 
-  if (count)
-    frameDuration /= count;
-
-  double frameNorm = CDVDCodecUtils::NormalizeFrameduration(frameDuration, &hasMatch);
-
-  if (hasMatch && !patternLength)
-    m_patternLength = 1;
-  else
-    m_patternLength = patternLength;
-
-  if (!m_hasPattern && hasMatch)
-    m_frameDuration = frameNorm;
-
-  if ((m_ts.size() == DIFFRINGSIZE && !m_hasPattern && hasMatch))
-    m_hasPattern = true;
-
-  if (m_hasPattern)
-    m_ptscorrection = (m_ts.size() - 1) * m_frameDuration + m_ts.front() - m_ts.back();
-
-  if (m_hasPattern && m_ts.size() == DIFFRINGSIZE && m_ptscorrection > m_frameDuration / 4)
+  frameDuration = 0.0;
+  for (auto h : m_hgraph)
   {
-    m_hasPattern = false;
-    m_frameDuration = DVD_NOPTS_VALUE;
+    count += h.second;
+    frameDuration += h.first * h.second;
   }
 
-  return m_hgraph.size() <= 2;
-  bool ret = m_hgraph.size() <= 2;
-  if (!m_hasPattern && ret)
-    m_frameDuration = frameNorm;
-  return ret;
+  if (count)
+    frameDuration /= (100 * count);
+
+  frameDuration = CDVDCodecUtils::NormalizeFrameduration(frameDuration, &hasMatch);
+
+  if (hasMatch)
+    m_frameDuration = frameDuration;
+  return true;
 }
 
 void CIMXFps::Add(double tm)
@@ -235,8 +233,6 @@ void CIMXFps::Add(double tm)
 
 void CIMXFps::Flush()
 {
+  m_frameDuration = DVD_NOPTS_VALUE;
   m_ts.clear();
-  m_frameDuration = 0.0;
-  m_ptscorrection = 0.0;
-  m_hasPattern = false;
 }
diff --git a/xbmc/linux/imx/IMX.h b/xbmc/linux/imx/IMX.h
index 1c5f15e..c0a13cd9 100644
--- a/xbmc/linux/imx/IMX.h
+++ b/xbmc/linux/imx/IMX.h
@@ -24,6 +24,7 @@
 #include "threads/Thread.h"
 #include "guilib/DispResource.h"
 #include "utils/log.h"
+#include "cores/VideoPlayer/DVDClock.h"
 
 #include <mutex>
 #include <queue>
@@ -32,9 +33,12 @@
 #include <atomic>
 #include <thread>
 #include <map>
+#include <string>
 
 #define DIFFRINGSIZE 60
 
+#define FB_DEVICE "/dev/fb0"
+
 class CIMX;
 extern CIMX g_IMX;
 
@@ -189,19 +193,15 @@ class CIMXBuffer {
 class CIMXFps
 {
   public:
-    CIMXFps()       { Flush(); }
+    CIMXFps()  { Flush(); }
     void   Add(double pts);
     void   Flush(); //flush the saved pattern and the ringbuffer
-
-    double GetFrameDuration() { return m_frameDuration;             }
-    bool   HasFullBuffer()    { return m_ts.size() == DIFFRINGSIZE; }
-
+    double GetFrameDuration(bool raw = false) { return m_frameDuration; }
     bool   Recalc();
 
   private:
+    std::string          GetPatternStr();
+    std::map<unsigned long,int>  m_hgraph;
     std::deque<double>   m_ts;
-    std::map<double,int> m_hgraph;
     double               m_frameDuration;
-    bool                 m_hasPattern;
-    double               m_ptscorrection;
 };

From 0d8aced44f2e2a84abca210ced4c9ea7585ddfab Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Fri, 26 Aug 2016 07:41:39 +0200
Subject: [PATCH 03/19] [IMX] fix compile error

---
 xbmc/windowing/egl/EGLNativeTypeIMX.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
index 62631f6..d8c0983 100644
--- a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
@@ -29,6 +29,7 @@
 #include <sys/ioctl.h>
 #ifdef HAS_IMXVPU
 #include <linux/mxcfb.h>
+#include "cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h"
 #endif
 #include "utils/log.h"
 #include "utils/RegExp.h"

From feebd022dfdab5b1ede13eaad48c387a8bbd04c8 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Fri, 26 Aug 2016 07:53:08 +0200
Subject: [PATCH 04/19] [IMX] put destination rect parameter into Blit() call,
 refactor IPUTask prep

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 32 +++++++++-------------
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h | 17 +++---------
 .../VideoRenderers/HwDecRender/RendererIMX.cpp     |  4 +--
 3 files changed, 18 insertions(+), 35 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index bfb9a3f..09e07bb 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1240,8 +1240,6 @@ CIMXContext::CIMXContext()
   m_pageCrops = new CRectInt[m_fbPages];
   CLog::Log(LOGDEBUG, "iMX : Allocated %d render buffers\n", m_fbPages);
 
-  SetBlitRects(CRectInt(), CRectInt());
-
   g2dOpenDevices();
 }
 
@@ -1470,12 +1468,6 @@ bool CIMXContext::SetVSync(bool enable)
   return true;
 }
 
-void CIMXContext::SetBlitRects(const CRect &srcRect, const CRect &dstRect)
-{
-  m_srcRect = srcRect;
-  m_dstRect = dstRect;
-}
-
 inline
 void CIMXContext::SetFieldData(uint8_t fieldFmt, double fps)
 {
@@ -1529,7 +1521,8 @@ int setIPUMotion(bool hasPrev, EINTERLACEMETHOD imethod)
   return HIGH_MOTION;
 }
 
-void CIMXContext::Blit(CIMXBuffer *source_p, CIMXBuffer *source, uint8_t fieldFmt, int page)
+void CIMXContext::Blit(CIMXBuffer *source_p, CIMXBuffer *source, const CRect &srcRect,
+                       const CRect &dstRect, uint8_t fieldFmt, int page)
 {
   if (page == RENDER_TASK_AUTOPAGE)
     page = m_pg;
@@ -1542,12 +1535,20 @@ void CIMXContext::Blit(CIMXBuffer *source_p, CIMXBuffer *source, uint8_t fieldFm
   ipu->page = page;
 
   SetFieldData(fieldFmt, source->m_fps);
-  PrepareTask(ipu, source_p, source);
+  PrepareTask(ipu, srcRect, dstRect);
 
 #ifdef IMX_PROFILE_BUFFERS
   unsigned long long before = XbmcThreads::SystemClockMillis();
 #endif
-  DoTask(ipu);
+  SetFieldData(fieldFmt, source->m_fps);
+  PrepareTask(ipu, srcRect, dstRect);
+
+  if (!DoTask(ipu))
+    return;
+
+  m_flip = ipu->page | checkIPUStrideOffset(&ipu->task.input.deinterlace) << 4;
+  m_pingFlip.Set();
+
 #ifdef IMX_PROFILE_BUFFERS
   unsigned long long after = XbmcThreads::SystemClockMillis();
   CLog::Log(LOGDEBUG, "+P 0x%x@%d  %d\n", ((CDVDVideoCodecIMXBuffer*)ipu->current)->GetIdx(), ipu->page, (int)(after-before));
@@ -1640,15 +1641,8 @@ void CIMXContext::Clear(int page)
   SetVideoPixelFormat(m_processInfo);
 }
 
-void CIMXContext::PrepareTask(IPUTaskPtr &ipu, CIMXBuffer *source_p, CIMXBuffer *source)
+void CIMXContext::PrepareTask(IPUTaskPtr &ipu, CRect srcRect, CRect dstRect)
 {
-  // Fill with zeros
-  ipu->Zero();
-  ipu->Assign(source_p, source);
-
-  CRect srcRect = m_srcRect;
-  CRect dstRect = m_dstRect;
-
   CRectInt iSrcRect, iDstRect;
 
   float srcWidth = srcRect.Width();
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index 9b9f068..5a9d634 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -115,13 +115,12 @@ class CIMXContext : private CThread, IDispResource
   bool IsDoubleRate() const { return m_currentFieldFmt & IPU_DEINTERLACE_RATE_EN; }
   void SetVideoPixelFormat(CProcessInfo *m_pProcessInfo);
 
-  void SetBlitRects(const CRect &srcRect, const CRect &dstRect);
   bool IsZoomAllowed() const { return m_zoomAllowed; }
 
   // Blits a buffer to a particular page (-1 for auto page)
   // source_p (previous buffer) is required for de-interlacing
   // modes LOW_MOTION and MED_MOTION.
-  void Blit(CIMXBuffer *source_p, CIMXBuffer *source,
+  void Blit(CIMXBuffer *source_p, CIMXBuffer *source, const CRect &srcRect, const CRect &dstRect,
             uint8_t fieldFmt = 0, int targetPage = RENDER_TASK_AUTOPAGE);
 
   // Shows a page vsynced
@@ -145,15 +144,9 @@ class CIMXContext : private CThread, IDispResource
 private:
   struct IPUTask
   {
-    void Assign(CIMXBuffer *buffer_p, CIMXBuffer *buffer)
+    IPUTask(CIMXBuffer *buffer_p, CIMXBuffer *buffer, int p = 0)
+      : previous(buffer_p), current(buffer), page(p)
     {
-      previous = buffer_p;
-      current = buffer;
-    }
-
-    void Zero()
-    {
-      current = previous = NULL;
       memset(&task, 0, sizeof(task));
     }
 
@@ -172,7 +165,7 @@ class CIMXContext : private CThread, IDispResource
 
   bool GetFBInfo(const std::string &fbdev, struct fb_var_screeninfo *fbVar);
 
-  void PrepareTask(IPUTaskPtr &ipu, CIMXBuffer *source_p, CIMXBuffer *source);
+  void PrepareTask(IPUTaskPtr &ipu, CRect srcRect, CRect dstRect);
   bool DoTask(IPUTaskPtr &ipu, CRect *dest = nullptr);
   bool TileTask(IPUTaskPtr &ipu);
 
@@ -204,8 +197,6 @@ class CIMXContext : private CThread, IDispResource
   int                            m_ipuHandle;
   uint8_t                        m_currentFieldFmt;
   bool                           m_vsync;
-  CRect                          m_srcRect;
-  CRect                          m_dstRect;
   CRectInt                      *m_pageCrops;
   bool                           m_bFbIsConfigured;
   CEvent                         m_waitVSync;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
index 01272ff..64d88f8 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
@@ -199,8 +199,6 @@ bool CRendererIMX::RenderUpdateVideoHook(bool clear, DWORD flags, DWORD alpha)
     }
 
     //CLog::Log(LOGDEBUG, "BLIT RECTS: source x1 %f x2 %f y1 %f y2 %f dest x1 %f x2 %f y1 %f y2 %f", srcRect.x1, srcRect.x2, srcRect.y1, srcRect.y2, dstRect.x1, dstRect.x2, dstRect.y1, dstRect.y2);
-    g_IMXContext.SetBlitRects(srcRect, dstRect);
-
     uint8_t fieldFmt = flags & RENDER_FLAG_FIELDMASK;
 
     if (!g_graphicsContext.IsFullScreenVideo())
@@ -220,7 +218,7 @@ bool CRendererIMX::RenderUpdateVideoHook(bool clear, DWORD flags, DWORD alpha)
     }
 
     CDVDVideoCodecIMXBuffer *buffer_p = m_bufHistory.front();
-    g_IMXContext.Blit(buffer_p == buffer ? nullptr : buffer_p, buffer, fieldFmt);
+    g_IMXContext.Blit(buffer_p == buffer ? nullptr : buffer_p, buffer, srcRect, dstRect, fieldFmt);
   }
 
 #if 0

From 78508bc853fbdd3d2067cb4b1ecb02c757c504ca Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Fri, 26 Aug 2016 07:59:17 +0200
Subject: [PATCH 05/19] [IMX] disable profiling logs by default

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index 5a9d634..eadceb2 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -55,9 +55,8 @@
 // priorities to those subsystems can result in a very different user
 // experience. With that setting enabled we can build some statistics,
 // as numbers are always better than "feelings"
-#define IMX_PROFILE_BUFFERS
-
-#define IMX_PROFILE
+//#define IMX_PROFILE_BUFFERS
+//#define IMX_PROFILE
 //#define TRACE_FRAMES
 
 #define RENDER_USE_G2D 0

From d5c93e2ccd7dcfde674fc133b6720fa85a24b83c Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Tue, 30 Aug 2016 22:23:20 +0200
Subject: [PATCH 06/19] [IMXCodec] refactor g2dOpenDevices/g2dCloseDevices

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 27 +++++++---------------
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h |  2 --
 2 files changed, 8 insertions(+), 21 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 09e07bb..f371f9d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1239,8 +1239,6 @@ CIMXContext::CIMXContext()
   m_flip.resize(m_fbPages);
   m_pageCrops = new CRectInt[m_fbPages];
   CLog::Log(LOGDEBUG, "iMX : Allocated %d render buffers\n", m_fbPages);
-
-  g2dOpenDevices();
 }
 
 CIMXContext::~CIMXContext()
@@ -1248,7 +1246,6 @@ CIMXContext::~CIMXContext()
   Stop(false);
   Dispose();
   CloseDevices();
-  g2dCloseDevices();
 }
 
 bool CIMXContext::AdaptScreen(bool allocate)
@@ -1412,22 +1409,6 @@ bool CIMXContext::OpenDevices()
   return m_fbHandle > 0;
 }
 
-void CIMXContext::g2dOpenDevices()
-{
-  // open g2d here to ensure all g2d fucntions are called from the same thread
-  if (!g2d_open(&m_g2dHandle))
-    return;
-
-  m_g2dHandle = NULL;
-  CLog::Log(LOGERROR, "%s - Error while trying open G2D\n", __FUNCTION__);
-}
-
-void CIMXContext::g2dCloseDevices()
-{
-  if (m_g2dHandle && !g2d_close(m_g2dHandle))
-    m_g2dHandle = NULL;
-}
-
 void CIMXContext::CloseDevices()
 {
   CLog::Log(LOGINFO, "iMX : Closing devices\n");
@@ -1860,6 +1841,12 @@ bool CIMXContext::CaptureDisplay(unsigned char *&buffer, int iWidth, int iHeight
   else if (blend)
     std::memcpy(m_bufferCapture->buf_vaddr, buffer, m_bufferCapture->buf_size);
 
+  if (g2d_open(&m_g2dHandle))
+  {
+    CLog::Log(LOGERROR, "%s : Error while trying open G2D\n", __FUNCTION__);
+    return false;
+  }
+
   if (m_bufferCapture && buffer)
   {
     struct g2d_surface src, dst;
@@ -1912,6 +1899,8 @@ bool CIMXContext::CaptureDisplay(unsigned char *&buffer, int iWidth, int iHeight
   if (m_bufferCapture && g2d_free(m_bufferCapture))
     CLog::Log(LOGERROR, "iMX : Error while freeing capture buuffer\n");
 
+  if (m_g2dHandle && !g2d_close(m_g2dHandle))
+    m_g2dHandle = NULL;
   return true;
 }
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index eadceb2..066adb9 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -102,8 +102,6 @@ class CIMXContext : private CThread, IDispResource
   bool AdaptScreen(bool allocate = false);
   bool TaskRestart();
   void CloseDevices();
-  void g2dCloseDevices();
-  void g2dOpenDevices();
   bool OpenDevices();
 
   bool Blank();

From b4086e7c8fb8dc2aec408cac53917a620cb23d6e Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Tue, 30 Aug 2016 22:25:34 +0200
Subject: [PATCH 07/19] [IMXRenderer] skip rendering same frame

---
 .../cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
index 64d88f8..4262970 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
@@ -150,6 +150,7 @@ bool CRendererIMX::RenderHook(int index)
 
 bool CRendererIMX::RenderUpdateVideoHook(bool clear, DWORD flags, DWORD alpha)
 {
+  static DWORD flagsPrev;
 #if 0
   static unsigned long long previous = 0;
   unsigned long long current = XbmcThreads::SystemClockMillis();
@@ -164,6 +165,14 @@ bool CRendererIMX::RenderUpdateVideoHook(bool clear, DWORD flags, DWORD alpha)
       buffer->Lock();
       m_bufHistory.push_back(buffer);
     }
+    else if (!m_bufHistory.empty() && m_bufHistory.back() == buffer && flagsPrev == flags)
+    {
+      g_IMX.WaitVsync();
+      return true;
+    }
+
+    flagsPrev = flags;
+
     if (m_bufHistory.size() > 2)
     {
       m_bufHistory.front()->Release();

From dbf5c69707b589308a168291030e25360398e783 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Thu, 1 Sep 2016 04:00:43 +0200
Subject: [PATCH 08/19] [IMXCodec] simplify the render pipeline

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 22 +++++++++++++++-------
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h | 12 +++++++-----
 2 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index f371f9d..c96b91b 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1228,6 +1228,7 @@ CIMXContext::CIMXContext()
   , m_vsync(true)
   , m_pageCrops(NULL)
   , m_bFbIsConfigured(false)
+  , m_processThread(this, "iMX BLK")
   , m_g2dHandle(NULL)
   , m_bufferCapture(NULL)
   , m_deviceName("/dev/fb1")
@@ -1235,8 +1236,6 @@ CIMXContext::CIMXContext()
   m_waitVSync.Reset();
   m_onStartup.Reset();
   m_waitFlip.Reset();
-  m_flip.clear();
-  m_flip.resize(m_fbPages);
   m_pageCrops = new CRectInt[m_fbPages];
   CLog::Log(LOGDEBUG, "iMX : Allocated %d render buffers\n", m_fbPages);
 }
@@ -1312,10 +1311,11 @@ bool CIMXContext::AdaptScreen(bool allocate)
 
   MemMap(&fb_fix);
 
-  if (m_fbVar.bits_per_pixel == 16 || !RENDER_USE_G2D)
-    m_ipuHandle = open("/dev/mxc_ipu", O_RDWR, 0);
+  m_ipuHandle = open("/dev/mxc_ipu", O_RDWR, 0);
 
   Unblank();
+  if (!allocate)
+    m_processThread.Create(false);
 
   return true;
 
@@ -1434,13 +1434,21 @@ bool CIMXContext::Blank()
   return ioctl(m_fbHandle, FBIOBLANK, 1) == 0;
 }
 
+void CIMXContext::Run()
+{
+  unsigned long curBlank = FB_BLANK_NORMAL;
+  while (curBlank &&
+        !ioctl(open(FB_DEVICE, O_RDONLY, 0), MXCFB_GET_FB_BLANK, &curBlank))
+    Sleep(10);
+
+  m_bFbIsConfigured = !curBlank;
+}
+
 bool CIMXContext::Unblank()
 {
   if (!m_fbHandle) return false;
 
-  int ret = ioctl(m_fbHandle, FBIOBLANK, FB_BLANK_UNBLANK);
-  m_bFbIsConfigured = true;
-  return ret == 0;
+  return ioctl(m_fbHandle, FBIOBLANK, FB_BLANK_UNBLANK) == 0;
 }
 
 bool CIMXContext::SetVSync(bool enable)
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index 066adb9..a550adc 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -93,7 +93,7 @@ enum RENDER_TASK
 
 // iMX context class that handles all iMX hardware
 // related stuff
-class CIMXContext : private CThread, IDispResource
+class CIMXContext : private CThread, IDispResource, public IRunnable
 {
 public:
   CIMXContext();
@@ -175,14 +175,13 @@ class CIMXContext : private CThread, IDispResource
   virtual void OnStartup();
   virtual void OnExit();
   virtual void Process();
+  virtual void Run() override;
 
 private:
-  lkFIFO<IPUTaskPtr>             m_input;
-  std::vector<bool>              m_flip;
+  unsigned char                  m_flip;
 
   int                            m_fbHandle;
-  std::atomic<int>               m_fbCurrentPage;
-  int                            m_pg;
+  int                            m_fbCurrentPage;
   int                            m_fbWidth;
   int                            m_fbHeight;
   int                            m_fbLineLength;
@@ -203,6 +202,9 @@ class CIMXContext : private CThread, IDispResource
 
   bool                           m_zoomAllowed;
   CCriticalSection               m_pageSwapLock;
+
+  CThread                        m_processThread;
+
 public:
   void                          *m_g2dHandle;
   struct g2d_buf                *m_bufferCapture;

From b766982e4b521454ba3566576dda08ee45409b39 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Thu, 1 Sep 2016 04:09:49 +0200
Subject: [PATCH 09/19] [IMXCodec] cleanups

---
 .../cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 14 +++++++-------
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h  |  3 ---
 2 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index c96b91b..a33caa4 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -796,8 +796,8 @@ int CIMXCodec::Decode(BYTE *pData, int iSize, double dts, double pts)
                        __FUNCTION__, iSize, recalcPts(dts), recalcPts(pts), (uint)pData, ret, m_decInput.size(), m_decOutput.size());
 #endif
 
-  if (!ret || m_drainMode)
-    Sleep(3);
+  if (!(ret & VC_PICTURE) || !ret || m_drainMode)
+    Sleep(10);
 
   return ret;
 }
@@ -958,7 +958,9 @@ void CIMXCodec::Process()
 
         m_decInput.setquotasize(m_initInfo.nMinFrameBufferCount*7);
 
-        if (m_decOpenParam.CodecFormat != VPU_V_MPEG2 && !(m_decOpenParam.CodecFormat == VPU_V_AVC && m_converter))
+        bool getFrame = m_decOpenParam.CodecFormat != VPU_V_AVC || !m_converter;
+        getFrame     &= m_decOpenParam.CodecFormat != VPU_V_MPEG2;
+        if (getFrame || m_decRet & VPU_DEC_RESOLUTION_CHANGED)
         {
           SetDrainMode((VpuDecInputType)IN_DECODER_SET);
           inData = dummy;
@@ -1237,7 +1239,6 @@ CIMXContext::CIMXContext()
   m_onStartup.Reset();
   m_waitFlip.Reset();
   m_pageCrops = new CRectInt[m_fbPages];
-  CLog::Log(LOGDEBUG, "iMX : Allocated %d render buffers\n", m_fbPages);
 }
 
 CIMXContext::~CIMXContext()
@@ -1310,6 +1311,7 @@ bool CIMXContext::AdaptScreen(bool allocate)
   }
 
   MemMap(&fb_fix);
+  CLog::Log(LOGVIDEO, "iMX : Allocated %d render buffers\n", m_fbPages);
 
   m_ipuHandle = open("/dev/mxc_ipu", O_RDWR, 0);
 
@@ -1356,8 +1358,6 @@ void CIMXContext::MemMap(struct fb_fix_screeninfo *fb_fix)
     m_fbPageSize = m_fbLineLength * m_fbVar.yres_virtual / m_fbPages;
     m_fbPhysAddr = fb_fix->smem_start;
     m_fbVirtAddr = (uint8_t*)mmap(0, m_fbPhysSize, PROT_READ | PROT_WRITE, MAP_SHARED, m_fbHandle, 0);
-    m_fbCurrentPage = 0;
-    Clear();
   }
 }
 
@@ -1594,7 +1594,7 @@ void CIMXContext::SetVideoPixelFormat(CProcessInfo *m_pProcessInfo)
   if (m_processInfo && m_fbVar.bits_per_pixel == 16)
     m_processInfo->SetVideoPixelFormat("YUV 4:2:2");
   else if (m_processInfo)
-    m_processInfo->SetVideoPixelFormat("RGB 32");
+    m_processInfo->SetVideoPixelFormat("RGBA8888");
 }
 
 void CIMXContext::Clear(int page)
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index a550adc..483b120 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -59,8 +59,6 @@
 //#define IMX_PROFILE
 //#define TRACE_FRAMES
 
-#define RENDER_USE_G2D 0
-
 // If uncommented a file "stream.dump" will be created in the current
 // directory whenever a new stream is started. This is only for debugging
 // and performance tests. This define must never be active in distributions.
@@ -210,7 +208,6 @@ class CIMXContext : private CThread, IDispResource, public IRunnable
   struct g2d_buf                *m_bufferCapture;
 
   std::string                    m_deviceName;
-  int                            m_speed;
 
   double                         m_fps;
 };

From 64a685da10fcf9de9608d7690297dcf0d3dd1af7 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Thu, 1 Sep 2016 04:41:17 +0200
Subject: [PATCH 10/19] [IMXCodec] update/fix stream changes of same parameters
 (eg liveTV)

---
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp   | 18 +++++++-----------
 1 file changed, 7 insertions(+), 11 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index a33caa4..181730d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -431,7 +431,7 @@ CIMXCodec::CIMXCodec()
   m_skipMode = VPU_DEC_SKIPNONE;
 
   m_decOutput.setquotasize(1);
-  m_decInput.setquotasize(25);
+  m_decInput.setquotasize(60);
   m_loaded.Reset();
 }
 
@@ -498,7 +498,6 @@ bool CIMXCodec::Open(CDVDStreamInfo &hints, CDVDCodecOptions &options, std::stri
   {
     StopThread(false);
     ProcessSignals(SIGNAL_FLUSH);
-    m_dropped = 0;
   }
 
   m_hints = hints;
@@ -849,6 +848,9 @@ void CIMXCodec::Process()
   m_pts.clear();
   m_loaded.Set();
 
+  m_dropped = 0;
+  m_lastPTS = DVD_NOPTS_VALUE;
+
   memset(&dummy, 0, sizeof(dummy));
   AddExtraData(&dummy, (m_decOpenParam.CodecFormat == VPU_V_AVC && m_hints.extrasize));
   inData = dummy;
@@ -956,7 +958,7 @@ void CIMXCodec::Process()
           m_initInfo.nAddressAlignment, m_initInfo.PicCropRect.nLeft, m_initInfo.PicCropRect.nTop,
           m_initInfo.PicCropRect.nRight, m_initInfo.PicCropRect.nBottom, m_initInfo.nQ16ShiftWidthDivHeightRatio, m_fps);
 
-        m_decInput.setquotasize(m_initInfo.nMinFrameBufferCount*7);
+        m_decInput.setquotasize(m_fps);
 
         bool getFrame = m_decOpenParam.CodecFormat != VPU_V_AVC || !m_converter;
         getFrame     &= m_decOpenParam.CodecFormat != VPU_V_MPEG2;
@@ -1110,13 +1112,7 @@ bool CIMXCodec::GetPicture(DVDVideoPicture* pDvdVideoPicture)
   previous = current;
 #endif
 
-  if (m_dropRequest)
-  {
-    pDvdVideoPicture->iFlags = DVP_FLAG_DROPPED;
-    ++m_dropped;
-  }
-  else
-    pDvdVideoPicture->iFlags = pDvdVideoPicture->IMXBuffer->GetFlags();
+  pDvdVideoPicture->iFlags = m_dropRequest ? DVP_FLAG_DROPPED : pDvdVideoPicture->IMXBuffer->GetFlags();
 
   if (m_initInfo.nInterlace)
   {
@@ -1149,7 +1145,7 @@ bool CIMXCodec::GetPicture(DVDVideoPicture* pDvdVideoPicture)
 
 void CIMXCodec::SetDropState(bool bDrop)
 {
-  m_dropRequest = bDrop ? m_decOutput.size() > m_decOutput.getquotasize() / 3 && !m_burst : false;
+  m_dropRequest = bDrop;
 }
 
 bool CIMXCodec::IsCurrentThread() const

From 673999b3e038c920f885b32527766935789fbd31 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Sun, 4 Sep 2016 16:33:26 +0200
Subject: [PATCH 11/19] [IMXCodec] change backbuffer/showpage handling

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 40 +++++++++++-----------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 181730d..13d4072 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1354,6 +1354,7 @@ void CIMXContext::MemMap(struct fb_fix_screeninfo *fb_fix)
     m_fbPageSize = m_fbLineLength * m_fbVar.yres_virtual / m_fbPages;
     m_fbPhysAddr = fb_fix->smem_start;
     m_fbVirtAddr = (uint8_t*)mmap(0, m_fbPhysSize, PROT_READ | PROT_WRITE, MAP_SHARED, m_fbHandle, 0);
+    Clear();
   }
 }
 
@@ -1433,6 +1434,8 @@ bool CIMXContext::Blank()
 void CIMXContext::Run()
 {
   unsigned long curBlank = FB_BLANK_NORMAL;
+
+  CSingleLock lk(m_pageSwapLock);
   while (curBlank &&
         !ioctl(open(FB_DEVICE, O_RDONLY, 0), MXCFB_GET_FB_BLANK, &curBlank))
     Sleep(10);
@@ -1456,7 +1459,7 @@ bool CIMXContext::SetVSync(bool enable)
 inline
 void CIMXContext::SetFieldData(uint8_t fieldFmt, double fps)
 {
-  if (m_bStop || !IsRunning())
+  if (m_bStop || !IsRunning() || !m_bFbIsConfigured)
     return;
 
   bool dr = IsDoubleRate();
@@ -1552,33 +1555,28 @@ void CIMXContext::WaitVSync()
 
 bool CIMXContext::ShowPage()
 {
+  {
+    CSingleLock lk(m_pageSwapLock);
+    if (!m_fbHandle || !m_bFbIsConfigured)
+      return false;
+  }
+
   m_waitFlip.Wait();
-  int page = m_fbCurrentPage.load();
 
-  CSingleLock lk(m_pageSwapLock);
-  if (!m_fbHandle || !m_bFbIsConfigured) return false;
-  // Protect page swapping from screen capturing that does read the current
-  // front buffer. This is actually not done very frequently so the lock
-  // does not hurt.
-  bool ret = true;
+  bool off = m_flip >> 4;
+  m_fbCurrentPage = m_flip & 0xf;
 
   m_fbVar.activate = FB_ACTIVATE_VBL;
-  m_fbVar.yoffset = (m_fbVar.yres + 1) * page + !m_flip[page];
+  m_fbVar.yoffset = (m_fbVar.yres + 1) * m_fbCurrentPage + !off;
   if (ioctl(m_fbHandle, FBIOPAN_DISPLAY, &m_fbVar) < 0)
   {
     CLog::Log(LOGWARNING, "Panning failed: %s\n", strerror(errno));
-    ret = false;
+    return false;
   }
 
   m_waitVSync.Set();
 
-  // Wait for flip
-  if (ret && m_vsync && ioctl(m_fbHandle, FBIO_WAITFORVSYNC, 0) < 0)
-  {
-    CLog::Log(LOGWARNING, "Vsync failed: %s\n", strerror(errno));
-    ret = false;
-  }
-  return ret;
+  return true;
 }
 
 void CIMXContext::SetVideoPixelFormat(CProcessInfo *m_pProcessInfo)
@@ -1851,6 +1849,7 @@ bool CIMXContext::CaptureDisplay(unsigned char *&buffer, int iWidth, int iHeight
     return false;
   }
 
+  CSingleLock lk(m_pageSwapLock);
   if (m_bufferCapture && buffer)
   {
     struct g2d_surface src, dst;
@@ -1858,7 +1857,7 @@ bool CIMXContext::CaptureDisplay(unsigned char *&buffer, int iWidth, int iHeight
     memset(&dst, 0, sizeof(dst));
 
     {
-      src.planes[0] = m_fbPhysAddr + m_fbCurrentPage.load() * m_fbPageSize;
+      src.planes[0] = m_fbPhysAddr + m_fbCurrentPage * m_fbPageSize;
       dst.planes[0] = m_bufferCapture->buf_paddr;
       if (m_fbVar.bits_per_pixel == 16)
       {
@@ -1896,9 +1895,7 @@ bool CIMXContext::CaptureDisplay(unsigned char *&buffer, int iWidth, int iHeight
     std::memcpy(buffer, m_bufferCapture->buf_vaddr, m_bufferCapture->buf_size);
   }
   else
-  {
     CLog::Log(LOGERROR, "iMX : Error allocating capture buffer\n");
-  }
 
   if (m_bufferCapture && g2d_free(m_bufferCapture))
     CLog::Log(LOGERROR, "iMX : Error while freeing capture buuffer\n");
@@ -1943,5 +1940,8 @@ void CIMXContext::Stop(bool bWait /*= true*/)
 void CIMXContext::Process()
 {
   while (!m_bStop)
+  {
     ShowPage();
+    std::this_thread::yield();
+  }
 }

From 0b2ff9727391d0aad97c4f746722dd78c35d1beb Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Sun, 4 Sep 2016 21:53:10 +0200
Subject: [PATCH 12/19] [IMXCodec] use only 1 extra buffer

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 13d4072..e66b110 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -71,7 +71,7 @@ std::list<VpuFrameBuffer*> m_recycleBuffers;
 const int CIMXContext::m_fbPages = 3;
 
 // Experiments show that we need at least one more (+1) VPU buffer than the min value returned by the VPU
-const unsigned int CIMXCodec::m_extraVpuBuffers = 2 + CIMXContext::m_fbPages + RENDER_QUEUE_SIZE;
+const unsigned int CIMXCodec::m_extraVpuBuffers = 1 + CIMXContext::m_fbPages + RENDER_QUEUE_SIZE;
 
 CDVDVideoCodecIMX::~CDVDVideoCodecIMX()
 {

From 761856c6efc70f5e459195b1b5c6685f7b77a58c Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Sun, 4 Sep 2016 23:22:50 +0200
Subject: [PATCH 13/19] [IMXCodec] delay VPU memory reinit

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 13 +++++++++----
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h   |  1 +
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index e66b110..0c5bf68 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -422,6 +422,8 @@ CIMXCodec::CIMXCodec()
   , m_fps(-1)
   , m_burst(0)
 {
+  m_nrOut.store(0);
+
   m_vpuHandle = 0;
   m_converter = NULL;
 #ifdef DUMP_STREAM
@@ -813,6 +815,7 @@ void CIMXCodec::RecycleFrameBuffers()
     m_pts[m_recycleBuffers.front()] = DVD_NOPTS_VALUE;
     VPU_DecOutFrameDisplayed(m_vpuHandle, m_recycleBuffers.front());
     m_recycleBuffers.pop_front();
+  --m_nrOut;
   }
 }
 
@@ -925,12 +928,13 @@ void CIMXCodec::Process()
       if (m_decRet & VPU_DEC_INIT_OK || m_decRet & VPU_DEC_RESOLUTION_CHANGED)
       // VPU decoding init OK : We can retrieve stream info
       {
-        m_decOutput.setquotasize(1);
-        if (m_decRet & VPU_DEC_RESOLUTION_CHANGED && m_decOutput.size())
+        if (m_decRet & VPU_DEC_RESOLUTION_CHANGED)
         {
-          unsigned int returning = m_decOutput.size() + RENDER_QUEUE_SIZE;
-          while (m_recycleBuffers.size() < returning && !m_bStop)
+          while (m_nrOut > 3 && !m_bStop)
+          {
+            RecycleFrameBuffers();
             std::this_thread::yield();
+          }
         }
 
         if (VPU_DecGetInitialInfo(m_vpuHandle, &m_initInfo) != VPU_DEC_RET_SUCCESS)
@@ -980,6 +984,7 @@ void CIMXCodec::Process()
         m_frameInfo.pExtInfo->nFrmWidth  = (((m_frameInfo.pExtInfo->nFrmWidth) + 15) & ~15);
         m_frameInfo.pExtInfo->nFrmHeight = (((m_frameInfo.pExtInfo->nFrmHeight) + 15) & ~15);
 
+        ++m_nrOut;
         CDVDVideoCodecIMXBuffer *buffer = new CDVDVideoCodecIMXBuffer(&m_frameInfo, m_fps, m_decOpenParam.nMapType);
 
         /* quick & dirty fix to get proper timestamping for VP8 codec */
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index 483b120..d40482b 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -417,6 +417,7 @@ class CIMXCodec : public CThread
   bool                         IsCurrentThread() const;
 
   CCriticalSection             m_openLock;
+  std::atomic<unsigned char>   m_nrOut;
 };
 
 

From 1b9e693c75206d14d8a71d3fadcb2f19583af5ee Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Sun, 4 Sep 2016 23:23:35 +0200
Subject: [PATCH 14/19] [IMXCodec] simplify Blit()

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 22 +++++++---------------
 1 file changed, 7 insertions(+), 15 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 0c5bf68..a4cde09 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1517,18 +1517,15 @@ int setIPUMotion(bool hasPrev, EINTERLACEMETHOD imethod)
 void CIMXContext::Blit(CIMXBuffer *source_p, CIMXBuffer *source, const CRect &srcRect,
                        const CRect &dstRect, uint8_t fieldFmt, int page)
 {
+  static unsigned char pg;
+
   if (page == RENDER_TASK_AUTOPAGE)
-    page = m_pg;
+    page = pg;
   else if (page < 0 && page >= m_fbPages)
     return;
 
-  m_pg = ++m_pg % m_fbPages;
-
-  IPUTaskPtr ipu(new IPUTask);
-  ipu->page = page;
-
-  SetFieldData(fieldFmt, source->m_fps);
-  PrepareTask(ipu, srcRect, dstRect);
+  IPUTaskPtr ipu(new IPUTask(source_p, source, page));
+  pg = ++pg % m_fbPages;
 
 #ifdef IMX_PROFILE_BUFFERS
   unsigned long long before = XbmcThreads::SystemClockMillis();
@@ -1540,22 +1537,17 @@ void CIMXContext::Blit(CIMXBuffer *source_p, CIMXBuffer *source, const CRect &sr
     return;
 
   m_flip = ipu->page | checkIPUStrideOffset(&ipu->task.input.deinterlace) << 4;
-  m_pingFlip.Set();
+  m_waitFlip.Set();
 
 #ifdef IMX_PROFILE_BUFFERS
   unsigned long long after = XbmcThreads::SystemClockMillis();
   CLog::Log(LOGDEBUG, "+P 0x%x@%d  %d\n", ((CDVDVideoCodecIMXBuffer*)ipu->current)->GetIdx(), ipu->page, (int)(after-before));
 #endif
-
-  m_fbCurrentPage.store(ipu->page);
-  m_waitFlip.Set();
-
-  m_flip[ipu->page] = checkIPUStrideOffset(&ipu->task.input.deinterlace);
 }
 
 void CIMXContext::WaitVSync()
 {
-  m_waitVSync.WaitMSec(1000 / g_graphicsContext.GetFPS());
+  m_waitVSync.WaitMSec(1300 / g_graphicsContext.GetFPS());
 }
 
 bool CIMXContext::ShowPage()

From 2b55e487fe160692a190c86e90a8e927a5228c04 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Mon, 5 Sep 2016 00:44:58 +0200
Subject: [PATCH 15/19] [IMXCodec] align code with EINTERLACEMETHOD refactoring

---
 .../DVDCodecs/Video/DVDVideoCodecIMX.cpp           | 52 ++++++++++++++++------
 .../VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h |  5 ++-
 .../VideoRenderers/HwDecRender/RendererIMX.cpp     | 19 --------
 .../VideoRenderers/HwDecRender/RendererIMX.h       |  2 -
 4 files changed, 42 insertions(+), 36 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index a4cde09..02e829b 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -33,6 +33,8 @@
 #include "linux/imx/IMX.h"
 #include "libavcodec/avcodec.h"
 
+#include "guilib/LocalizeStrings.h"
+
 #include <cassert>
 #include <sys/stat.h>
 #include <sys/ioctl.h>
@@ -439,7 +441,7 @@ CIMXCodec::CIMXCodec()
 
 CIMXCodec::~CIMXCodec()
 {
-  g_IMXContext.SetVideoPixelFormat(nullptr);
+  g_IMXContext.SetProcessInfo(nullptr);
   StopThread(false);
   ProcessSignals(SIGNAL_SIGNAL);
   SetDrainMode(VPU_DEC_IN_DRAIN);
@@ -623,11 +625,18 @@ bool CIMXCodec::Open(CDVDStreamInfo &hints, CDVDCodecOptions &options, std::stri
     return false;
   }
 
+  std::list<EINTERLACEMETHOD> deintMethods({ EINTERLACEMETHOD::VS_INTERLACEMETHOD_AUTO,
+                                             EINTERLACEMETHOD::VS_INTERLACEMETHOD_RENDER_BOB });
+
+  for(int i = EINTERLACEMETHOD::VS_INTERLACEMETHOD_IMX_FASTMOTION; i <= EINTERLACEMETHOD::VS_INTERLACEMETHOD_IMX_ADVMOTION_HALF; ++i)
+    deintMethods.push_back(static_cast<EINTERLACEMETHOD>(i));
+
   m_processInfo = m_pProcessInfo;
   m_processInfo->SetVideoDecoderName(m_pFormatName, true);
   m_processInfo->SetVideoDimensions(m_hints.width, m_hints.height);
-  m_processInfo->SetVideoDeintMethod("hardware");
-  g_IMXContext.SetVideoPixelFormat(m_processInfo);
+  m_processInfo->SetVideoDeintMethod("none");
+  m_processInfo->UpdateDeinterlacingMethods(deintMethods);
+  g_IMXContext.SetProcessInfo(m_processInfo);
 
   return true;
 }
@@ -1480,6 +1489,10 @@ void CIMXContext::SetFieldData(uint8_t fieldFmt, double fps)
     return;
 
   m_fps = fps;
+
+  std::string strMotion;
+  m_motion = SetIPUMotion(strMotion);
+  m_processInfo->SetVideoDeintMethod(strMotion);
   CLog::Log(LOGDEBUG, "iMX : Output parameters changed - deinterlace %s%s, fps: %.3f\n", !!fieldFmt ? "active" : "not active", IsDoubleRate() ? " DR" : "", m_fps);
 
   CSingleLock lk(m_pageSwapLock);
@@ -1503,15 +1516,28 @@ bool checkIPUStrideOffset(struct ipu_deinterlace *d)
   }
 }
 
-inline
-int setIPUMotion(bool hasPrev, EINTERLACEMETHOD imethod)
+ipu_motion_sel CIMXContext::SetIPUMotion(std::string &strImethod)
 {
-  if (hasPrev && imethod == VS_INTERLACEMETHOD_IMX_ADVMOTION)
+  EINTERLACEMETHOD imethod = CMediaSettings::GetInstance().GetCurrentVideoSettings().m_InterlaceMethod;
+  switch (imethod)
+  {
+  case VS_INTERLACEMETHOD_IMX_ADVMOTION:
+    strImethod = g_localizeStrings.Get(16336);
     return MED_MOTION;
-  else if (hasPrev && (imethod == VS_INTERLACEMETHOD_IMX_ADVMOTION_HALF || imethod == VS_INTERLACEMETHOD_AUTO))
+
+  case VS_INTERLACEMETHOD_IMX_ADVMOTION_HALF:
+  case VS_INTERLACEMETHOD_AUTO:
+    strImethod = g_localizeStrings.Get(16335);
     return MED_MOTION;
 
-  return HIGH_MOTION;
+  case VS_INTERLACEMETHOD_IMX_FASTMOTION:
+    strImethod = g_localizeStrings.Get(16334);
+    return HIGH_MOTION;
+
+  default:
+    strImethod = g_localizeStrings.Get(16021);
+    return HIGH_MOTION;
+  }
 }
 
 void CIMXContext::Blit(CIMXBuffer *source_p, CIMXBuffer *source, const CRect &srcRect,
@@ -1576,15 +1602,15 @@ bool CIMXContext::ShowPage()
   return true;
 }
 
-void CIMXContext::SetVideoPixelFormat(CProcessInfo *m_pProcessInfo)
+void CIMXContext::SetProcessInfo(CProcessInfo *m_pProcessInfo)
 {
   m_processInfo = m_pProcessInfo;
   if (!m_processInfo)
     return;
 
-  if (m_processInfo && m_fbVar.bits_per_pixel == 16)
+  if (m_fbVar.bits_per_pixel == 16)
     m_processInfo->SetVideoPixelFormat("YUV 4:2:2");
-  else if (m_processInfo)
+  else
     m_processInfo->SetVideoPixelFormat("RGBA8888");
 }
 
@@ -1618,7 +1644,7 @@ void CIMXContext::Clear(int page)
   else
     CLog::Log(LOGERROR, "iMX Clear fb error : Unexpected format");
 
-  SetVideoPixelFormat(m_processInfo);
+  SetProcessInfo(m_processInfo);
 }
 
 void CIMXContext::PrepareTask(IPUTaskPtr &ipu, CRect srcRect, CRect dstRect)
@@ -1680,7 +1706,7 @@ void CIMXContext::PrepareTask(IPUTaskPtr &ipu, CRect srcRect, CRect dstRect)
   if (m_currentFieldFmt)
   {
     ipu->task.input.deinterlace.enable = 1;
-    ipu->task.input.deinterlace.motion = setIPUMotion(ipu->previous, CMediaSettings::GetInstance().GetCurrentVideoSettings().m_InterlaceMethod);
+    ipu->task.input.deinterlace.motion = m_motion;
     ipu->task.input.deinterlace.field_fmt = m_currentFieldFmt;
   }
 }
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
index d40482b..6a4f638 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h
@@ -108,10 +108,10 @@ class CIMXContext : private CThread, IDispResource, public IRunnable
 
   // Blitter configuration
   bool IsDoubleRate() const { return m_currentFieldFmt & IPU_DEINTERLACE_RATE_EN; }
-  void SetVideoPixelFormat(CProcessInfo *m_pProcessInfo);
-
+  void SetProcessInfo(CProcessInfo *m_pProcessInfo);
   bool IsZoomAllowed() const { return m_zoomAllowed; }
 
+  ipu_motion_sel SetIPUMotion(std::string &strImethod);
   // Blits a buffer to a particular page (-1 for auto page)
   // source_p (previous buffer) is required for de-interlacing
   // modes LOW_MOTION and MED_MOTION.
@@ -197,6 +197,7 @@ class CIMXContext : private CThread, IDispResource, public IRunnable
   CEvent                         m_onStartup;
   CEvent                         m_waitFlip;
   CProcessInfo                  *m_processInfo;
+  ipu_motion_sel                 m_motion;
 
   bool                           m_zoomAllowed;
   CCriticalSection               m_pageSwapLock;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
index 4262970..aeef073 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.cpp
@@ -92,30 +92,11 @@ bool CRendererIMX::Supports(ERENDERFEATURE feature)
   return false;
 }
 
-bool CRendererIMX::Supports(EINTERLACEMETHOD method)
-{
-  if(method == VS_INTERLACEMETHOD_AUTO)
-    return true;
-
-  if(method == VS_INTERLACEMETHOD_IMX_ADVMOTION
-  || method == VS_INTERLACEMETHOD_IMX_ADVMOTION_HALF
-  || method == VS_INTERLACEMETHOD_IMX_FASTMOTION
-  || method == VS_INTERLACEMETHOD_RENDER_BOB)
-    return true;
-  else
-    return false;
-}
-
 bool CRendererIMX::Supports(ESCALINGMETHOD method)
 {
   return method == VS_SCALINGMETHOD_AUTO;
 }
 
-EINTERLACEMETHOD CRendererIMX::AutoInterlaceMethod()
-{
-  return VS_INTERLACEMETHOD_IMX_ADVMOTION_HALF;
-}
-
 bool CRendererIMX::WantsDoublePass()
 {
   if (CMediaSettings::GetInstance().GetCurrentVideoSettings().m_InterlaceMethod ==
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h
index e2582a6..fc71e89 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererIMX.h
@@ -42,13 +42,11 @@ class CRendererIMX : public CLinuxRendererGLES
   virtual bool IsGuiLayer();
 
   // Feature support
-  virtual bool Supports(EINTERLACEMETHOD method);
   virtual bool Supports(ESCALINGMETHOD method);
   virtual bool Supports(ERENDERFEATURE feature);
 
   virtual bool WantsDoublePass() override;
 
-  virtual EINTERLACEMETHOD AutoInterlaceMethod();
   virtual CRenderInfo GetRenderInfo();
 
 protected:

From 794315f36f980e6937d40c80ee1053390acc5cd0 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Mon, 5 Sep 2016 04:57:23 +0200
Subject: [PATCH 16/19] [IMXCodec] refactor IsBlank() as utility(CIMX) static
 func

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 7 ++-----
 xbmc/linux/imx/IMX.cpp                                      | 9 +++++++++
 xbmc/linux/imx/IMX.h                                        | 2 ++
 3 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 02e829b..5d05b64 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1447,14 +1447,11 @@ bool CIMXContext::Blank()
 
 void CIMXContext::Run()
 {
-  unsigned long curBlank = FB_BLANK_NORMAL;
-
   CSingleLock lk(m_pageSwapLock);
-  while (curBlank &&
-        !ioctl(open(FB_DEVICE, O_RDONLY, 0), MXCFB_GET_FB_BLANK, &curBlank))
+  while (CIMX::IsBlank())
     Sleep(10);
 
-  m_bFbIsConfigured = !curBlank;
+  m_bFbIsConfigured = true;
 }
 
 bool CIMXContext::Unblank()
diff --git a/xbmc/linux/imx/IMX.cpp b/xbmc/linux/imx/IMX.cpp
index ee4e60a..4087406 100644
--- a/xbmc/linux/imx/IMX.cpp
+++ b/xbmc/linux/imx/IMX.cpp
@@ -158,6 +158,15 @@ void CIMX::OnResetDisplay()
   m_change = true;
 }
 
+bool CIMX::IsBlank()
+{
+  unsigned long curBlank;
+  int fd = open(FB_DEVICE, O_RDONLY | O_NONBLOCK);
+  bool ret = ioctl(fd, MXCFB_GET_FB_BLANK, &curBlank) || curBlank != FB_BLANK_UNBLANK;
+  close(fd);
+  return ret;
+}
+
 bool CIMXFps::Recalc()
 {
   double prev = DVD_NOPTS_VALUE;
diff --git a/xbmc/linux/imx/IMX.h b/xbmc/linux/imx/IMX.h
index c0a13cd9..8d13333 100644
--- a/xbmc/linux/imx/IMX.h
+++ b/xbmc/linux/imx/IMX.h
@@ -54,6 +54,8 @@ class CIMX : public CThread, IDispResource
   int           WaitVsync();
   virtual void  OnResetDisplay();
 
+  static bool   IsBlank();
+
 private:
   virtual void  Process();
   bool          UpdateDCIC();

From 6724f66b96f73818ad63f4b217dca5aeb77fd7ba Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Mon, 5 Sep 2016 05:00:21 +0200
Subject: [PATCH 17/19] [IMXCodec] check for req ipu(previous) at single point
 (of interlacing setup)

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 5d05b64..a083de5 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1700,7 +1700,7 @@ void CIMXContext::PrepareTask(IPUTaskPtr &ipu, CRect srcRect, CRect dstRect)
   ipu->task.output.crop.h     = iDstRect.Height();
 
   // Setup deinterlacing if enabled
-  if (m_currentFieldFmt)
+  if (m_currentFieldFmt && ipu->previous)
   {
     ipu->task.input.deinterlace.enable = 1;
     ipu->task.input.deinterlace.motion = m_motion;
@@ -1715,7 +1715,7 @@ bool CIMXContext::TileTask(IPUTaskPtr &ipu)
 
   if (ipu->current->iFormat != _4CC('T', 'N', 'V', 'F') && ipu->current->iFormat != _4CC('T', 'N', 'V', 'P'))
   {
-    if (ipu->task.input.deinterlace.enable && ipu->task.input.deinterlace.motion != HIGH_MOTION && ipu->previous)
+    if (ipu->task.input.deinterlace.enable && ipu->task.input.deinterlace.motion != HIGH_MOTION)
     {
       ipu->task.input.paddr_n = ipu->task.input.paddr;
       ipu->task.input.paddr   = ipu->previous->pPhysAddr + pad;
@@ -1726,7 +1726,7 @@ bool CIMXContext::TileTask(IPUTaskPtr &ipu)
   }
 
   // Use band mode directly to FB, as no transformations needed (eg cropping)
-  if (m_fps > 51 && m_fbWidth == 1920 && ipu->task.input.width == 1920 && !ipu->task.input.deinterlace.enable)
+  if (m_fps >= 49 && m_fbWidth == 1920 && ipu->task.input.width == 1920 && !ipu->task.input.deinterlace.enable)
   {
     m_zoomAllowed = false;
     ipu->task.output.crop.pos.x = ipu->task.input.crop.pos.x = 0;
@@ -1773,7 +1773,7 @@ bool CIMXContext::TileTask(IPUTaskPtr &ipu)
 
   ipu->task.input.paddr   = vdoa.output.paddr + pad;
   ipu->task.input.format  = vdoa.output.format;
-  if (ipu->task.input.deinterlace.enable && ipu->task.input.deinterlace.motion != HIGH_MOTION && ipu->previous)
+  if (ipu->task.input.deinterlace.enable && ipu->task.input.deinterlace.motion != HIGH_MOTION)
   {
     ipu->task.input.paddr_n = ipu->task.input.paddr;
     ipu->task.input.paddr   = ipu->previous->pPhysAddr + pad;

From 11506b3cef44340a57ffec07f8654d2b5a5ad2b5 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Mon, 5 Sep 2016 02:24:25 +0200
Subject: [PATCH 18/19] [IMX] fix stuck on condition during Kodi Quit

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index a083de5..2fff95d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1952,6 +1952,7 @@ void CIMXContext::Stop(bool bWait /*= true*/)
     return;
 
   CThread::StopThread(false);
+  m_waitFlip.Set();
   Blank();
   if (bWait && IsRunning())
     CThread::StopThread(true);

From 77d5da2a8d9d783a6dc0104edf8377cd05eb90d7 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Fri, 9 Sep 2016 19:04:09 +0200
Subject: [PATCH 19/19] [IMXEGL] call UNBLANK FB before WinSystem calls
 OnResetDisplay

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp | 3 ++-
 xbmc/windowing/egl/EGLNativeTypeIMX.cpp                     | 2 ++
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
index 2fff95d..f692482 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp
@@ -1381,7 +1381,8 @@ void CIMXContext::OnLostDisplay()
 void CIMXContext::OnResetDisplay()
 {
   CSingleLock lk(m_pageSwapLock);
-  m_bFbIsConfigured = false;
+  if (m_bFbIsConfigured)
+    return;
 
   CLog::Log(LOGDEBUG, "iMX : %s - going to change screen parameters\n", __FUNCTION__);
   AdaptScreen();
diff --git a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
index d8c0983..0948032 100644
--- a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
@@ -263,6 +263,8 @@ bool CEGLNativeTypeIMX::SetNativeResolution(const RESOLUTION_INFO &res)
   CreateNativeDisplay();
   CreateNativeWindow();
 
+  g_IMXContext.OnResetDisplay();
+  ShowWindow(true);
   CLog::Log(LOGDEBUG, "%s: %s",__FUNCTION__, res.strId.c_str());
 
   return true;
