diff -Naur xbmc-14-31ce987/configure.in xbmc-14-31ce987.patch/configure.in
--- xbmc-14-31ce987/configure.in	2014-10-20 02:31:03.259864060 +0200
+++ xbmc-14-31ce987.patch/configure.in	2014-10-20 12:49:16.126851321 +0200
@@ -2501,7 +2501,7 @@
     xbmc/osx/Info.plist \
     xbmc/osx/ios/XBMCIOS-Info.plist \
     xbmc/osx/atv2/XBMCATV2-Info.plist \
-    project/cmake/xbmc-config.cmake \
+    project/cmake/kodi-config.cmake \
     tools/android/packaging/xbmc/AndroidManifest.xml \
     tools/android/packaging/Makefile \
     tools/android/packaging/xbmc/src/org/xbmc/kodi/Splash.java \
diff -Naur xbmc-14-31ce987/.gitignore xbmc-14-31ce987.patch/.gitignore
--- xbmc-14-31ce987/.gitignore	2014-10-20 02:31:03.272864215 +0200
+++ xbmc-14-31ce987.patch/.gitignore	2014-10-20 12:49:03.991834753 +0200
@@ -337,7 +337,7 @@
 /project/output
 
 # /project/cmake
-/project/cmake/xbmc-config.cmake
+/project/cmake/kodi-config.cmake
 /project/cmake/*.error
 /project/cmake/addons/build
 /project/cmake/addons/depends/build
diff -Naur xbmc-14-31ce987/project/cmake/addons/CMakeLists.txt xbmc-14-31ce987.patch/project/cmake/addons/CMakeLists.txt
--- xbmc-14-31ce987/project/cmake/addons/CMakeLists.txt	2014-10-18 12:14:11.000000000 +0200
+++ xbmc-14-31ce987.patch/project/cmake/addons/CMakeLists.txt	2014-10-20 12:47:44.298691059 +0200
@@ -70,14 +70,14 @@
 endif()
 
 if(NOT WIN32)
-  # copy the xbmc-prepare-env.cmake script to the depends path so that we can include it
-  file(COPY ${XBMCROOT}/project/cmake/scripts/common/xbmc-prepare-env.cmake DESTINATION ${DEPENDS_PATH}/lib/xbmc)
+  # copy the kodi-prepare-env.cmake script to the depends path so that we can include it
+  file(COPY ${XBMCROOT}/project/cmake/scripts/common/kodi-prepare-env.cmake DESTINATION ${DEPENDS_PATH}/lib/kodi)
 
-  # add the location of xbmc-prepare-env.cmake to CMAKE_MODULE_PATH so that it is found
-  list(APPEND CMAKE_MODULE_PATH ${DEPENDS_PATH}/lib/xbmc)
+  # add the location of kodi-prepare-env.cmake to CMAKE_MODULE_PATH so that it is found
+  list(APPEND CMAKE_MODULE_PATH ${DEPENDS_PATH}/lib/kodi)
 
-  # include xbmc-prepare-env.cmake which contains the logic to install the addon header bindings etc
-  include(xbmc-prepare-env)
+  # include kodi-prepare-env.cmake which contains the logic to install the addon header bindings etc
+  include(kodi-prepare-env)
 endif()
 
 ### get and build all the binary addons
diff -Naur xbmc-14-31ce987/project/cmake/addons/depends/windows/cmake/xbmc/CMakeLists.txt xbmc-14-31ce987.patch/project/cmake/addons/depends/windows/cmake/xbmc/CMakeLists.txt
--- xbmc-14-31ce987/project/cmake/addons/depends/windows/cmake/xbmc/CMakeLists.txt	2014-10-18 12:14:11.000000000 +0200
+++ xbmc-14-31ce987.patch/project/cmake/addons/depends/windows/cmake/xbmc/CMakeLists.txt	2014-10-20 12:46:06.181514316 +0200
@@ -21,11 +21,11 @@
 get_filename_component(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" ABSOLUTE)
 
 ### prepare the environment
-# set the DEPENDS_PATH variable used by xbmc-prepare-env
+# set the DEPENDS_PATH variable used by kodi-prepare-env
 set(DEPENDS_PATH "${CMAKE_INSTALL_PREFIX}")
 
-# copy the xbmc-prepare-env.cmake script so that we can include it
-file(COPY ${XBMCROOT}/project/cmake/scripts/common/xbmc-prepare-env.cmake DESTINATION ${CMAKE_BINARY_DIR})
+# copy the kodi-prepare-env.cmake script so that we can include it
+file(COPY ${XBMCROOT}/project/cmake/scripts/common/kodi-prepare-env.cmake DESTINATION ${CMAKE_BINARY_DIR})
 
-# include xbmc-prepare-env.cmake which contains the logic to install the addon header bindings etc
-include(xbmc-prepare-env)
\ Kein Zeilenumbruch am Dateiende.
+# include kodi-prepare-env.cmake which contains the logic to install the addon header bindings etc
+include(kodi-prepare-env)
\ Kein Zeilenumbruch am Dateiende.
diff -Naur xbmc-14-31ce987/project/cmake/addons/README xbmc-14-31ce987.patch/project/cmake/addons/README
--- xbmc-14-31ce987/project/cmake/addons/README	2014-10-18 12:14:11.000000000 +0200
+++ xbmc-14-31ce987.patch/project/cmake/addons/README	2014-10-20 12:44:44.880370598 +0200
@@ -33,8 +33,8 @@
   * XBMCROOT points to the root directory of the xbmc project (default is the
     absolute representation of ../../.. starting from this directory).
   * PACKAGE_ZIP=1 will mean the add-ons will be 'packaged' into a common folder,
-    rather than being placed in <CMAKE_INSTALL_PREFIX>/lib/xbmc/addons and
-    <CMAKE_INSTALL_PREFIX>/share/xbmc/addons.
+    rather than being placed in <CMAKE_INSTALL_PREFIX>/lib/kodi/addons and
+    <CMAKE_INSTALL_PREFIX>/share/kodi/addons.
   * ARCH_DEFINES specifies the platform-specific C/C++ preprocessor defines
     (defaults to empty).
 
diff -Naur xbmc-14-31ce987/project/cmake/kodi-config.cmake.in xbmc-14-31ce987.patch/project/cmake/kodi-config.cmake.in
--- xbmc-14-31ce987/project/cmake/kodi-config.cmake.in	1970-01-01 01:00:00.000000000 +0100
+++ xbmc-14-31ce987.patch/project/cmake/kodi-config.cmake.in	2014-10-20 13:11:45.147629367 +0200
@@ -0,0 +1,8 @@
+SET(XBMC_INCLUDE_DIR @prefix@/include)
+SET(APP_NAME @APP_NAME@)
+SET(APP_VERSION_MAJOR @APP_VERSION_MAJOR@)
+SET(APP_VERSION_MINOR @APP_VERSION_MINOR@)
+LIST(APPEND CMAKE_MODULE_PATH @prefix@/lib/kodi)
+ADD_DEFINITIONS(@ARCH_DEFINES@)
+
+include(kodi-addon-helpers)
diff -Naur xbmc-14-31ce987/project/cmake/scripts/common/kodi-addon-helpers.cmake xbmc-14-31ce987.patch/project/cmake/scripts/common/kodi-addon-helpers.cmake
--- xbmc-14-31ce987/project/cmake/scripts/common/kodi-addon-helpers.cmake	1970-01-01 01:00:00.000000000 +0100
+++ xbmc-14-31ce987.patch/project/cmake/scripts/common/kodi-addon-helpers.cmake	2014-10-20 02:39:16.065509547 +0200
@@ -0,0 +1,99 @@
+# Workaround for the fact that cpack's filenames are not customizable.
+# Each add-on is added as a separate component to facilitate zip/tgz packaging.
+# The filenames are always of the form basename-component, which is 
+# incompatible with the addonid-version scheme we want. This hack renames
+# the files from the file names generated by the 'package' target.
+# Sadly we cannot extend the 'package' target, as it is a builtin target, see 
+# http://public.kitware.com/Bug/view.php?id=8438
+# Thus, we have to add an 'addon-package' target.
+add_custom_target(addon-package
+                  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target package)
+
+macro(add_cpack_workaround target version ext)
+  add_custom_command(TARGET addon-package PRE_BUILD
+                     COMMAND ${CMAKE_COMMAND} -E rename addon-${target}-${version}.${ext} ${target}-${version}.${ext})
+endmacro()
+
+# Grab the version from a given add-on's addon.xml
+macro (addon_version dir prefix)
+  FILE(READ ${dir}/addon.xml ADDONXML)
+  STRING(REGEX MATCH "<addon[^>]*version.?=.?.[0-9\\.]+" VERSION_STRING ${ADDONXML}) 
+  STRING(REGEX REPLACE ".*version=.([0-9\\.]+).*" "\\1" ${prefix}_VERSION ${VERSION_STRING})
+  message(STATUS ${prefix}_VERSION=${${prefix}_VERSION})
+endmacro()
+
+# Build, link and optionally package an add-on
+macro (build_addon target prefix libs)
+  ADD_LIBRARY(${target} ${${prefix}_SOURCES})
+  TARGET_LINK_LIBRARIES(${target} ${${libs}})
+  addon_version(${target} ${prefix})
+  SET_TARGET_PROPERTIES(${target} PROPERTIES VERSION ${${prefix}_VERSION}
+                                             SOVERSION ${APP_VERSION_MAJOR}.${APP_VERSION_MINOR}
+                                             PREFIX "")
+  IF(OS STREQUAL "android")
+    SET_TARGET_PROPERTIES(${target} PROPERTIES PREFIX "lib")
+  ENDIF(OS STREQUAL "android")
+
+  # set zip as default if addon-package is called without PACKAGE_XXX
+  SET(CPACK_GENERATOR "ZIP")
+  SET(ext "zip")
+  IF(PACKAGE_ZIP OR PACKAGE_TGZ)
+    IF(PACKAGE_TGZ)
+      SET(CPACK_GENERATOR "TGZ")
+      SET(ext "tar.gz")
+    ENDIF(PACKAGE_TGZ)
+    SET(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)
+    set(CPACK_PACKAGE_FILE_NAME addon)
+    IF(CMAKE_BUILD_TYPE STREQUAL "Release")
+      SET(CPACK_STRIP_FILES TRUE)
+    ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")
+    set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
+    set(CPACK_COMPONENTS_IGNORE_GROUPS 1)
+    list(APPEND CPACK_COMPONENTS_ALL ${target}-${${prefix}_VERSION})
+    # Pack files together to create an archive
+    INSTALL(DIRECTORY ${target} DESTINATION ./ COMPONENT ${target}-${${prefix}_VERSION})
+    IF(WIN32)
+      INSTALL(PROGRAMS ${CMAKE_BINARY_DIR}/${target}.dll
+              DESTINATION ${target}
+              COMPONENT ${target}-${${prefix}_VERSION})
+    ELSE(WIN32)
+      INSTALL(TARGETS ${target} DESTINATION ${target}
+              COMPONENT ${target}-${${prefix}_VERSION})
+    ENDIF(WIN32)
+    add_cpack_workaround(${target} ${${prefix}_VERSION} ${ext})
+  ELSE(PACKAGE_ZIP OR PACKAGE_TGZ)
+    INSTALL(TARGETS ${target} DESTINATION lib/kodi/addons/${target})
+    INSTALL(DIRECTORY ${target} DESTINATION share/kodi/addons)
+  ENDIF(PACKAGE_ZIP OR PACKAGE_TGZ)
+endmacro()
+
+# finds a path to a given file (recursive)
+function (xbmc_find_path var_name filename search_path strip_file)
+  file(GLOB_RECURSE PATH_TO_FILE ${search_path} ${filename})
+  if(strip_file)
+    string(REPLACE ${filename} "" PATH_TO_FILE ${PATH_TO_FILE})
+  endif(strip_file)
+  set (${var_name} ${PATH_TO_FILE} PARENT_SCOPE)
+endfunction()
+
+# Cmake build options
+include(addoptions)
+include(TestCXXAcceptsFlag)
+OPTION(PACKAGE_ZIP "Package Zip file?" OFF)
+OPTION(PACKAGE_TGZ "Package TGZ file?" OFF)
+OPTION(BUILD_SHARED_LIBS "Build shared libs?" ON)
+
+# LTO support?
+CHECK_CXX_ACCEPTS_FLAG("-flto" HAVE_LTO)
+IF(HAVE_LTO)
+  OPTION(USE_LTO "use link time optimization" OFF)
+  IF(USE_LTO)
+    add_options(ALL_LANGUAGES ALL_BUILDS "-flto")
+  ENDIF(USE_LTO)
+ENDIF(HAVE_LTO) 
+
+# set this to try linking dependencies as static as possible
+IF(ADDONS_PREFER_STATIC_LIBS)
+  SET(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
+ENDIF(ADDONS_PREFER_STATIC_LIBS)
+
diff -Naur xbmc-14-31ce987/project/cmake/scripts/common/kodi-prepare-env.cmake xbmc-14-31ce987.patch/project/cmake/scripts/common/kodi-prepare-env.cmake
--- xbmc-14-31ce987/project/cmake/scripts/common/kodi-prepare-env.cmake	1970-01-01 01:00:00.000000000 +0100
+++ xbmc-14-31ce987.patch/project/cmake/scripts/common/kodi-prepare-env.cmake	2014-10-20 12:42:39.118143975 +0200
@@ -0,0 +1,46 @@
+# parse version.txt to get the version info
+if(EXISTS "${XBMCROOT}/version.txt")
+  file(STRINGS "${XBMCROOT}/version.txt" versions)
+  foreach (version ${versions})
+    string(REGEX MATCH "^[^ ]+" version_name ${version})
+    string(REPLACE "${version_name} " "" version_value ${version})
+    set(APP_${version_name} "${version_value}")
+  endforeach()
+endif()
+
+# bail if we can't parse versions
+if(NOT DEFINED APP_VERSION_MAJOR OR NOT DEFINED APP_VERSION_MINOR)
+  message(FATAL_ERROR "Could not determine app version! make sure that ${XBMCROOT}/version.txt exists")
+endif()
+
+### copy all the addon binding header files to include/kodi
+# make sure include/kodi exists and is empty
+set(XBMC_LIB_DIR ${DEPENDS_PATH}/lib/kodi)
+if(NOT EXISTS "${XBMC_LIB_DIR}/")
+  file(MAKE_DIRECTORY ${XBMC_LIB_DIR})
+endif()
+
+set(XBMC_INCLUDE_DIR ${DEPENDS_PATH}/include/kodi)
+if(NOT EXISTS "${XBMC_INCLUDE_DIR}/")
+  file(MAKE_DIRECTORY ${XBMC_INCLUDE_DIR})
+endif()
+
+# kodi-config.cmake.in (further down) expects a "prefix" variable
+get_filename_component(prefix "${DEPENDS_PATH}" ABSOLUTE)
+
+# generate the proper kodi-config.cmake file
+configure_file(${XBMCROOT}/project/cmake/kodi-config.cmake.in ${XBMC_LIB_DIR}/kodi-config.cmake @ONLY)
+# copy cmake helpers to lib/kodi
+file(COPY ${XBMCROOT}/project/cmake/scripts/common/kodi-addon-helpers.cmake ${XBMCROOT}/project/cmake/scripts/common/addoptions.cmake DESTINATION ${XBMC_LIB_DIR})
+
+### copy all the addon binding header files to include/kodi
+# parse addon-bindings.mk to get the list of header files to copy
+file(STRINGS ${XBMCROOT}/xbmc/addons/addon-bindings.mk bindings)
+string(REPLACE "\n" ";" bindings "${bindings}")
+foreach(binding ${bindings})
+  string(REPLACE " =" ";" binding "${binding}")
+  string(REPLACE "+=" ";" binding "${binding}")
+  list(GET binding 1 header)
+  # copy the header file to include/kodi
+  file(COPY ${XBMCROOT}/${header} DESTINATION ${XBMC_INCLUDE_DIR})
+endforeach()
\ Kein Zeilenumbruch am Dateiende.
diff -Naur xbmc-14-31ce987/project/cmake/scripts/common/xbmc-addon-helpers.cmake xbmc-14-31ce987.patch/project/cmake/scripts/common/xbmc-addon-helpers.cmake
--- xbmc-14-31ce987/project/cmake/scripts/common/xbmc-addon-helpers.cmake	2014-10-18 12:14:11.000000000 +0200
+++ xbmc-14-31ce987.patch/project/cmake/scripts/common/xbmc-addon-helpers.cmake	1970-01-01 01:00:00.000000000 +0100
@@ -1,99 +0,0 @@
-# Workaround for the fact that cpack's filenames are not customizable.
-# Each add-on is added as a separate component to facilitate zip/tgz packaging.
-# The filenames are always of the form basename-component, which is 
-# incompatible with the addonid-version scheme we want. This hack renames
-# the files from the file names generated by the 'package' target.
-# Sadly we cannot extend the 'package' target, as it is a builtin target, see 
-# http://public.kitware.com/Bug/view.php?id=8438
-# Thus, we have to add an 'addon-package' target.
-add_custom_target(addon-package
-                  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target package)
-
-macro(add_cpack_workaround target version ext)
-  add_custom_command(TARGET addon-package PRE_BUILD
-                     COMMAND ${CMAKE_COMMAND} -E rename addon-${target}-${version}.${ext} ${target}-${version}.${ext})
-endmacro()
-
-# Grab the version from a given add-on's addon.xml
-macro (addon_version dir prefix)
-  FILE(READ ${dir}/addon.xml ADDONXML)
-  STRING(REGEX MATCH "<addon[^>]*version.?=.?.[0-9\\.]+" VERSION_STRING ${ADDONXML}) 
-  STRING(REGEX REPLACE ".*version=.([0-9\\.]+).*" "\\1" ${prefix}_VERSION ${VERSION_STRING})
-  message(STATUS ${prefix}_VERSION=${${prefix}_VERSION})
-endmacro()
-
-# Build, link and optionally package an add-on
-macro (build_addon target prefix libs)
-  ADD_LIBRARY(${target} ${${prefix}_SOURCES})
-  TARGET_LINK_LIBRARIES(${target} ${${libs}})
-  addon_version(${target} ${prefix})
-  SET_TARGET_PROPERTIES(${target} PROPERTIES VERSION ${${prefix}_VERSION}
-                                             SOVERSION ${APP_VERSION_MAJOR}.${APP_VERSION_MINOR}
-                                             PREFIX "")
-  IF(OS STREQUAL "android")
-    SET_TARGET_PROPERTIES(${target} PROPERTIES PREFIX "lib")
-  ENDIF(OS STREQUAL "android")
-
-  # set zip as default if addon-package is called without PACKAGE_XXX
-  SET(CPACK_GENERATOR "ZIP")
-  SET(ext "zip")
-  IF(PACKAGE_ZIP OR PACKAGE_TGZ)
-    IF(PACKAGE_TGZ)
-      SET(CPACK_GENERATOR "TGZ")
-      SET(ext "tar.gz")
-    ENDIF(PACKAGE_TGZ)
-    SET(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)
-    set(CPACK_PACKAGE_FILE_NAME addon)
-    IF(CMAKE_BUILD_TYPE STREQUAL "Release")
-      SET(CPACK_STRIP_FILES TRUE)
-    ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")
-    set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
-    set(CPACK_COMPONENTS_IGNORE_GROUPS 1)
-    list(APPEND CPACK_COMPONENTS_ALL ${target}-${${prefix}_VERSION})
-    # Pack files together to create an archive
-    INSTALL(DIRECTORY ${target} DESTINATION ./ COMPONENT ${target}-${${prefix}_VERSION})
-    IF(WIN32)
-      INSTALL(PROGRAMS ${CMAKE_BINARY_DIR}/${target}.dll
-              DESTINATION ${target}
-              COMPONENT ${target}-${${prefix}_VERSION})
-    ELSE(WIN32)
-      INSTALL(TARGETS ${target} DESTINATION ${target}
-              COMPONENT ${target}-${${prefix}_VERSION})
-    ENDIF(WIN32)
-    add_cpack_workaround(${target} ${${prefix}_VERSION} ${ext})
-  ELSE(PACKAGE_ZIP OR PACKAGE_TGZ)
-    INSTALL(TARGETS ${target} DESTINATION lib/xbmc/addons/${target})
-    INSTALL(DIRECTORY ${target} DESTINATION share/xbmc/addons)
-  ENDIF(PACKAGE_ZIP OR PACKAGE_TGZ)
-endmacro()
-
-# finds a path to a given file (recursive)
-function (xbmc_find_path var_name filename search_path strip_file)
-  file(GLOB_RECURSE PATH_TO_FILE ${search_path} ${filename})
-  if(strip_file)
-    string(REPLACE ${filename} "" PATH_TO_FILE ${PATH_TO_FILE})
-  endif(strip_file)
-  set (${var_name} ${PATH_TO_FILE} PARENT_SCOPE)
-endfunction()
-
-# Cmake build options
-include(addoptions)
-include(TestCXXAcceptsFlag)
-OPTION(PACKAGE_ZIP "Package Zip file?" OFF)
-OPTION(PACKAGE_TGZ "Package TGZ file?" OFF)
-OPTION(BUILD_SHARED_LIBS "Build shared libs?" ON)
-
-# LTO support?
-CHECK_CXX_ACCEPTS_FLAG("-flto" HAVE_LTO)
-IF(HAVE_LTO)
-  OPTION(USE_LTO "use link time optimization" OFF)
-  IF(USE_LTO)
-    add_options(ALL_LANGUAGES ALL_BUILDS "-flto")
-  ENDIF(USE_LTO)
-ENDIF(HAVE_LTO) 
-
-# set this to try linking dependencies as static as possible
-IF(ADDONS_PREFER_STATIC_LIBS)
-  SET(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
-ENDIF(ADDONS_PREFER_STATIC_LIBS)
-
diff -Naur xbmc-14-31ce987/project/cmake/scripts/common/xbmc-prepare-env.cmake xbmc-14-31ce987.patch/project/cmake/scripts/common/xbmc-prepare-env.cmake
--- xbmc-14-31ce987/project/cmake/scripts/common/xbmc-prepare-env.cmake	2014-10-18 12:14:11.000000000 +0200
+++ xbmc-14-31ce987.patch/project/cmake/scripts/common/xbmc-prepare-env.cmake	1970-01-01 01:00:00.000000000 +0100
@@ -1,46 +0,0 @@
-# parse version.txt to get the version info
-if(EXISTS "${XBMCROOT}/version.txt")
-  file(STRINGS "${XBMCROOT}/version.txt" versions)
-  foreach (version ${versions})
-    string(REGEX MATCH "^[^ ]+" version_name ${version})
-    string(REPLACE "${version_name} " "" version_value ${version})
-    set(APP_${version_name} "${version_value}")
-  endforeach()
-endif()
-
-# bail if we can't parse versions
-if(NOT DEFINED APP_VERSION_MAJOR OR NOT DEFINED APP_VERSION_MINOR)
-  message(FATAL_ERROR "Could not determine app version! make sure that ${XBMCROOT}/version.txt exists")
-endif()
-
-### copy all the addon binding header files to include/xbmc
-# make sure include/xbmc exists and is empty
-set(XBMC_LIB_DIR ${DEPENDS_PATH}/lib/xbmc)
-if(NOT EXISTS "${XBMC_LIB_DIR}/")
-  file(MAKE_DIRECTORY ${XBMC_LIB_DIR})
-endif()
-
-set(XBMC_INCLUDE_DIR ${DEPENDS_PATH}/include/xbmc)
-if(NOT EXISTS "${XBMC_INCLUDE_DIR}/")
-  file(MAKE_DIRECTORY ${XBMC_INCLUDE_DIR})
-endif()
-
-# xbmc-config.cmake.in (further down) expects a "prefix" variable
-get_filename_component(prefix "${DEPENDS_PATH}" ABSOLUTE)
-
-# generate the proper xbmc-config.cmake file
-configure_file(${XBMCROOT}/project/cmake/xbmc-config.cmake.in ${XBMC_LIB_DIR}/xbmc-config.cmake @ONLY)
-# copy cmake helpers to lib/xbmc
-file(COPY ${XBMCROOT}/project/cmake/scripts/common/xbmc-addon-helpers.cmake ${XBMCROOT}/project/cmake/scripts/common/addoptions.cmake DESTINATION ${XBMC_LIB_DIR})
-
-### copy all the addon binding header files to include/xbmc
-# parse addon-bindings.mk to get the list of header files to copy
-file(STRINGS ${XBMCROOT}/xbmc/addons/addon-bindings.mk bindings)
-string(REPLACE "\n" ";" bindings "${bindings}")
-foreach(binding ${bindings})
-  string(REPLACE " =" ";" binding "${binding}")
-  string(REPLACE "+=" ";" binding "${binding}")
-  list(GET binding 1 header)
-  # copy the header file to include/xbmc
-  file(COPY ${XBMCROOT}/${header} DESTINATION ${XBMC_INCLUDE_DIR})
-endforeach()
\ Kein Zeilenumbruch am Dateiende.
diff -Naur xbmc-14-31ce987/project/cmake/xbmc-config.cmake.in xbmc-14-31ce987.patch/project/cmake/xbmc-config.cmake.in
--- xbmc-14-31ce987/project/cmake/xbmc-config.cmake.in	2014-10-18 12:14:11.000000000 +0200
+++ xbmc-14-31ce987.patch/project/cmake/xbmc-config.cmake.in	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-SET(XBMC_INCLUDE_DIR @prefix@/include)
-SET(APP_NAME @APP_NAME@)
-SET(APP_VERSION_MAJOR @APP_VERSION_MAJOR@)
-SET(APP_VERSION_MINOR @APP_VERSION_MINOR@)
-LIST(APPEND CMAKE_MODULE_PATH @prefix@/lib/xbmc)
-ADD_DEFINITIONS(@ARCH_DEFINES@)
-
-include(xbmc-addon-helpers)
