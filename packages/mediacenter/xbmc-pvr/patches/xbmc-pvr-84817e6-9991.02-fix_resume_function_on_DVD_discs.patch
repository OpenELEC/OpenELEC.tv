From 89135dd485e785fc4fa43e6919d9920696bc1f41 Mon Sep 17 00:00:00 2001
From: Voyager-xbmc <patrick.middag@telenet.be>
Date: Sun, 25 Dec 2011 21:00:27 +0100
Subject: [PATCH] Fixed resume function on DVD discs and refactoring PlayDisc
 to include/replace RunMedia functionality

---
 xbmc/Application.cpp                  |    8 +++--
 xbmc/Autorun.cpp                      |   65 +++++++++++++--------------------
 xbmc/Autorun.h                        |    5 +--
 xbmc/dialogs/GUIDialogContextMenu.cpp |    4 +-
 xbmc/interfaces/Builtins.cpp          |    2 +-
 xbmc/utils/SaveFileStateJob.h         |    7 ++--
 6 files changed, 39 insertions(+), 52 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 6c12234..99c4e6c 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -3544,7 +3544,9 @@ bool CApplication::PlayFile(const CFileItem& item, bool bRestart)
 #ifdef HAS_DVD_DRIVE
     // Display the Play Eject dialog
     if (CGUIDialogPlayEject::ShowAndGetInput(item))
-      return MEDIA_DETECT::CAutorun::PlayDiscAskResume(item.GetPath());
+      // PlayDiscAskResume takes path to disc. No parameter means default DVD drive.
+      // Can't do better as CGUIDialogPlayEject calls CMediaManager::IsDiscInDrive, which assumes default DVD drive anyway
+      return MEDIA_DETECT::CAutorun::PlayDiscAskResume(); 
 #endif
     return true;
   }
@@ -3640,9 +3642,9 @@ bool CApplication::PlayFile(const CFileItem& item, bool bRestart)
         options.starttime = 0.0f;
         CBookmark bookmark;
         CStdString path = item.GetPath();
-        if (item.IsDVD()) 
+        if (item.HasVideoInfoTag() && item.GetVideoInfoTag()->m_strFileNameAndPath.Find("removable://") == 0) 
           path = item.GetVideoInfoTag()->m_strFileNameAndPath;
-        if (item.HasProperty("original_listitem_url") && URIUtils::IsPlugin(item.GetProperty("original_listitem_url").asString()))
+        else if (item.HasProperty("original_listitem_url") && URIUtils::IsPlugin(item.GetProperty("original_listitem_url").asString()))
           path = item.GetProperty("original_listitem_url").asString();
         if(dbs.GetResumeBookMark(path, bookmark))
         {
diff --git a/xbmc/Autorun.cpp b/xbmc/Autorun.cpp
index f7ae918..8eef37e 100644
--- a/xbmc/Autorun.cpp
+++ b/xbmc/Autorun.cpp
@@ -69,7 +69,7 @@ void CAutorun::ExecuteAutorun( bool bypassSettings, bool ignoreplaying, bool sta
   g_application.ResetScreenSaver();
   g_application.WakeUpScreenSaverAndDPMS();  // turn off the screensaver if it's active
 
-  RunMedia(bypassSettings, startFromBeginning);
+  PlayDisc("", bypassSettings, startFromBeginning);
 }
 
 bool CAutorun::RunCdda()
@@ -90,42 +90,47 @@ bool CAutorun::RunCdda()
   return true;
 }
 
-void CAutorun::RunMedia(bool bypassSettings, bool startFromBeginning)
+bool CAutorun::PlayDisc(const CStdString& path, bool bypassSettings, bool startFromBeginning)
 {
   if ( !bypassSettings && !g_guiSettings.GetBool("audiocds.autorun") && !g_guiSettings.GetBool("dvds.autorun"))
-    return ;
+    return false;
 
   int nSize = g_playlistPlayer.GetPlaylist( PLAYLIST_MUSIC ).size();
   int nAddedToPlaylist = 0;
-#ifdef _WIN32
-  auto_ptr<IDirectory> pDir ( CFactoryDirectory::Create( g_mediaManager.TranslateDevicePath("") ));
-  bool bPlaying = RunDisc(pDir.get(), g_mediaManager.TranslateDevicePath(""), nAddedToPlaylist, true, bypassSettings, startFromBeginning);
-#else
-  CCdInfo* pInfo = g_mediaManager.GetCdInfo();
 
-  if ( pInfo == NULL )
-    return ;
+  CStdString mediaPath = path;
 
-  bool bPlaying;
-  if (pInfo->IsISOUDF(1) || pInfo->IsISOHFS(1) || pInfo->IsIso9660(1) || pInfo->IsIso9660Interactive(1))
-  {
-    auto_ptr<IDirectory> pDir ( CFactoryDirectory::Create( "iso9660://" ));
-    bPlaying = RunDisc(pDir.get(), "iso9660://", nAddedToPlaylist, true, bypassSettings, startFromBeginning);
-  }
-  else
+#ifdef _WIN32
+  if (mediaPath.IsEmpty())
+    mediaPath = g_mediaManager.TranslateDevicePath("");
+
+#else
+  if (mediaPath.IsEmpty())
   {
-    auto_ptr<IDirectory> pDir ( CFactoryDirectory::Create( "D:\\" ) );
-    bPlaying = RunDisc(pDir.get(), "D:\\", nAddedToPlaylist, true, bypassSettings, startFromBeginning);
+    CCdInfo* pInfo = g_mediaManager.GetCdInfo();
+    if ( pInfo == NULL )
+      return false;
+
+    if (pInfo->IsISOUDF(1) || pInfo->IsISOHFS(1) || pInfo->IsIso9660(1) || pInfo->IsIso9660Interactive(1))
+      mediaPath = "iso9660://";
+    else
+      mediaPath = "D:\\"; // Is this XBOX remnant??
   }
 #endif
+
+  auto_ptr<IDirectory> pDir ( CFactoryDirectory::Create( mediaPath ));
+  bool bPlaying = RunDisc(pDir.get(), mediaPath, nAddedToPlaylist, true, bypassSettings, startFromBeginning);
+
   if ( !bPlaying && nAddedToPlaylist > 0 )
   {
     CGUIMessage msg( GUI_MSG_PLAYLIST_CHANGED, 0, 0 );
     g_windowManager.SendMessage( msg );
     g_playlistPlayer.SetCurrentPlaylist(PLAYLIST_MUSIC);
     // Start playing the items we inserted
-    g_playlistPlayer.Play(nSize);
+    return g_playlistPlayer.Play(nSize);
   }
+
+  return bPlaying;
 }
 
 /**
@@ -389,27 +394,9 @@ bool CAutorun::IsEnabled() const
   return m_bEnable;
 }
 
-bool CAutorun::PlayDisc(const CStdString& path, bool startFromBeginning)
-{
-  int nSize = g_playlistPlayer.GetPlaylist( PLAYLIST_MUSIC ).size();
-  int nAddedToPlaylist = 0;
-  auto_ptr<IDirectory> pDir ( CFactoryDirectory::Create( path ));
-  bool bPlaying = RunDisc(pDir.get(), path, nAddedToPlaylist, true, true, startFromBeginning);
-  if ( !bPlaying && nAddedToPlaylist > 0 )
-  {
-    CGUIMessage msg( GUI_MSG_PLAYLIST_CHANGED, 0, 0 );
-    g_windowManager.SendMessage( msg );
-    g_playlistPlayer.SetCurrentPlaylist(PLAYLIST_MUSIC);
-    // Start playing the items we inserted
-    g_playlistPlayer.Play(nSize);
-	bPlaying = true;
-  }
-  return bPlaying;
-}
-
 bool CAutorun::PlayDiscAskResume(const CStdString& path)
 {
-  return PlayDisc(path, !CanResumePlayDVD(path) || CGUIDialogYesNo::ShowAndGetInput(341, -1, -1, -1, 13404, 12021));
+  return PlayDisc(path, true, !CanResumePlayDVD(path) || CGUIDialogYesNo::ShowAndGetInput(341, -1, -1, -1, 13404, 12021));
 }
 
 bool CAutorun::CanResumePlayDVD(const CStdString& path)
diff --git a/xbmc/Autorun.h b/xbmc/Autorun.h
index 7280d9d..693476e 100644
--- a/xbmc/Autorun.h
+++ b/xbmc/Autorun.h
@@ -48,8 +48,8 @@ class CAutorun
   CAutorun();
   virtual ~CAutorun();
   static bool CanResumePlayDVD(const CStdString& path);
-  static bool PlayDisc(const CStdString& path, bool startFromBeginning);
-  static bool PlayDiscAskResume(const CStdString& path);
+  static bool PlayDisc(const CStdString& path="", bool bypassSettings = false, bool startFromBeginning = false);
+  static bool PlayDiscAskResume(const CStdString& path="");
   bool IsEnabled() const;
   void Enable();
   void Disable();
@@ -57,7 +57,6 @@ class CAutorun
   static void ExecuteAutorun(bool bypassSettings = false, bool ignoreplaying = false, bool startFromBeginning = false);
 protected:
   static bool RunCdda();
-  static void RunMedia(bool bypassSettings, bool startFromBeginning);
   static bool RunDisc(XFILE::IDirectory* pDir, const CStdString& strDrive, int& nAddedToPlaylist, bool bRoot, bool bypassSettings, bool startFromBeginning);
   bool m_bEnable;
 };
diff --git a/xbmc/dialogs/GUIDialogContextMenu.cpp b/xbmc/dialogs/GUIDialogContextMenu.cpp
index 1d28a76..092591a 100644
--- a/xbmc/dialogs/GUIDialogContextMenu.cpp
+++ b/xbmc/dialogs/GUIDialogContextMenu.cpp
@@ -393,10 +393,10 @@ bool CGUIDialogContextMenu::OnContextButton(const CStdString &type, const CFileI
 
 #ifdef HAS_DVD_DRIVE
   case CONTEXT_BUTTON_PLAY_DISC:
-    return MEDIA_DETECT::CAutorun::PlayDisc(item->GetPath(), true); // restart
+    return MEDIA_DETECT::CAutorun::PlayDisc(item->GetPath(), true, true); // restart
 
   case CONTEXT_BUTTON_RESUME_DISC:
-    return MEDIA_DETECT::CAutorun::PlayDisc(item->GetPath(), false);// resume
+    return MEDIA_DETECT::CAutorun::PlayDisc(item->GetPath(), true, false); // resume
 
   case CONTEXT_BUTTON_EJECT_DISC:
 #ifdef _WIN32
diff --git a/xbmc/interfaces/Builtins.cpp b/xbmc/interfaces/Builtins.cpp
index 2b940d6..2667f69 100644
--- a/xbmc/interfaces/Builtins.cpp
+++ b/xbmc/interfaces/Builtins.cpp
@@ -941,7 +941,7 @@ int CBuiltins::Execute(const CStdString& execString)
     bool restart = false;
     if (params.size() > 0 && params[0].CompareNoCase("restart") == 0)
       restart = true;
-    CAutorun::PlayDisc(g_mediaManager.GetDiscPath(), restart);
+    CAutorun::PlayDisc(g_mediaManager.GetDiscPath(), true, restart);
 #endif
   }
   else if (execute.Equals("ripcd"))
diff --git a/xbmc/utils/SaveFileStateJob.h b/xbmc/utils/SaveFileStateJob.h
index 1504a74..534ef4b 100644
--- a/xbmc/utils/SaveFileStateJob.h
+++ b/xbmc/utils/SaveFileStateJob.h
@@ -24,13 +24,12 @@ class CSaveFileStateJob : public CJob
 bool CSaveFileStateJob::DoWork()
 {
   CStdString progressTrackingFile = m_item.GetPath();
-  if (m_item.HasProperty("original_listitem_url") && 
+  if (m_item.HasVideoInfoTag() && m_item.GetVideoInfoTag()->m_strFileNameAndPath.Find("removable://") == 0)
+    progressTrackingFile = m_item.GetVideoInfoTag()->m_strFileNameAndPath; // this variable contains removable:// suffixed by disc label+uniqueid or is empty if label not uniquely identified
+  else if (m_item.HasProperty("original_listitem_url") && 
       URIUtils::IsPlugin(m_item.GetProperty("original_listitem_url").asString()))
     progressTrackingFile = m_item.GetProperty("original_listitem_url").asString();
 
-  if (m_item.IsDVD()) 
-    progressTrackingFile = m_item.GetVideoInfoTag()->m_strFileNameAndPath; // this variable contains removable:// suffixed by disc label+uniqueid or is empty if label not uniquely identified
-
   if (progressTrackingFile != "")
   {
     if (m_item.IsVideo())
-- 
1.7.5.4

