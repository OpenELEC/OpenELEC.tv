From d33a276284356e974dcf14e6c86b74064fb0715f Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Sun, 10 Feb 2013 18:38:56 +0100
Subject: [PATCH 1/2] renderer: add buffering - get clock via IPlayer

---
 xbmc/cores/IPlayer.h                        |    2 ++
 xbmc/cores/VideoRenderers/RenderManager.cpp |    9 ++++++---
 xbmc/cores/VideoRenderers/RenderManager.h   |    3 +--
 xbmc/cores/dvdplayer/DVDPlayer.cpp          |    7 ++++++-
 xbmc/cores/dvdplayer/DVDPlayer.h            |    2 ++
 5 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/xbmc/cores/IPlayer.h b/xbmc/cores/IPlayer.h
index 5ed88d1..f136998 100644
--- a/xbmc/cores/IPlayer.h
+++ b/xbmc/cores/IPlayer.h
@@ -229,6 +229,8 @@ class IPlayer
    */
   virtual void GetSubtitleCapabilities(std::vector<int> &subCaps) { subCaps.assign(1,IPC_SUBS_ALL); };
 
+  virtual double GetClock(double& absolute, bool interpolated = true) {return 0; };
+
 protected:
   IPlayerCallback& m_callback;
 };
diff --git a/xbmc/cores/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoRenderers/RenderManager.cpp
index 9290f80..4664426 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoRenderers/RenderManager.cpp
@@ -325,7 +325,7 @@ void CXBMCRenderManager::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
   m_presentevent.Set();
 }
 
-unsigned int CXBMCRenderManager::PreInit(CDVDClock *pClock)
+unsigned int CXBMCRenderManager::PreInit()
 {
   CRetakeLock<CExclusiveLock> lock(m_sharedSection);
 
@@ -333,7 +333,6 @@ unsigned int CXBMCRenderManager::PreInit(CDVDClock *pClock)
   m_presenterr  = 0.0;
   m_errorindex  = 0;
   memset(m_errorbuff, 0, sizeof(m_errorbuff));
-  m_pClock = pClock;
 
   m_bIsStarted = false;
   m_bPauseDrawing = false;
@@ -1045,7 +1044,11 @@ void CXBMCRenderManager::PrepareNextRender()
   }
 
   double iClockSleep, iPlayingClock, iCurrentClock;
-  iPlayingClock = m_pClock->GetClock(iCurrentClock, false);
+  if (g_application.m_pPlayer)
+    iPlayingClock = g_application.m_pPlayer->GetClock(iCurrentClock, false);
+  else
+    iPlayingClock = iCurrentClock = 0;
+
   iClockSleep = m_renderBuffers[idx].pts - iPlayingClock;
 
   if (m_speed)
diff --git a/xbmc/cores/VideoRenderers/RenderManager.h b/xbmc/cores/VideoRenderers/RenderManager.h
index 6746957..b931f7d 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.h
+++ b/xbmc/cores/VideoRenderers/RenderManager.h
@@ -72,7 +72,7 @@ class CXBMCRenderManager
   int AddVideoPicture(DVDVideoPicture& picture);
 
   void FlipPage(volatile bool& bStop, double timestamp = 0.0, int source = -1, EFIELDSYNC sync = FS_NONE, int speed = 0);
-  unsigned int PreInit(CDVDClock *pClock);
+  unsigned int PreInit();
   void UnInit();
   bool Flush();
 
@@ -225,7 +225,6 @@ class CXBMCRenderManager
   int        m_presentsource;
   CEvent     m_presentevent;
   CEvent     m_flushEvent;
-  CDVDClock  *m_pClock;
 
 
   OVERLAY::CRenderer m_overlays;
diff --git a/xbmc/cores/dvdplayer/DVDPlayer.cpp b/xbmc/cores/dvdplayer/DVDPlayer.cpp
index 9e6e470..d0c7cd2 100644
--- a/xbmc/cores/dvdplayer/DVDPlayer.cpp
+++ b/xbmc/cores/dvdplayer/DVDPlayer.cpp
@@ -463,7 +463,7 @@ bool CDVDPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options)
     m_ready.Reset();
 
 #if defined(HAS_VIDEO_PLAYBACK)
-    g_renderManager.PreInit(&m_clock);
+    g_renderManager.PreInit();
 #endif
 
     Create();
@@ -4129,3 +4129,8 @@ bool CDVDPlayer::CachePVRStream(void) const
       !g_PVRManager.IsPlayingRecording() &&
       g_advancedSettings.m_bPVRCacheInDvdPlayer;
 }
+
+double CDVDPlayer::GetClock(double& absolute, bool interpolated)
+{
+  return m_clock.GetClock(absolute, interpolated);
+}
diff --git a/xbmc/cores/dvdplayer/DVDPlayer.h b/xbmc/cores/dvdplayer/DVDPlayer.h
index 35bf762..ab73950 100644
--- a/xbmc/cores/dvdplayer/DVDPlayer.h
+++ b/xbmc/cores/dvdplayer/DVDPlayer.h
@@ -254,6 +254,8 @@ class CDVDPlayer : public IPlayer, public CThread, public IDVDPlayer
   virtual bool SwitchChannel(const PVR::CPVRChannel &channel);
   virtual bool CachePVRStream(void) const;
 
+  virtual double GetClock(double& absolute, bool interpolated = true);
+
   enum ECacheState
   { CACHESTATE_DONE = 0
   , CACHESTATE_FULL     // player is filling up the demux queue
-- 
1.7.10


From 0aff5cdc544caa87fe5e314e5624c07a160ffe61 Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Sun, 10 Feb 2013 18:40:30 +0100
Subject: [PATCH 2/2] OMXPlayer: adopt to buffering in renderer

---
 xbmc/cores/omxplayer/OMXPlayer.cpp      |    5 +++++
 xbmc/cores/omxplayer/OMXPlayer.h        |    2 ++
 xbmc/cores/omxplayer/OMXPlayerVideo.cpp |   17 +++++++++++++----
 3 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/xbmc/cores/omxplayer/OMXPlayer.cpp b/xbmc/cores/omxplayer/OMXPlayer.cpp
index 60aa9ab..1acb9e2 100644
--- a/xbmc/cores/omxplayer/OMXPlayer.cpp
+++ b/xbmc/cores/omxplayer/OMXPlayer.cpp
@@ -4210,4 +4210,9 @@ void COMXPlayer::GetSubtitleCapabilities(std::vector<int> &subCaps)
   subCaps.push_back(IPC_SUBS_ALL);
 }
 
+double COMXPlayer::GetClock(double& absolute, bool interpolated)
+{
+  return m_av_clock.GetClock(absolute, interpolated);
+}
+
 #endif
diff --git a/xbmc/cores/omxplayer/OMXPlayer.h b/xbmc/cores/omxplayer/OMXPlayer.h
index ca824c2..57fc7a0 100644
--- a/xbmc/cores/omxplayer/OMXPlayer.h
+++ b/xbmc/cores/omxplayer/OMXPlayer.h
@@ -332,6 +332,8 @@ class COMXPlayer : public IPlayer, public CThread, public IDVDPlayer
   virtual void  GetScalingMethods(std::vector<int> &scalingMethods);
   virtual void  GetAudioCapabilities(std::vector<int> &audioCaps);
   virtual void  GetSubtitleCapabilities(std::vector<int> &subCaps);
+
+  virtual double GetClock(double& absolute, bool interpolated = true);
 protected:
   friend class COMXSelectionStreams;
 
diff --git a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
index 5f3f050..e8ff1aa 100644
--- a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
+++ b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
@@ -452,13 +452,22 @@ void OMXPlayerVideo::Output(int iGroupId, double pts, bool bDropPacket)
   m_dropbase = 0.0f;
 #endif
 
-  double pts_media = m_av_clock->OMXMediaTime(false, false);
-  ProcessOverlays(iGroupId, pts_media);
-
   if (!CThread::m_bStop && m_av_clock->GetAbsoluteClock(false) < (iCurrentClock + iSleepTime + DVD_MSEC_TO_TIME(500)) )
     return;
 
-  g_renderManager.FlipPage(CThread::m_bStop, (iCurrentClock + iSleepTime) / DVD_TIME_BASE, -1, FS_NONE);
+  int buffer = g_renderManager.WaitForBuffer(m_bStop);
+  while (buffer < 0 && !CThread::m_bStop)
+  {
+    Sleep(1);
+    buffer = g_renderManager.WaitForBuffer(m_bStop);
+  }
+  if (buffer < 0)
+    return;
+
+  double pts_media = m_av_clock->OMXMediaTime(false, false);
+  ProcessOverlays(iGroupId, pts_media);
+
+  g_renderManager.FlipPage(CThread::m_bStop, pts, -1, FS_NONE, m_speed);
 
   //m_av_clock->WaitAbsoluteClock((iCurrentClock + iSleepTime));
 }
-- 
1.7.10

