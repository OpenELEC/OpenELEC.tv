From bc4a2f53976c71c403b91ab1aa6138f966a90480 Mon Sep 17 00:00:00 2001
From: unknown <fernetmenta@online.de>
Date: Fri, 18 Jan 2013 15:16:38 +0100
Subject: [PATCH 1/7] multi-screen: fix compilation on windows

---
 xbmc/settings/GUIWindowSettingsCategory.cpp |   11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/xbmc/settings/GUIWindowSettingsCategory.cpp b/xbmc/settings/GUIWindowSettingsCategory.cpp
index cacb32a..cbf0acb 100644
--- a/xbmc/settings/GUIWindowSettingsCategory.cpp
+++ b/xbmc/settings/GUIWindowSettingsCategory.cpp
@@ -528,12 +528,14 @@ void CGUIWindowSettingsCategory::CreateSettings()
       FillInRefreshRates(strSetting, g_guiSettings.GetResolution(), false);
       continue;
     }
+#if defined(HAS_GLX)
     else if (strSetting.Equals("videoscreen.monitor"))
     {
       AddSetting(pSetting, group->GetWidth(), iControlID);
       FillInMonitors(strSetting);
       continue;
     }
+#endif
     else if (strSetting.Equals("lookandfeel.skintheme"))
     {
       AddSetting(pSetting, group->GetWidth(), iControlID);
@@ -1483,6 +1485,7 @@ void CGUIWindowSettingsCategory::OnSettingChanged(BaseSettingControlPtr pSetting
     // Cascade
     FillInResolutions("videoscreen.resolution", mode, RES_DESKTOP, true);
   }
+#if defined(HAS_GLX)
   else if (strSetting.Equals("videoscreen.monitor"))
   {
     CSettingString *pSettingString = (CSettingString *)pSettingControl->GetSetting();
@@ -1497,6 +1500,7 @@ void CGUIWindowSettingsCategory::OnSettingChanged(BaseSettingControlPtr pSetting
       FillInResolutions("videoscreen.resolution", mode, RES_DESKTOP, true);
     }
   }
+#endif
   else if (strSetting.Equals("videoscreen.resolution"))
   {
     RESOLUTION nextRes = (RESOLUTION) g_guiSettings.GetInt("videoscreen.resolution");
@@ -2451,6 +2455,7 @@ DisplayMode CGUIWindowSettingsCategory::FillInScreens(CStdString strSetting, RES
 
 void CGUIWindowSettingsCategory::FillInMonitors(CStdString strSetting)
 {
+#if defined(HAS_GLX)
   // we expect "videoscreen.monitor" but it might be hidden on some platforms,
   // so check that we actually have a visable control.
   BaseSettingControlPtr control = GetSetting(strSetting);
@@ -2476,6 +2481,7 @@ void CGUIWindowSettingsCategory::FillInMonitors(CStdString strSetting)
     pControl->SetValue(currentMonitor);
     g_guiSettings.SetString("videoscreen.monitor", g_settings.m_ResInfo[RES_DESKTOP].strOutput);
   }
+#endif
 }
 
 
@@ -2607,7 +2613,10 @@ void CGUIWindowSettingsCategory::OnRefreshRateChanged(RESOLUTION nextRes)
   RESOLUTION lastRes = g_graphicsContext.GetVideoResolution();
   bool cancelled = false;
 
-  bool outputChanged = !g_Windowing.IsCurrentOutput(g_guiSettings.GetString("videoscreen.monitor"));
+  bool outputChanged = true;
+#if defined(HAS_GLX)
+  outputChanged = !g_Windowing.IsCurrentOutput(g_guiSettings.GetString("videoscreen.monitor"));
+#endif
 
   g_guiSettings.SetResolution(nextRes);
   g_graphicsContext.SetVideoResolution(nextRes, outputChanged);
-- 
1.7.10


From 3724a6e137d00f92b5eb4e419883ae239f0562f8 Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Fri, 22 Feb 2013 09:57:17 +0100
Subject: [PATCH 2/7] buffering back ports

---
 xbmc/cores/IPlayer.h                          |    5 ++
 xbmc/cores/VideoRenderers/BaseRenderer.h      |    7 ++-
 xbmc/cores/VideoRenderers/LinuxRendererGL.h   |    6 +-
 xbmc/cores/VideoRenderers/OverlayRenderer.cpp |   17 +++---
 xbmc/cores/VideoRenderers/OverlayRenderer.h   |    8 +--
 xbmc/cores/VideoRenderers/RenderManager.cpp   |   64 +++++++++++++---------
 xbmc/cores/VideoRenderers/RenderManager.h     |   73 ++++++++++++++++++++++---
 xbmc/cores/dvdplayer/DVDPlayer.cpp            |    7 ++-
 xbmc/cores/dvdplayer/DVDPlayer.h              |    2 +
 xbmc/cores/dvdplayer/DVDPlayerVideo.cpp       |   18 +++++-
 10 files changed, 150 insertions(+), 57 deletions(-)

diff --git a/xbmc/cores/IPlayer.h b/xbmc/cores/IPlayer.h
index f2aa227..cbf2faa 100644
--- a/xbmc/cores/IPlayer.h
+++ b/xbmc/cores/IPlayer.h
@@ -229,6 +229,11 @@ class IPlayer
    */
   virtual void GetSubtitleCapabilities(std::vector<int> &subCaps) { subCaps.assign(1,IPC_SUBS_ALL); };
 
+  /*!
+   \brief called by RenderManager in order to schedule frames
+   */
+  virtual double GetClock(double& absolute, bool interpolated = true) {return 0; };
+
 protected:
   IPlayerCallback& m_callback;
 };
diff --git a/xbmc/cores/VideoRenderers/BaseRenderer.h b/xbmc/cores/VideoRenderers/BaseRenderer.h
index b02d536..60b7197 100644
--- a/xbmc/cores/VideoRenderers/BaseRenderer.h
+++ b/xbmc/cores/VideoRenderers/BaseRenderer.h
@@ -26,10 +26,11 @@
 
 #define MAX_PLANES 3
 #define MAX_FIELDS 3
+#define NUM_BUFFERS 10
 
 typedef struct YV12Image
 {
-  BYTE *   plane[MAX_PLANES];
+  uint8_t* plane[MAX_PLANES];
   int      planesize[MAX_PLANES];
   unsigned stride[MAX_PLANES];
   unsigned width;
@@ -84,8 +85,8 @@ class CBaseRenderer
   virtual void Flush() {};
 
   virtual unsigned int GetProcessorSize() { return 0; }
-  virtual unsigned int GetMaxProcessorSize() { return 0; }
-  virtual void SetProcessorSize(int numBuffers) { }
+  virtual unsigned int GetMaxBufferSize() { return 0; }
+  virtual void SetBufferSize(int numBuffers) { }
   virtual void ReleaseBuffer(int idx) { }
 
   virtual bool Supports(ERENDERFEATURE feature) { return false; }
diff --git a/xbmc/cores/VideoRenderers/LinuxRendererGL.h b/xbmc/cores/VideoRenderers/LinuxRendererGL.h
index e76624b..a189892 100644
--- a/xbmc/cores/VideoRenderers/LinuxRendererGL.h
+++ b/xbmc/cores/VideoRenderers/LinuxRendererGL.h
@@ -46,8 +46,6 @@
 namespace XVBA    { class CXvbaRenderPicture; }
 
 
-#define NUM_BUFFERS 10
-
 #undef ALIGN
 #define ALIGN(value, alignment) (((value)+((alignment)-1))&~((alignment)-1))
 #define CLAMP(a, min, max) ((a) > (max) ? (max) : ( (a) < (min) ? (min) : a ))
@@ -141,8 +139,8 @@ class CLinuxRendererGL : public CBaseRenderer
   virtual void         Reset(); /* resets renderer after seek for example */
   virtual void         Flush();
   virtual void         ReleaseBuffer(int idx);
-  virtual void         SetProcessorSize(int numBuffers) { m_NumYV12Buffers = numBuffers; }
-  virtual unsigned int GetMaxProcessorSize() { return NUM_BUFFERS; }
+  virtual void         SetBufferSize(int numBuffers) { m_NumYV12Buffers = numBuffers; }
+  virtual unsigned int GetMaxBufferSize() { return NUM_BUFFERS; }
   virtual unsigned int GetProcessorSize() { return m_NumYV12Buffers; }
 
 #ifdef HAVE_LIBVDPAU
diff --git a/xbmc/cores/VideoRenderers/OverlayRenderer.cpp b/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
index 94aaaf5..5236390 100644
--- a/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
+++ b/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
@@ -93,24 +93,28 @@ long COverlayMainThread::Release()
 
 CRenderer::~CRenderer()
 {
-  for(int i = 0; i < 2; i++)
+  for(int i = 0; i < NUM_BUFFERS; i++)
     Release(m_buffers[i]);
 }
 
-void CRenderer::AddOverlay(CDVDOverlay* o, double pts)
+void CRenderer::AddOverlay(CDVDOverlay* o, double pts, int index)
 {
   CSingleLock lock(m_section);
 
+  m_decode = index;
+
   SElement   e;
   e.pts = pts;
   e.overlay_dvd = o->Acquire();
   m_buffers[m_decode].push_back(e);
 }
 
-void CRenderer::AddOverlay(COverlay* o, double pts)
+void CRenderer::AddOverlay(COverlay* o, double pts, int index)
 {
   CSingleLock lock(m_section);
 
+  m_decode = index;
+
   SElement   e;
   e.pts = pts;
   e.overlay = o->Acquire();
@@ -163,13 +167,6 @@ void CRenderer::Flip()
   m_render = (m_render + 1) % m_iNumBuffers;
 }
 
-void CRenderer::SetBuffer(int idx)
-{
-  CSingleLock lock(m_section);
-  Release(m_buffers[idx]);
-  m_decode = idx;
-}
-
 void CRenderer::ReleaseBuffer(int idx)
 {
   CSingleLock lock(m_section);
diff --git a/xbmc/cores/VideoRenderers/OverlayRenderer.h b/xbmc/cores/VideoRenderers/OverlayRenderer.h
index c6740a5..66c592a 100644
--- a/xbmc/cores/VideoRenderers/OverlayRenderer.h
+++ b/xbmc/cores/VideoRenderers/OverlayRenderer.h
@@ -23,6 +23,7 @@
 #pragma once
 
 #include "threads/CriticalSection.h"
+#include "BaseRenderer.h"
 
 #include <vector>
 
@@ -92,14 +93,13 @@
      CRenderer();
     ~CRenderer();
 
-    void AddOverlay(CDVDOverlay* o, double pts);
-    void AddOverlay(COverlay*    o, double pts);
+    void AddOverlay(CDVDOverlay* o, double pts, int index);
+    void AddOverlay(COverlay*    o, double pts, int index);
     void AddCleanup(COverlay*    o);
     void Flip();
     void Render();
     void Flush();
     void SetNumBuffers(int numBuffers) { m_iNumBuffers = numBuffers; }
-    void SetBuffer(int idx);
     void ReleaseBuffer(int idx);
 
   protected:
@@ -127,7 +127,7 @@
     void      Release(SElementV& list);
 
     CCriticalSection m_section;
-    SElementV        m_buffers[10];
+    SElementV        m_buffers[NUM_BUFFERS];
     int              m_iNumBuffers;
     int              m_decode;
     int              m_render;
diff --git a/xbmc/cores/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoRenderers/RenderManager.cpp
index 9290f80..ca454eb 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoRenderers/RenderManager.cpp
@@ -228,7 +228,7 @@ CStdString CXBMCRenderManager::GetVSyncState()
   return state;
 }
 
-bool CXBMCRenderManager::Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, float fps, unsigned flags, ERenderFormat format, unsigned extended_format, unsigned int orientation)
+bool CXBMCRenderManager::Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, float fps, unsigned flags, ERenderFormat format, unsigned extended_format, unsigned int orientation, bool buffering)
 {
   /* make sure any queued frame was fully presented */
   double timeout = m_presenttime + 0.1;
@@ -248,12 +248,8 @@ bool CXBMCRenderManager::Configure(unsigned int width, unsigned int height, unsi
     return false;
   }
 
-  // check if decoder supports buffering
-  m_bCodecSupportsBuffering = false;
-  if (format == RENDER_FMT_VDPAU
-     || format == RENDER_FMT_VDPAU_420
-     || format == RENDER_FMT_XVBA)
-    m_bCodecSupportsBuffering = true;
+  // set buffering
+  m_bCodecSupportsBuffering = buffering;
 
   bool result = m_pRenderer->Configure(width, height, d_width, d_height, fps, flags, format, extended_format, orientation);
   if(result)
@@ -325,7 +321,7 @@ void CXBMCRenderManager::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
   m_presentevent.Set();
 }
 
-unsigned int CXBMCRenderManager::PreInit(CDVDClock *pClock)
+unsigned int CXBMCRenderManager::PreInit()
 {
   CRetakeLock<CExclusiveLock> lock(m_sharedSection);
 
@@ -333,7 +329,6 @@ unsigned int CXBMCRenderManager::PreInit(CDVDClock *pClock)
   m_presenterr  = 0.0;
   m_errorindex  = 0;
   memset(m_errorbuff, 0, sizeof(m_errorbuff));
-  m_pClock = pClock;
 
   m_bIsStarted = false;
   m_bPauseDrawing = false;
@@ -617,10 +612,12 @@ void CXBMCRenderManager::FlipPage(volatile bool& bStop, double timestamp /* = 0L
       }
     }
 
-    FlipFreeBuffer();
-    m_renderBuffers[m_iOutputRenderBuffer].pts = timestamp;
-    m_renderBuffers[m_iOutputRenderBuffer].presentfield = presentfield;
-    m_renderBuffers[m_iOutputRenderBuffer].presentmethod = presentmethod;
+    if (FlipFreeBuffer() >= 0)
+    {
+      m_renderBuffers[m_iOutputRenderBuffer].pts = timestamp;
+      m_renderBuffers[m_iOutputRenderBuffer].presentfield = presentfield;
+      m_renderBuffers[m_iOutputRenderBuffer].presentmethod = presentmethod;
+    }
     m_speed = speed;
   }
 
@@ -880,9 +877,17 @@ int CXBMCRenderManager::AddVideoPicture(DVDVideoPicture& pic)
 #endif
   m_pRenderer->ReleaseImage(index, false);
 
+  m_bRenderBufferUsed = true;
   return index;
 }
 
+void CXBMCRenderManager::AddOverlay(CDVDOverlay* o, double pts)
+{
+  CSharedLock lock(m_sharedSection);
+  m_overlays.AddOverlay(o, pts, (m_iOutputRenderBuffer + 1) % m_iNumRenderBuffers);
+  m_bRenderBufferUsed = true;
+}
+
 bool CXBMCRenderManager::Supports(ERENDERFEATURE feature)
 {
   CSharedLock lock(m_sharedSection);
@@ -939,31 +944,28 @@ EINTERLACEMETHOD CXBMCRenderManager::AutoInterlaceMethodInternal(EINTERLACEMETHO
   return mInt;
 }
 
-int CXBMCRenderManager::WaitForBuffer(volatile bool& bStop)
+int CXBMCRenderManager::WaitForBuffer(volatile bool& bStop, int timeout)
 {
   CSharedLock lock(m_sharedSection);
   if (!m_pRenderer)
     return -1;
 
   //wait up to a second as this is our slowest allowed output rate
-  double timeout = GetPresentTime() + 0.1;
+  double maxwait = GetPresentTime() + (float)timeout/1000;
   while(!HasFreeBuffer() && !bStop)
   {
     lock.Leave();
-    m_flipEvent.WaitMSec(50);
-    if(GetPresentTime() > timeout && !bStop)
+    m_flipEvent.WaitMSec(std::min(50, timeout));
+    if(GetPresentTime() > maxwait && !bStop)
     {
-      CLog::Log(LOGWARNING, "CRenderManager::WaitForBuffer - timeout waiting for buffer");
+      if (timeout != 0)
+        CLog::Log(LOGWARNING, "CRenderManager::WaitForBuffer - timeout waiting for buffer");
       return -1;
     }
     lock.Enter();
   }
   lock.Leave();
 
-  { CRetakeLock<CExclusiveLock> lock(m_sharedSection);
-    m_overlays.SetBuffer((m_iOutputRenderBuffer + 1) % m_iNumRenderBuffers);
-  }
-
   if (bStop)
     return -1;
 
@@ -987,10 +989,17 @@ int CXBMCRenderManager::FlipFreeBuffer()
   // See "Render Buffer State Description" in header for information.
   if (HasFreeBuffer())
   {
+    if (!m_bRenderBufferUsed)
+    {
+      return -1;
+    }
+    m_bRenderBufferUsed = false;
     m_bAllRenderBuffersDisplayed = false;
     m_iOutputRenderBuffer = (m_iOutputRenderBuffer + 1) % m_iNumRenderBuffers;
     return m_iOutputRenderBuffer;
   }
+  else
+    return -1;
 }
 
 bool CXBMCRenderManager::HasFreeBuffer()
@@ -1013,7 +1022,7 @@ bool CXBMCRenderManager::HasFreeBuffer()
 
 void CXBMCRenderManager::ResetRenderBuffer()
 {
-  m_iNumRenderBuffers = m_pRenderer->GetMaxProcessorSize();
+  m_iNumRenderBuffers = m_pRenderer->GetMaxBufferSize();
   m_iNumRenderBuffers = std::min(5, m_iNumRenderBuffers);
   m_iNumRenderBuffers = std::max(2, m_iNumRenderBuffers);
 
@@ -1022,7 +1031,7 @@ void CXBMCRenderManager::ResetRenderBuffer()
 
   CLog::Log(LOGNOTICE,"CXBMCRenderManager::ResetRenderBuffer - using %d render buffers", m_iNumRenderBuffers);
   m_overlays.SetNumBuffers(m_iNumRenderBuffers);
-  m_pRenderer->SetProcessorSize(m_iNumRenderBuffers);
+  m_pRenderer->SetBufferSize(m_iNumRenderBuffers);
 
   m_iCurrentRenderBuffer = 0;
   m_iOutputRenderBuffer = 0;
@@ -1031,6 +1040,7 @@ void CXBMCRenderManager::ResetRenderBuffer()
   m_sleeptime = 1.0;
   m_presentPts = DVD_NOPTS_VALUE;
   m_speed = 0;
+  m_bRenderBufferUsed = false;
 }
 
 void CXBMCRenderManager::PrepareNextRender()
@@ -1045,7 +1055,11 @@ void CXBMCRenderManager::PrepareNextRender()
   }
 
   double iClockSleep, iPlayingClock, iCurrentClock;
-  iPlayingClock = m_pClock->GetClock(iCurrentClock, false);
+  if (g_application.m_pPlayer)
+    iPlayingClock = g_application.m_pPlayer->GetClock(iCurrentClock, false);
+  else
+    iPlayingClock = iCurrentClock = 0;
+
   iClockSleep = m_renderBuffers[idx].pts - iPlayingClock;
 
   if (m_speed)
diff --git a/xbmc/cores/VideoRenderers/RenderManager.h b/xbmc/cores/VideoRenderers/RenderManager.h
index 6746957..1a460c7 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.h
+++ b/xbmc/cores/VideoRenderers/RenderManager.h
@@ -66,21 +66,44 @@ class CXBMCRenderManager
   void SetViewMode(int iViewMode);
 
   // Functions called from mplayer
-  bool Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, float fps, unsigned flags, ERenderFormat format, unsigned extended_format,  unsigned int orientation);
+  /**
+   * Called by video player to configure renderer
+   * @param width width of decoded frame
+   * @param height height of decoded frame
+   * @param d_width displayed width of frame (aspect ratio)
+   * @param d_height displayed height of frame
+   * @param fps frames per second of video
+   * @param flags see RenderFlags.h
+   * @param format see RenderFormats.h
+   * @param extended_format used by DXVA
+   * @param orientation
+   * @param buffering enable buffering in renderer, defaults to false
+   */
+  bool Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, float fps, unsigned flags, ERenderFormat format, unsigned extended_format,  unsigned int orientation, bool buffering = false);
   bool IsConfigured();
 
   int AddVideoPicture(DVDVideoPicture& picture);
 
+  /**
+   * Called by video player to flip render buffers
+   * If buffering is enabled this method does not block. In case of disabled buffering
+   * this method blocks waiting for the render thread to pass by.
+   * When buffering is used there might be no free buffer available after the call to
+   * this method. Player has to call WaitForBuffer. A free buffer will become
+   * available after the main thread has flipped front / back buffers.
+   *
+   * @param bStop reference to stop flag of calling thread
+   * @param timestamp pts of frame delivered with AddVideoPicture
+   * @param source depreciated
+   * @param sync signals frame, top, or bottom field
+   * @param speed current speed of player, needed to calculate presenttime when buffering is avtive
+   */
   void FlipPage(volatile bool& bStop, double timestamp = 0.0, int source = -1, EFIELDSYNC sync = FS_NONE, int speed = 0);
-  unsigned int PreInit(CDVDClock *pClock);
+  unsigned int PreInit();
   void UnInit();
   bool Flush();
 
-  void AddOverlay(CDVDOverlay* o, double pts)
-  {
-    CSharedLock lock(m_sharedSection);
-    m_overlays.AddOverlay(o, pts);
-  }
+  void AddOverlay(CDVDOverlay* o, double pts);
 
   void AddCleanup(OVERLAY::COverlay* o)
   {
@@ -132,11 +155,43 @@ class CXBMCRenderManager
   CSharedSection& GetSection() { return m_sharedSection; };
 
   void RegisterRenderUpdateCallBack(const void *ctx, RenderUpdateCallBackFn fn);
-  int WaitForBuffer(volatile bool& bStop);
+
+  /**
+   * If player uses buffering it has to wait for a buffer before it calls
+   * AddVideoPicture and AddOverlay. It waits for max 50 ms before it returns -1
+   * in case no buffer is available. Player may call this in a loop and decides
+   * by itself when it wants to drop a frame.
+   * If no buffering is requested in Configure, player does not need to call this,
+   * because FlipPage will block.
+   */
+  int WaitForBuffer(volatile bool& bStop, int timeout = 100);
+
+  /**
+   * Called by application right after flip. The buffer which has been rendered to
+   * display becomes available for player to deliver a new frame.
+   */
   void NotifyDisplayFlip();
+
+  /**
+   * Can be called by player for lateness detection. This is done best by
+   * looking at the end of the queue.
+   */
   bool GetStats(double &sleeptime, double &pts, int &bufferLevel);
+
+  /**
+   * Called by application (main thread) to query if there is any frame to render
+   */
   bool HasFrame();
+
+  /**
+   * Video player can dynamically enable/disable buffering. In situations like
+   * rewind buffering is not ideal.
+   */
   void EnableBuffering(bool enable);
+
+  /**
+   * Video player call this on flush in oder to discard any queued frames
+   */
   void DiscardBuffer();
 
 protected:
@@ -202,6 +257,7 @@ class CXBMCRenderManager
   bool m_bUseBuffering;
   bool m_bCodecSupportsBuffering;
   int m_speed;
+  bool m_bRenderBufferUsed;
   CEvent m_flipEvent;
 
   struct
@@ -225,7 +281,6 @@ class CXBMCRenderManager
   int        m_presentsource;
   CEvent     m_presentevent;
   CEvent     m_flushEvent;
-  CDVDClock  *m_pClock;
 
 
   OVERLAY::CRenderer m_overlays;
diff --git a/xbmc/cores/dvdplayer/DVDPlayer.cpp b/xbmc/cores/dvdplayer/DVDPlayer.cpp
index 07df0d8..18fae70 100644
--- a/xbmc/cores/dvdplayer/DVDPlayer.cpp
+++ b/xbmc/cores/dvdplayer/DVDPlayer.cpp
@@ -463,7 +463,7 @@ bool CDVDPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options)
     m_ready.Reset();
 
 #if defined(HAS_VIDEO_PLAYBACK)
-    g_renderManager.PreInit(&m_clock);
+    g_renderManager.PreInit();
 #endif
 
     Create();
@@ -4097,3 +4097,8 @@ bool CDVDPlayer::CachePVRStream(void) const
       !g_PVRManager.IsPlayingRecording() &&
       g_advancedSettings.m_bPVRCacheInDvdPlayer;
 }
+
+double CDVDPlayer::GetClock(double& absolute, bool interpolated)
+{
+  return m_clock.GetClock(absolute, interpolated);
+}
diff --git a/xbmc/cores/dvdplayer/DVDPlayer.h b/xbmc/cores/dvdplayer/DVDPlayer.h
index 70ecea9..2b67d4c 100644
--- a/xbmc/cores/dvdplayer/DVDPlayer.h
+++ b/xbmc/cores/dvdplayer/DVDPlayer.h
@@ -252,6 +252,8 @@ class CDVDPlayer : public IPlayer, public CThread, public IDVDPlayer
   virtual bool SwitchChannel(const PVR::CPVRChannel &channel);
   virtual bool CachePVRStream(void) const;
 
+  virtual double GetClock(double& absolute, bool interpolated = true);
+
   enum ECacheState
   { CACHESTATE_DONE = 0
   , CACHESTATE_FULL     // player is filling up the demux queue
diff --git a/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp b/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp
index d26ab9c..19ba35d 100644
--- a/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp
+++ b/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp
@@ -1117,53 +1117,69 @@ int CDVDPlayerVideo::OutputPicture(const DVDVideoPicture* src, double pts)
     }
 
     CStdString formatstr;
+    bool buffering;
 
     switch(pPicture->format)
     {
       case RENDER_FMT_YUV420P:
         formatstr = "YV12";
+        buffering = true;
         break;
       case RENDER_FMT_YUV420P16:
         formatstr = "YV12P16";
+        buffering = true;
         break;
       case RENDER_FMT_YUV420P10:
         formatstr = "YV12P10";
+        buffering = true;
         break;
       case RENDER_FMT_NV12:
         formatstr = "NV12";
+        buffering = true;
         break;
       case RENDER_FMT_UYVY422:
         formatstr = "UYVY";
+        buffering = true;
         break;
       case RENDER_FMT_YUYV422:
         formatstr = "YUY2";
+        buffering = true;
         break;
       case RENDER_FMT_VDPAU:
         formatstr = "VDPAU";
+        buffering = true;
         break;
       case RENDER_FMT_VDPAU_420:
         formatstr = "VDPAU_420";
+        buffering = true;
         break;
       case RENDER_FMT_DXVA:
         formatstr = "DXVA";
+        buffering = true;
         break;
       case RENDER_FMT_VAAPI:
         formatstr = "VAAPI";
+        buffering = false;
         break;
       case RENDER_FMT_OMXEGL:
         formatstr = "OMXEGL";
+        buffering = false;
         break;
       case RENDER_FMT_CVBREF:
         formatstr = "BGRA";
+        buffering = false;
         break;
       case RENDER_FMT_BYPASS:
         formatstr = "BYPASS";
+        buffering = false;
         break;
       case RENDER_FMT_NONE:
         formatstr = "NONE";
+        buffering = false;
         break;
       case RENDER_FMT_XVBA:
         formatstr = "XVBA";
+        buffering = true;
         break;
     }
 
@@ -1174,7 +1190,7 @@ int CDVDPlayerVideo::OutputPicture(const DVDVideoPicture* src, double pts)
     }
 
     CLog::Log(LOGDEBUG,"%s - change configuration. %dx%d. framerate: %4.2f. format: %s",__FUNCTION__,pPicture->iWidth, pPicture->iHeight, config_framerate, formatstr.c_str());
-    if(!g_renderManager.Configure(pPicture->iWidth, pPicture->iHeight, pPicture->iDisplayWidth, pPicture->iDisplayHeight, config_framerate, flags, pPicture->format, pPicture->extended_format, m_hints.orientation))
+    if(!g_renderManager.Configure(pPicture->iWidth, pPicture->iHeight, pPicture->iDisplayWidth, pPicture->iDisplayHeight, config_framerate, flags, pPicture->format, pPicture->extended_format, m_hints.orientation, buffering))
     {
       CLog::Log(LOGERROR, "%s - failed to configure renderer", __FUNCTION__);
       return EOS_ABORT;
-- 
1.7.10


From 1cfeec2846a58b7e2ad44471bb085cef9d2c687d Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Sat, 16 Feb 2013 08:32:18 +0100
Subject: [PATCH 3/7] add buffering for GLES

---
 xbmc/cores/VideoRenderers/LinuxRendererGLES.cpp |   10 ----------
 xbmc/cores/VideoRenderers/LinuxRendererGLES.h   |    6 ++++--
 2 files changed, 4 insertions(+), 12 deletions(-)

diff --git a/xbmc/cores/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoRenderers/LinuxRendererGLES.cpp
index 2a59e2b..1bf2f3b 100644
--- a/xbmc/cores/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoRenderers/LinuxRendererGLES.cpp
@@ -135,13 +135,6 @@
   delete m_dllSwScale;
 }
 
-void CLinuxRendererGLES::ManageTextures()
-{
-  m_NumYV12Buffers = 2;
-  //m_iYV12RenderBuffer = 0;
-  return;
-}
-
 bool CLinuxRendererGLES::ValidateRenderTarget()
 {
   if (!m_bValidated)
@@ -395,7 +388,6 @@ void CLinuxRendererGLES::Update(bool bPauseDrawing)
 {
   if (!m_bConfigured) return;
   ManageDisplay();
-  ManageTextures();
 }
 
 void CLinuxRendererGLES::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
@@ -409,7 +401,6 @@ void CLinuxRendererGLES::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
   if (m_renderMethod & RENDER_BYPASS)
   {
     ManageDisplay();
-    ManageTextures();
     // if running bypass, then the player might need the src/dst rects
     // for sizing video playback on a layer other than the gles layer.
     if (m_RenderUpdateCallBackFn)
@@ -449,7 +440,6 @@ void CLinuxRendererGLES::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
     return;
 
   ManageDisplay();
-  ManageTextures();
 
   g_graphicsContext.BeginPaint();
 
diff --git a/xbmc/cores/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoRenderers/LinuxRendererGLES.h
index c6b69db..5bae10d 100644
--- a/xbmc/cores/VideoRenderers/LinuxRendererGLES.h
+++ b/xbmc/cores/VideoRenderers/LinuxRendererGLES.h
@@ -41,7 +41,7 @@
 class COpenMaxVideo;
 typedef std::vector<int>     Features;
 
-#define NUM_BUFFERS 3
+#define NUM_BUFFERS 10
 
 
 #undef ALIGN
@@ -138,6 +138,9 @@ class CLinuxRendererGLES : public CBaseRenderer
   virtual void         UnInit();
   virtual void         Reset(); /* resets renderer after seek for example */
   virtual void         ReorderDrawPoints();
+  virtual void         SetBufferSize(int numBuffers) { m_NumYV12Buffers = numBuffers; }
+  virtual unsigned int GetMaxBufferSize() { return NUM_BUFFERS; }
+  virtual unsigned int GetProcessorSize() { return m_NumYV12Buffers; }
 
   virtual void RenderUpdate(bool clear, DWORD flags = 0, DWORD alpha = 255);
 
@@ -162,7 +165,6 @@ class CLinuxRendererGLES : public CBaseRenderer
 protected:
   virtual void Render(DWORD flags, int index);
 
-  virtual void ManageTextures();
   int  NextYV12Texture();
   virtual bool ValidateRenderTarget();
   virtual void LoadShaders(int field=FIELD_FULL);
-- 
1.7.10


From 20fe728e43350442747c05adde545103516f377b Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Sun, 10 Feb 2013 18:40:30 +0100
Subject: [PATCH 4/7] OMXPlayer: adapt to buffering

---
 xbmc/cores/omxplayer/OMXPlayer.cpp      |    6 ++++++
 xbmc/cores/omxplayer/OMXPlayer.h        |    2 ++
 xbmc/cores/omxplayer/OMXPlayerVideo.cpp |   21 +++++++++++++--------
 3 files changed, 21 insertions(+), 8 deletions(-)

diff --git a/xbmc/cores/omxplayer/OMXPlayer.cpp b/xbmc/cores/omxplayer/OMXPlayer.cpp
index 60aa9ab..b4eda41 100644
--- a/xbmc/cores/omxplayer/OMXPlayer.cpp
+++ b/xbmc/cores/omxplayer/OMXPlayer.cpp
@@ -4210,4 +4210,10 @@ void COMXPlayer::GetSubtitleCapabilities(std::vector<int> &subCaps)
   subCaps.push_back(IPC_SUBS_ALL);
 }
 
+double COMXPlayer::GetClock(double& absolute, bool interpolated)
+{
+  m_av_clock.GetClock(absolute, interpolated);
+  return m_av_clock.OMXMediaTime(false, false);
+}
+
 #endif
diff --git a/xbmc/cores/omxplayer/OMXPlayer.h b/xbmc/cores/omxplayer/OMXPlayer.h
index d606e84..ad9d1e6 100644
--- a/xbmc/cores/omxplayer/OMXPlayer.h
+++ b/xbmc/cores/omxplayer/OMXPlayer.h
@@ -332,6 +332,8 @@ class COMXPlayer : public IPlayer, public CThread, public IDVDPlayer
   virtual void  GetScalingMethods(std::vector<int> &scalingMethods);
   virtual void  GetAudioCapabilities(std::vector<int> &audioCaps);
   virtual void  GetSubtitleCapabilities(std::vector<int> &subCaps);
+
+  virtual double GetClock(double& absolute, bool interpolated = true);
 protected:
   friend class COMXSelectionStreams;
 
diff --git a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
index 90f94aa..ecf4c9a 100644
--- a/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
+++ b/xbmc/cores/omxplayer/OMXPlayerVideo.cpp
@@ -158,6 +158,8 @@ bool OMXPlayerVideo::OpenStream(CDVDStreamInfo &hints)
   m_open        = true;
   m_send_eos    = false;
 
+  g_renderManager.EnableBuffering(false);
+
   return true;
 }
 
@@ -358,7 +360,7 @@ void OMXPlayerVideo::Output(int iGroupId, double pts, bool bDropPacket)
 
     if(!g_renderManager.Configure(m_hints.width, m_hints.height,
           iDisplayWidth, iDisplayHeight, m_fps, flags, format, 0,
-          m_hints.orientation))
+          m_hints.orientation, true))
     {
       CLog::Log(LOGERROR, "%s - failed to configure renderer", __FUNCTION__);
       return;
@@ -452,15 +454,15 @@ void OMXPlayerVideo::Output(int iGroupId, double pts, bool bDropPacket)
   m_dropbase = 0.0f;
 #endif
 
-  double pts_media = m_av_clock->OMXMediaTime(false, false);
-  ProcessOverlays(iGroupId, pts_media);
-
-  while(!CThread::m_bStop && m_av_clock->GetAbsoluteClock(false) < (iCurrentClock + iSleepTime + DVD_MSEC_TO_TIME(500)) )
-    Sleep(1);
+  int buffer = g_renderManager.WaitForBuffer(m_bStop, 0);
+  if (buffer < 0)
+    return;
 
-  g_renderManager.FlipPage(CThread::m_bStop, (iCurrentClock + iSleepTime) / DVD_TIME_BASE, -1, FS_NONE);
+  double pts_overlay = m_av_clock->OMXMediaTime(false, false)
+                     + 2* (double)DVD_TIME_BASE / g_graphicsContext.GetFPS();
+  ProcessOverlays(iGroupId, pts_overlay);
 
-  //m_av_clock->WaitAbsoluteClock((iCurrentClock + iSleepTime));
+  g_renderManager.FlipPage(CThread::m_bStop, pts_overlay, -1, FS_NONE, m_speed);
 }
 
 void OMXPlayerVideo::Process()
@@ -569,6 +571,7 @@ void OMXPlayerVideo::Process()
       m_av_clock->OMXReset(false);
       m_av_clock->UnLock();
       m_started = false;
+      g_renderManager.EnableBuffering(false);
     }
     else if (pMsg->IsType(CDVDMsg::GENERAL_FLUSH)) // private message sent by (COMXPlayerVideo::Flush())
     {
@@ -580,6 +583,7 @@ void OMXPlayerVideo::Process()
       m_omxVideo.Reset();
       m_av_clock->OMXReset(false);
       m_av_clock->UnLock();
+      g_renderManager.EnableBuffering(false);
     }
     else if (pMsg->IsType(CDVDMsg::PLAYER_SETSPEED))
     {
@@ -664,6 +668,7 @@ void OMXPlayerVideo::Process()
           m_codecname = m_omxVideo.GetDecoderName();
           m_started = true;
           m_messageParent.Put(new CDVDMsgInt(CDVDMsg::PLAYER_STARTED, DVDPLAYER_VIDEO));
+          g_renderManager.EnableBuffering(true);
         }
 
         // guess next frame pts. iDuration is always valid
-- 
1.7.10


From 572031ecf662ee23af414e6961004b3cf1336644 Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Sun, 24 Feb 2013 09:55:00 +0100
Subject: [PATCH 6/7] flip free buffer after overlay has been released

---
 xbmc/cores/VideoRenderers/OverlayRenderer.cpp |   19 ++++++++++++-------
 xbmc/cores/VideoRenderers/OverlayRenderer.h   |    6 +++---
 xbmc/cores/VideoRenderers/RenderManager.cpp   |    6 ++++--
 xbmc/cores/VideoRenderers/RenderManager.h     |    1 +
 4 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/xbmc/cores/VideoRenderers/OverlayRenderer.cpp b/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
index 5236390..3039751 100644
--- a/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
+++ b/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
@@ -127,27 +127,32 @@ void CRenderer::AddCleanup(COverlay* o)
   m_cleanup.push_back(o->Acquire());
 }
 
-void CRenderer::Release(SElementV& list)
+long CRenderer::Release(SElementV& list)
 {
   SElementV l = list;
   list.clear();
 
+  long count = 0;
   for(SElementV::iterator it = l.begin(); it != l.end(); it++)
   {
     if(it->overlay)
-      it->overlay->Release();
+      count += it->overlay->Release();
     if(it->overlay_dvd)
-      it->overlay_dvd->Release();
+      count += it->overlay_dvd->Release();
   }
+  return count;
 }
 
-void CRenderer::Release(COverlayV& list)
+long CRenderer::Release(COverlayV& list)
 {
   COverlayV l = list;
   list.clear();
 
+  long count = 0;
   for(COverlayV::iterator it = l.begin(); it != l.end(); it++)
-    (*it)->Release();
+    count += (*it)->Release();
+
+  return count;
 }
 
 void CRenderer::Flush()
@@ -167,10 +172,10 @@ void CRenderer::Flip()
   m_render = (m_render + 1) % m_iNumBuffers;
 }
 
-void CRenderer::ReleaseBuffer(int idx)
+long CRenderer::ReleaseBuffer(int idx)
 {
   CSingleLock lock(m_section);
-  Release(m_buffers[idx]);
+  return Release(m_buffers[idx]);
 }
 
 void CRenderer::Render()
diff --git a/xbmc/cores/VideoRenderers/OverlayRenderer.h b/xbmc/cores/VideoRenderers/OverlayRenderer.h
index 66c592a..2fcac4a 100644
--- a/xbmc/cores/VideoRenderers/OverlayRenderer.h
+++ b/xbmc/cores/VideoRenderers/OverlayRenderer.h
@@ -100,7 +100,7 @@
     void Render();
     void Flush();
     void SetNumBuffers(int numBuffers) { m_iNumBuffers = numBuffers; }
-    void ReleaseBuffer(int idx);
+    long ReleaseBuffer(int idx);
 
   protected:
 
@@ -123,8 +123,8 @@
     COverlay* Convert(CDVDOverlay* o, double pts);
     COverlay* Convert(CDVDOverlaySSA* o, double pts);
 
-    void      Release(COverlayV& list);
-    void      Release(SElementV& list);
+    long      Release(COverlayV& list);
+    long      Release(SElementV& list);
 
     CCriticalSection m_section;
     SElementV        m_buffers[NUM_BUFFERS];
diff --git a/xbmc/cores/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoRenderers/RenderManager.cpp
index ca454eb..bc2e403 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoRenderers/RenderManager.cpp
@@ -989,7 +989,7 @@ int CXBMCRenderManager::FlipFreeBuffer()
   // See "Render Buffer State Description" in header for information.
   if (HasFreeBuffer())
   {
-    if (!m_bRenderBufferUsed)
+    if (!m_bRenderBufferUsed && !m_bOverlayReleased)
     {
       return -1;
     }
@@ -1041,6 +1041,7 @@ void CXBMCRenderManager::ResetRenderBuffer()
   m_presentPts = DVD_NOPTS_VALUE;
   m_speed = 0;
   m_bRenderBufferUsed = false;
+  m_bOverlayReleased = false;
 }
 
 void CXBMCRenderManager::PrepareNextRender()
@@ -1119,7 +1120,8 @@ void CXBMCRenderManager::NotifyDisplayFlip()
         && m_iDisplayedRenderBuffer != m_iCurrentRenderBuffer)
     {
       m_pRenderer->ReleaseBuffer(m_iDisplayedRenderBuffer);
-      m_overlays.ReleaseBuffer(m_iDisplayedRenderBuffer);
+      if (m_overlays.ReleaseBuffer(m_iDisplayedRenderBuffer) > 0)
+        m_bOverlayReleased = true;
     }
   }
 
diff --git a/xbmc/cores/VideoRenderers/RenderManager.h b/xbmc/cores/VideoRenderers/RenderManager.h
index 1a460c7..fd85882 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.h
+++ b/xbmc/cores/VideoRenderers/RenderManager.h
@@ -258,6 +258,7 @@ class CXBMCRenderManager
   bool m_bCodecSupportsBuffering;
   int m_speed;
   bool m_bRenderBufferUsed;
+  bool m_bOverlayReleased;
   CEvent m_flipEvent;
 
   struct
-- 
1.7.10


From 059b89b5e0b50af7560783a4e6a0638ab9f2680c Mon Sep 17 00:00:00 2001
From: xbmc <fernetmenta@online.de>
Date: Sun, 24 Feb 2013 17:38:25 +0100
Subject: [PATCH 7/7] RverlayRenderer: align buffers with index in
 renderManager

---
 xbmc/cores/VideoRenderers/OverlayRenderer.cpp |    7 +++++--
 xbmc/cores/VideoRenderers/OverlayRenderer.h   |    2 +-
 xbmc/cores/VideoRenderers/RenderManager.cpp   |    5 +++--
 3 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/xbmc/cores/VideoRenderers/OverlayRenderer.cpp b/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
index 3039751..5592eca 100644
--- a/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
+++ b/xbmc/cores/VideoRenderers/OverlayRenderer.cpp
@@ -166,10 +166,13 @@ void CRenderer::Flush()
   Release(m_cleanup);
 }
 
-void CRenderer::Flip()
+void CRenderer::Flip(int source)
 {
   CSingleLock lock(m_section);
-  m_render = (m_render + 1) % m_iNumBuffers;
+  if( source >= 0 && source < m_iNumBuffers )
+    m_render = source;
+  else
+    m_render = (m_render + 1) % m_iNumBuffers;
 }
 
 long CRenderer::ReleaseBuffer(int idx)
diff --git a/xbmc/cores/VideoRenderers/OverlayRenderer.h b/xbmc/cores/VideoRenderers/OverlayRenderer.h
index 2fcac4a..627dd9f 100644
--- a/xbmc/cores/VideoRenderers/OverlayRenderer.h
+++ b/xbmc/cores/VideoRenderers/OverlayRenderer.h
@@ -96,7 +96,7 @@
     void AddOverlay(CDVDOverlay* o, double pts, int index);
     void AddOverlay(COverlay*    o, double pts, int index);
     void AddCleanup(COverlay*    o);
-    void Flip();
+    void Flip(int source);
     void Render();
     void Flush();
     void SetNumBuffers(int numBuffers) { m_iNumBuffers = numBuffers; }
diff --git a/xbmc/cores/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoRenderers/RenderManager.cpp
index bc2e403..099eb4d 100644
--- a/xbmc/cores/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoRenderers/RenderManager.cpp
@@ -303,7 +303,7 @@ void CXBMCRenderManager::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
     if(m_presentstep == PRESENT_FLIP)
     {
       FlipRenderBuffer();
-      m_overlays.Flip();
+      m_overlays.Flip(m_presentsource);
       m_pRenderer->FlipPage(m_presentsource);
       m_presentstep = PRESENT_FRAME;
       m_presentevent.Set();
@@ -703,7 +703,7 @@ void CXBMCRenderManager::Present()
     if(m_presentstep == PRESENT_FLIP)
     {
       FlipRenderBuffer();
-      m_overlays.Flip();
+      m_overlays.Flip(m_presentsource);
       m_pRenderer->FlipPage(m_presentsource);
       m_presentstep = PRESENT_FRAME;
       m_presentevent.Set();
@@ -994,6 +994,7 @@ int CXBMCRenderManager::FlipFreeBuffer()
       return -1;
     }
     m_bRenderBufferUsed = false;
+    m_bOverlayReleased = false;
     m_bAllRenderBuffersDisplayed = false;
     m_iOutputRenderBuffer = (m_iOutputRenderBuffer + 1) % m_iNumRenderBuffers;
     return m_iOutputRenderBuffer;
-- 
1.7.10

