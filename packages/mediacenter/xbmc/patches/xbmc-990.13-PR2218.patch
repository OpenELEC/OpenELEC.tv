From 4ffe9d056514aee9728a707f15f8eb78b71fd202 Mon Sep 17 00:00:00 2001
From: fritsch <peter.fruehberger@gmail.com>
Date: Sun, 10 Feb 2013 21:49:31 +0100
Subject: [PATCH 1/5] AE: Linux AE - some fixes of yesterday merge (Enumerate
 + Resume)

---
 xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp |    8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
index 96a9a72..20af5a1 100644
--- a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
@@ -1024,7 +1024,7 @@ bool CSoftAE::Resume()
 {
 #if defined(TARGET_LINUX)
   // We must make sure, that we don't return empty.
-  if(m_isSuspended || m_sinkInfoList.empty())
+  if(m_sinkInfoList.empty())
   {
     CLog::Log(LOGDEBUG, "CSoftAE::Resume - Re Enumerating Sinks");
     CExclusiveLock sinkLock(m_sinkLock);
@@ -1095,6 +1095,12 @@ void CSoftAE::Run()
     /* if we are told to restart */
     if (m_reOpen || restart || !m_sink)
     {
+      if(m_sinkIsSuspended && m_sink)
+      {
+        m_reOpen = m_reOpen || m_sink->SoftResume();
+        m_sinkIsSuspended = false;
+        CLog::Log(LOGDEBUG, "CSoftAE::Run - Sink was forgotten");   
+      }
       CLog::Log(LOGDEBUG, "CSoftAE::Run - Sink restart flagged");
       InternalOpenSink();
     }
-- 
1.7.10


From 934a29f37b97f7c7b43a9da7086765f1134428a4 Mon Sep 17 00:00:00 2001
From: fritsch <peter.fruehberger@gmail.com>
Date: Mon, 11 Feb 2013 00:08:05 +0100
Subject: [PATCH 2/5] AE: in doubt restore old suspend behaviour

---
 xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp |   49 +++++++++++++++-------
 1 file changed, 33 insertions(+), 16 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
index 20af5a1..0f6c6ed 100644
--- a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
@@ -989,32 +989,50 @@ bool CSoftAE::Suspend()
     CSoftAEStream *stream = *itt;
     stream->Flush();
   }
+  streamLock.Leave();
   #if defined(TARGET_LINUX)
   /*workaround sinks not playing sound after resume */
     StopAllSounds();
-    CExclusiveLock sinkLock(m_sinkLock);
-    for (AESinkInfoList::iterator itt = m_sinkInfoList.begin(); itt != m_sinkInfoList.end(); ++itt)
-    {
-      itt->m_deviceInfoList.pop_back();
-    }
+    bool ret = true;
     if(m_sink)
     {
       /* Deinitialize and delete current m_sink */
       // we don't want that Run reopens our device, so we wait.
       m_saveSuspend.Reset();
       // wait until we are looping in ProcessSuspend()
-      m_saveSuspend.Wait();
-      m_sink->Drain();
-      m_sink->Deinitialize();
-      delete m_sink;
-      m_sink = NULL;
-      // signal anybody, that the sink is closed now
-      // this should help us not to run into deadlocks
-      if(m_closeSink)
-       m_closeEvent.Set();
+      // this is more save to not come up unclean
+      // we cannot wait forever
+      ret = m_saveSuspend.WaitMSec(500);
+      if(ret)
+      {
+        CLog::Log(LOGDEBUG, "CSoftAE::Suspend - After Event");
+        CExclusiveLock sinkLock(m_sinkLock);
+        // remove all the sinks
+        for (AESinkInfoList::iterator itt = m_sinkInfoList.begin(); itt != m_sinkInfoList.end(); ++itt)
+        {
+          itt->m_deviceInfoList.pop_back();
+        }
+        m_sink->Drain();
+        m_sink->Deinitialize();
+        delete m_sink;
+        m_sink = NULL;
+      }
+      else
+      {
+        CLog::Log(LOGDEBUG, "CSoftAE::Suspend - Unload failed will continue");
+    	m_saveSuspend.Reset();
+      }
     }
     // The device list is now empty and must be reenumerated afterwards.
-    m_sinkInfoList.clear();
+    if(ret)
+      m_sinkInfoList.clear();
+
+    // signal anybody, that we are gone now (beware of deadlocks)
+    // we don't unset the fields here, to care for reinit after resume
+    if(m_closeSink)
+      m_closeEvent.Set();
+    if(m_reOpen)
+      m_reOpenEvent.Set();
   #endif
 
   return true;
@@ -1378,7 +1396,6 @@ unsigned int CSoftAE::RunRawStreamStage(unsigned int channelCount, void *out, bo
   StreamList resumeStreams;
   static StreamList::iterator itt;
   CSingleLock streamLock(m_streamLock);
-
   /* handle playing streams */
   for (itt = m_playingStreams.begin(); itt != m_playingStreams.end(); ++itt)
   {
-- 
1.7.10


From cfa7d8d2ca9aa5641f5a6cb5169b2c19c0990992 Mon Sep 17 00:00:00 2001
From: fritsch <peter.fruehberger@gmail.com>
Date: Mon, 11 Feb 2013 03:08:42 +0100
Subject: [PATCH 3/5] AE: Choose indirection when possible. Care for lazy
 evaluation

---
 xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp |   46 ++++++----------------
 xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.h   |    2 -
 xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp      |   11 +++---
 3 files changed, 18 insertions(+), 41 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
index 0f6c6ed..dc01abe 100644
--- a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
@@ -59,7 +59,6 @@
   m_audiophile         (true        ),
   m_running            (false       ),
   m_reOpen             (false       ),
-  m_closeSink          (false       ),
   m_sinkIsSuspended    (false       ),
   m_isSuspended        (false       ),
   m_softSuspend        (false       ),
@@ -189,8 +188,6 @@ void CSoftAE::InternalCloseSink()
     delete m_sink;
     m_sink = NULL;
   }
-  m_closeSink = false;
-  m_closeEvent.Set();
 }
 /* this must NEVER be called from outside the main thread or Initialization */
 void CSoftAE::InternalOpenSink()
@@ -732,7 +729,7 @@ void CSoftAE::PauseStream(CSoftAEStream *stream)
   stream->m_paused = true;
   streamLock.Leave();
 
-  OpenSink();
+  m_reOpen = true;
 }
 
 void CSoftAE::ResumeStream(CSoftAEStream *stream)
@@ -743,7 +740,7 @@ void CSoftAE::ResumeStream(CSoftAEStream *stream)
   streamLock.Leave();
 
   m_streamsPlaying = true;
-  OpenSink();
+  m_reOpen = true;
 }
 
 void CSoftAE::Stop()
@@ -780,7 +777,7 @@ IAEStream *CSoftAE::MakeStream(enum AEDataFormat dataFormat, unsigned int sample
   CSoftAEStream *stream = new CSoftAEStream(dataFormat, sampleRate, encodedSampleRate, channelLayout, options);
   m_newStreams.push_back(stream);
   streamLock.Leave();
-
+  // this is really needed here
   OpenSink();
   return stream;
 }
@@ -873,17 +870,9 @@ IAEStream *CSoftAE::FreeStream(IAEStream *stream)
   RemoveStream(m_playingStreams, (CSoftAEStream*)stream);
   RemoveStream(m_streams       , (CSoftAEStream*)stream);
   lock.Leave();
-  // Close completely when we go to suspend, reopen as it was old behaviour.
-  // Not opening when masterstream stops means clipping on S/PDIF.
-  if(m_isSuspended)
-  {
-    m_closeEvent.Reset();
-    m_closeSink = true;
-    m_closeEvent.Wait();
-    m_wake.Set();
-  }
-  else if (m_masterStream == stream)
-	  OpenSink();
+  // Reopen is old behaviour. Not opening when masterstream stops means clipping on S/PDIF.
+  if(!m_isSuspended && (m_masterStream == stream))
+    m_reOpen = true;
 
   delete (CSoftAEStream*)stream;
   return NULL;
@@ -1012,10 +1001,7 @@ bool CSoftAE::Suspend()
         {
           itt->m_deviceInfoList.pop_back();
         }
-        m_sink->Drain();
-        m_sink->Deinitialize();
-        delete m_sink;
-        m_sink = NULL;
+        InternalCloseSink();
       }
       else
       {
@@ -1029,8 +1015,6 @@ bool CSoftAE::Suspend()
 
     // signal anybody, that we are gone now (beware of deadlocks)
     // we don't unset the fields here, to care for reinit after resume
-    if(m_closeSink)
-      m_closeEvent.Set();
     if(m_reOpen)
       m_reOpenEvent.Set();
   #endif
@@ -1075,10 +1059,10 @@ void CSoftAE::Run()
     // ProcessSuspending() cannot guarantee that we get our sink back softresumed
     // that is a big problem as another thread could start adding packets
     // this must be checked here, before writing anything on the sinks
-    if(m_sinkIsSuspended)
+    if(m_sinkIsSuspended && m_sink)
     {
     	CLog::Log(LOGDEBUG, "CSoftAE::Run - Someone has forgotten to resume us (device resumed)");
-    	m_sink->SoftResume();
+    	m_reOpen = !m_sink->SoftResume() || m_reOpen;
     	m_sinkIsSuspended = false;
     }
     if ((this->*m_outputStageFn)(hasAudio) > 0)
@@ -1101,12 +1085,6 @@ void CSoftAE::Run()
         restart = true;
     }
 
-    //we are told to close the sink
-    if(m_closeSink)
-    {
-      InternalCloseSink();
-    }
-
     /* Handle idle or forced suspend */
     ProcessSuspend();
 
@@ -1115,7 +1093,8 @@ void CSoftAE::Run()
     {
       if(m_sinkIsSuspended && m_sink)
       {
-        m_reOpen = m_reOpen || m_sink->SoftResume();
+        // hint for fritsch: remember lazy evaluation
+        m_reOpen = !m_sink->SoftResume() || m_reOpen;
         m_sinkIsSuspended = false;
         CLog::Log(LOGDEBUG, "CSoftAE::Run - Sink was forgotten");   
       }
@@ -1505,7 +1484,6 @@ inline void CSoftAE::RemoveStream(StreamList &streams, CSoftAEStream *stream)
 
 inline void CSoftAE::ProcessSuspend()
 {
-  m_sinkIsSuspended = false;
   unsigned int curSystemClock = 0;
 #if defined(TARGET_WINDOWS) || defined(TARGET_LINUX)
   if (!m_softSuspend && m_playingStreams.empty() && m_playing_sounds.empty() &&
@@ -1563,7 +1541,7 @@ inline void CSoftAE::ProcessSuspend()
      */
     if (!m_isSuspended && (!m_playingStreams.empty() || !m_playing_sounds.empty()))
     {
-      m_reOpen = m_reOpen || !m_sink->SoftResume(); // sink returns false if it requires reinit
+      m_reOpen = !m_sink->SoftResume() || m_reOpen; // sink returns false if it requires reinit (worthless with current implementation)
       m_sinkIsSuspended = false; //sink processing data
       m_softSuspend   = false; //break suspend loop (under some conditions)
       CLog::Log(LOGDEBUG, "Resumed the Sink");
diff --git a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.h b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.h
index 559e055..26d5e9c 100644
--- a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.h
+++ b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.h
@@ -137,14 +137,12 @@ class CSoftAE : public IThreadedAE
 
   /* internal vars */
   bool             m_running, m_reOpen;
-  bool             m_closeSink;
   bool             m_sinkIsSuspended; /* The sink is in unusable state, e.g. SoftSuspended */
   bool             m_isSuspended;      /* engine suspended by external function to release audio context */
   bool             m_softSuspend;      /* latches after last stream or sound played for timer below for idle */
   unsigned int     m_softSuspendTimer; /* time in milliseconds to hold sink open before soft suspend for idle */
   CEvent           m_reOpenEvent;
   CEvent           m_wake;
-  CEvent           m_closeEvent;
   CEvent           m_saveSuspend;
 
   CCriticalSection m_runningLock;     /* released when the thread exits */
diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
index b06d358..fe40d17 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
@@ -1144,16 +1144,17 @@ bool CAESinkALSA::SoftSuspend()
 }
 bool CAESinkALSA::SoftResume()
 {
-	// reinit all the clibber
+    // reinit all the clibber
+    bool ret = true; // all fine
     if(!m_pcm)
     {
       if (!snd_config)
-	    snd_config_update();
+        snd_config_update();
 
-      Initialize(m_initFormat, m_initDevice);
+      ret = Initialize(m_initFormat, m_initDevice);
     }
-   //we want that AE loves us again
-   return false; // force reinit
+   //we want that AE loves us again - reinit when initialize failed
+   return ret; // force reinit if false
 }
 
 void CAESinkALSA::sndLibErrorHandler(const char *file, int line, const char *function, int err, const char *fmt, ...)
-- 
1.7.10


From 87cc3d07ec7eb27c065920f0741e649f72b86acd Mon Sep 17 00:00:00 2001
From: fritsch <peter.fruehberger@gmail.com>
Date: Tue, 12 Feb 2013 22:29:27 +0100
Subject: [PATCH 4/5] AE: make sure we reOpen when the flag is set or we run
 into trouble

---
 xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp |   15 +++------------
 1 file changed, 3 insertions(+), 12 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
index dc01abe..085ae30 100644
--- a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
@@ -1055,21 +1055,12 @@ void CSoftAE::Run()
   {
     bool restart = false;
 
-    /* Clean Up what the suspend guy might have forgotten */
-    // ProcessSuspending() cannot guarantee that we get our sink back softresumed
-    // that is a big problem as another thread could start adding packets
-    // this must be checked here, before writing anything on the sinks
-    if(m_sinkIsSuspended && m_sink)
-    {
-    	CLog::Log(LOGDEBUG, "CSoftAE::Run - Someone has forgotten to resume us (device resumed)");
-    	m_reOpen = !m_sink->SoftResume() || m_reOpen;
-    	m_sinkIsSuspended = false;
-    }
-    if ((this->*m_outputStageFn)(hasAudio) > 0)
+    /* with the new non blocking implementation - we just reOpen here, when it tells reOpen */
+    if (!m_reOpen && (this->*m_outputStageFn)(hasAudio) > 0)
       hasAudio = false; /* taken some audio - reset our silence flag */
 
     /* if we have enough room in the buffer */
-    if (m_buffer.Free() >= m_frameSize)
+    if (!m_reOpen && m_buffer.Free() >= m_frameSize)
     {
       /* take some data for our use from the buffer */
       uint8_t *out = (uint8_t*)m_buffer.Take(m_frameSize);
-- 
1.7.10


From d6b5df01dee73bf3a6bf4c88c9aeb242396a7b69 Mon Sep 17 00:00:00 2001
From: fritsch <peter.fruehberger@gmail.com>
Date: Wed, 13 Feb 2013 08:34:09 +0100
Subject: [PATCH 5/5] AE: hold streamlock longer in FreeStream until the data
 is gone (could still be used in Output Stage)

---
 xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
index 085ae30..3dcdcd7 100644
--- a/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/SoftAE/SoftAE.cpp
@@ -730,6 +730,7 @@ void CSoftAE::PauseStream(CSoftAEStream *stream)
   streamLock.Leave();
 
   m_reOpen = true;
+  m_wake.Set();
 }
 
 void CSoftAE::ResumeStream(CSoftAEStream *stream)
@@ -741,6 +742,7 @@ void CSoftAE::ResumeStream(CSoftAEStream *stream)
 
   m_streamsPlaying = true;
   m_reOpen = true;
+  m_wake.Set();
 }
 
 void CSoftAE::Stop()
@@ -869,7 +871,6 @@ IAEStream *CSoftAE::FreeStream(IAEStream *stream)
   CSingleLock lock(m_streamLock);
   RemoveStream(m_playingStreams, (CSoftAEStream*)stream);
   RemoveStream(m_streams       , (CSoftAEStream*)stream);
-  lock.Leave();
   // Reopen is old behaviour. Not opening when masterstream stops means clipping on S/PDIF.
   if(!m_isSuspended && (m_masterStream == stream))
     m_reOpen = true;
-- 
1.7.10

