#!/bin/sh

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2012 Stephan Raue (stephan@openelec.tv)
#
#  This Program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.tv; see the file COPYING.  If not, write to
#  the Free Software Foundation, 51 Franklin Street, Suite 500, Boston, MA 02110, USA.
#  http://www.gnu.org/copyleft/gpl.html
################################################################################

# usage:   sudo ./create_sdcard <drive>
# example: sudo ./create_sdcard /dev/sdb
# loop example: sudo ./create_sdcard /dev/loop0 ~/vSD.img

# create an empty image file for use with loop device like this:
# dd if=/dev/zero of=~/vSD.img bs=1M count=910

# exit if error or unknown variable
set -e

OS=`uname -s`

if [ "$(id -u)" != "0" ]; then
  clear
  echo "#########################################################"
  echo "# please execute with 'sudo' or -DANGEROUS!!!- as root  #"
  echo "# example: sudo ./create_sdcard <drive>                 #"
  echo "#########################################################"
  exit 1
fi

if [ -z "$1" ]; then
  clear
  echo "#########################################################"
  echo "# please execute with your drive as option              #"
  if [ "$OS" = "FreeBSD" ];then 
    echo "# example: sudo ./create_sdcard /dev/da0               #"
    echo "# or:      sudo ./create_sdcard /dev/mmcsd0            #"
  else
    echo "# example: sudo ./create_sdcard /dev/sdb                #"
    echo "# or:      sudo ./create_sdcard /dev/mmcblk0            #"
    echo "# or:      sudo ./create_sdcard /dev/loop0 ~/vSD.img    #"
    echo "# to create an image file for /dev/loop0 option:        #"
    echo "#   sudo dd if=/dev/zero of=~/vSD.img bs=1M count=910   #"
  fi
  echo "#########################################################"
  exit 1
fi

DISK="$1"
if [ "$DISK" = "/dev/mmcblk0" ]; then
  PART1="${DISK}p1"
  PART2="${DISK}p2"
elif [ "$DISK" = "/dev/loop0" ]; then
  PART1="${DISK}p1"
  PART2="${DISK}p2"
  IMGFILE="$2"
  losetup $DISK $IMGFILE
else
  PART1="${DISK}1"
  PART2="${DISK}2"
fi
if [ "$OS" = "FreeBSD" ];then
  PART1="${DISK}s1"
  PART2="${DISK}s2"
fi

clear
echo "#########################################################"
echo "#                                                       #"
echo "#             OpenELEC.tv USB Installer                 #"
echo "#                                                       #"
echo "#########################################################"
echo "#                                                       #"
echo "#     This will wipe any data off your chosen drive     #"
echo "# Please read the instructions and use very carefully.. #"
echo "#                                                       #"
echo "#########################################################"

# check for some required tools
if [ "$OS" != "FreeBSD" ]; then
  MD5_CMD=md5sum
  # this is needed to partion the drive
  if ! which parted > /dev/null; then
    clear
    echo "#########################################################"
    echo "#                                                       #"
    echo "# OpenELEC.tv missing tool - Installation will quit     #"
    echo "#                                                       #"
    echo "#      We can't find the required tool \"parted\"         #"
    echo "#      on your system.                                  #"
    echo "#      Please install it via your package manager.      #"
    echo "#                                                       #"
    echo "#########################################################"
    exit 1
  fi

  # this is needed to format the drive
  if ! which mkfs.vfat > /dev/null; then
    clear
    echo "#########################################################"
    echo "#                                                       #"
    echo "# OpenELEC.tv missing tool - Installation will quit     #"
    echo "#                                                       #"
    echo "#      We can't find the required tool \"mkfs.vfat\"       #"
    echo "#      on your system.                                  #"
    echo "#      Please install it via your package manager.      #"
    echo "#                                                       #"
    echo "#########################################################"
    exit 1
  fi

  # this is needed to tell the kernel for partition changes
  if ! which partprobe > /dev/null; then
    clear
    echo "#########################################################"
    echo "#                                                       #"
    echo "# OpenELEC.tv missing tool - Installation will quit     #"
    echo "#                                                       #"
    echo "#      We can't find the required tool \"partprobe\"       #"
    echo "#      on your system.                                  #"
    echo "#      Please install it via your package manager.      #"
    echo "#                                                       #"
    echo "#########################################################"
    exit 1
  fi
else
  MD5_CMD=md5
fi # if not FreeBSD

  # this is needed to format the drive
  if ! which mkfs.ext4 > /dev/null; then
    clear
    echo "#########################################################"
    echo "#                                                       #"
    echo "# OpenELEC.tv missing tool - Installation will quit     #"
    echo "#                                                       #"
    echo "#      We can't find the required tool \"mkfs.ext4\"       #"
    echo "#      on your system.                                  #"
    echo "#      Please install it via your package manager.      #"
    echo "#                                                       #"
    echo "#########################################################"
    exit 1
  fi

  # this is needed to tell the kernel for partition changes
  if ! which ${MD5_CMD} > /dev/null; then
    clear
    echo "#########################################################"
    echo "#                                                       #"
    echo "# OpenELEC.tv missing tool - Installation will quit     #"
    echo "#                                                       #"
    echo "#      We can't find the required tool \"md5sum\"         #"
    echo "#      on your system.                                  #"
    echo "#      Please install it via your package manager.      #"
    echo "#                                                       #"
    echo "#########################################################"
    exit 1
  fi

# check MD5 sums
  echo "checking MD5 sum..."

  md5sumFailed()
  {
    clear
    echo "#########################################################"
    echo "#                                                       #"
    echo "# OpenELEC.tv failed md5 check - Installation will quit #"
    echo "#                                                       #"
    echo "#      Your original download was probably corrupt.     #"
    echo "#   Please visit www.openelec.tv and get another copy   #"
    echo "#                                                       #"
    echo "#########################################################"
    exit 1
  }

  if ! ${MD5_CMD} -c target/KERNEL.md5; then
    md5sumFailed
  fi

  if ! ${MD5_CMD} -c target/SYSTEM.md5; then
    md5sumFailed
  fi

# umount everything related to ${DISK}
  __a=`mount | grep ${DISK} | awk '{print length($3), $3;}' | sort -rn | awk '{$1=""; print;}'`
  if [ -n "$__a" ]; then
    echo "unmounting $__a"
    umount $__a
  fi

# remove all partitions from the drive
  echo "writing new disklabel on $DISK (removing all partitions)..."
  if [ "$OS" = "FreeBSD" ]; then
	gpart destroy -F "$DISK"
	gpart create -s MBR "$DISK"
  else
    parted -s "$DISK" mklabel msdos
  fi

# create a single partition
  echo "creating partitions on $DISK..."
  if [ "$OS" = "FreeBSD" ]; then
    gpart add -t '!12' -i 1 -s 128M "$DISK"
    gpart add -t '!83' -i 2 "$DISK"
  else
    parted -s "$DISK" unit cyl mkpart primary fat32 -- 0 16
    parted -s "$DISK" unit cyl mkpart primary ext2 -- 16 -2
  fi
# make partition active (bootable)
  echo "marking partition active..."
  if [ "$OS" = "FreeBSD" ]; then
    gpart set -a active -i 1 "$DISK"
  else
    parted -s "$DISK" set 1 boot on
  fi

# tell kernel we have a new partition table
  if [ "$OS" != "FreeBSD" ]; then
    echo "telling kernel we have a new partition table..."
    partprobe "$DISK"
  fi

# create filesystem
  echo "creating filesystem on $PART1..."
  if [ "$OS" = "FreeBSD" ]; then
	newfs_msdos -F 16 -L System "$PART1"
  else
    mkfs.vfat "$PART1" -I -n System
  fi
  echo "creating filesystem on $PART2..."
  mkfs.ext4 -L Storage "$PART2"

# remount loopback device
  if [ "$DISK" = "/dev/loop0" ]; then
    sync
    losetup -d $DISK
    losetup $DISK $IMGFILE -o 1048576 --sizelimit 131071488
    PART1=$DISK
  fi

# mount partition
  echo "mounting partition $PART1 ..."
  rm -rf /tmp/openelec_install
  mkdir -p /tmp/openelec_install
  if [ "$OS" = "FreeBSD" ]; then
	mount -t msdosfs "$PART1" /tmp/openelec_install
  else
    mount -t vfat "$PART1" /tmp/openelec_install
  fi
  MOUNTPOINT=/tmp/openelec_install

# create bootloader configuration
  echo "creating bootloader configuration..."

  echo "boot=/dev/mmcblk0p1 disk=/dev/mmcblk0p2 quiet" > $MOUNTPOINT/cmdline.txt

# copy files
  echo "copying files to $MOUNTPOINT..."
  cp target/KERNEL $MOUNTPOINT/kernel.img
  cp target/SYSTEM $MOUNTPOINT
  cp 3rdparty/bootloader/* $MOUNTPOINT
  cp openelec.ico $MOUNTPOINT
  cp README.md $MOUNTPOINT

# sync disk
  echo "syncing disk..."
  sync

# unmount partition
  echo "unmounting partition $MOUNTPOINT ..."
  umount $MOUNTPOINT

# cleaning
  echo "cleaning tempdir..."
  rmdir $MOUNTPOINT

# unmount loopback device
  if [ "$DISK" = "/dev/loop0" ]; then
    losetup -d $DISK
  fi

echo "...installation finished"
