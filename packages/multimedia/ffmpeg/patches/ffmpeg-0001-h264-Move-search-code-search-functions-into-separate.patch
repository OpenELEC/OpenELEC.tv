From 8cdb3bf2837a3fb4fff3c6586316f81ae5f7b6cd Mon Sep 17 00:00:00 2001
From: Ben Avison <bavison@riscosopen.org>
Date: Wed, 16 Apr 2014 01:51:31 +0100
Subject: [PATCH 1/3] h264: Move search code search functions into separate
 source files.

This permits re-use with parsers for codecs which use similar start codes.

Signed-off-by: Michael Niedermayer <michaelni@gmx.at>
---
 libavcodec/Makefile               |   2 +-
 libavcodec/arm/Makefile           |   2 +-
 libavcodec/arm/h264dsp_armv6.S    | 253 --------------------------------------
 libavcodec/arm/h264dsp_init_arm.c |   4 +-
 libavcodec/arm/startcode_armv6.S  | 253 ++++++++++++++++++++++++++++++++++++++
 libavcodec/h264dsp.c              |  31 +----
 libavcodec/startcode.c            |  57 +++++++++
 libavcodec/startcode.h            |  35 ++++++
 8 files changed, 351 insertions(+), 286 deletions(-)
 delete mode 100644 libavcodec/arm/h264dsp_armv6.S
 create mode 100644 libavcodec/arm/startcode_armv6.S
 create mode 100644 libavcodec/startcode.c
 create mode 100644 libavcodec/startcode.h

diff --git a/libavcodec/Makefile b/libavcodec/Makefile
index b56ecd1..19caf11 100644
--- a/libavcodec/Makefile
+++ b/libavcodec/Makefile
@@ -49,7 +49,7 @@ OBJS-$(CONFIG_FFT)                     += avfft.o fft_fixed.o fft_float.o \
 OBJS-$(CONFIG_GOLOMB)                  += golomb.o
 OBJS-$(CONFIG_H263DSP)                 += h263dsp.o
 OBJS-$(CONFIG_H264CHROMA)              += h264chroma.o
-OBJS-$(CONFIG_H264DSP)                 += h264dsp.o h264idct.o
+OBJS-$(CONFIG_H264DSP)                 += h264dsp.o h264idct.o startcode.o
 OBJS-$(CONFIG_H264PRED)                += h264pred.o
 OBJS-$(CONFIG_H264QPEL)                += h264qpel.o
 OBJS-$(CONFIG_HPELDSP)                 += hpeldsp.o
diff --git a/libavcodec/arm/Makefile b/libavcodec/arm/Makefile
index a8446b2..b6410b2 100644
--- a/libavcodec/arm/Makefile
+++ b/libavcodec/arm/Makefile
@@ -47,7 +47,7 @@ ARMV6-OBJS-$(CONFIG_DSPUTIL)           += arm/dsputil_init_armv6.o      \
                                           arm/simple_idct_armv6.o       \

 ARMV6-OBJS-$(CONFIG_AC3DSP)            += arm/ac3dsp_armv6.o
-ARMV6-OBJS-$(CONFIG_H264DSP)           += arm/h264dsp_armv6.o
+ARMV6-OBJS-$(CONFIG_H264DSP)           += arm/startcode_armv6.o
 ARMV6-OBJS-$(CONFIG_HPELDSP)           += arm/hpeldsp_init_armv6.o      \
                                           arm/hpeldsp_armv6.o
 ARMV6-OBJS-$(CONFIG_MPEGAUDIODSP)      += arm/mpegaudiodsp_fixed_armv6.o
diff --git a/libavcodec/arm/h264dsp_armv6.S b/libavcodec/arm/h264dsp_armv6.S
deleted file mode 100644
index 2758262..0000000
--- a/libavcodec/arm/h264dsp_armv6.S
+++ /dev/null
@@ -1,253 +0,0 @@
-/*
- * Copyright (c) 2013 RISC OS Open Ltd
- * Author: Ben Avison <bavison@riscosopen.org>
- *
- * This file is part of FFmpeg.
- *
- * FFmpeg is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * FFmpeg is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with FFmpeg; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
- */
-
-#include "libavutil/arm/asm.S"
-
-RESULT  .req    a1
-BUF     .req    a1
-SIZE    .req    a2
-PATTERN .req    a3
-PTR     .req    a4
-DAT0    .req    v1
-DAT1    .req    v2
-DAT2    .req    v3
-DAT3    .req    v4
-TMP0    .req    v5
-TMP1    .req    v6
-TMP2    .req    ip
-TMP3    .req    lr
-
-#define PRELOAD_DISTANCE 4
-
-.macro innerloop4
-        ldr     DAT0, [PTR], #4
-        subs    SIZE, SIZE, #4 @ C flag survives rest of macro
-        sub     TMP0, DAT0, PATTERN, lsr #14
-        bic     TMP0, TMP0, DAT0
-        ands    TMP0, TMP0, PATTERN
-.endm
-
-.macro innerloop16  decrement, do_preload
-        ldmia   PTR!, {DAT0,DAT1,DAT2,DAT3}
- .ifnc "\do_preload",""
-        pld     [PTR, #PRELOAD_DISTANCE*32]
- .endif
- .ifnc "\decrement",""
-        subs    SIZE, SIZE, #\decrement @ C flag survives rest of macro
- .endif
-        sub     TMP0, DAT0, PATTERN, lsr #14
-        sub     TMP1, DAT1, PATTERN, lsr #14
-        bic     TMP0, TMP0, DAT0
-        bic     TMP1, TMP1, DAT1
-        sub     TMP2, DAT2, PATTERN, lsr #14
-        sub     TMP3, DAT3, PATTERN, lsr #14
-        ands    TMP0, TMP0, PATTERN
-        bic     TMP2, TMP2, DAT2
-        it      eq
-        andseq  TMP1, TMP1, PATTERN
-        bic     TMP3, TMP3, DAT3
-        itt     eq
-        andseq  TMP2, TMP2, PATTERN
-        andseq  TMP3, TMP3, PATTERN
-.endm
-
-/* int ff_h264_find_start_code_candidate_armv6(const uint8_t *buf, int size) */
-function ff_h264_find_start_code_candidate_armv6, export=1
-        push    {v1-v6,lr}
-        mov     PTR, BUF
-        @ Ensure there are at least (PRELOAD_DISTANCE+2) complete cachelines to go
-        @ before using code that does preloads
-        cmp     SIZE, #(PRELOAD_DISTANCE+3)*32 - 1
-        blo     60f
-
-        @ Get to word-alignment, 1 byte at a time
-        tst     PTR, #3
-        beq     2f
-1:      ldrb    DAT0, [PTR], #1
-        sub     SIZE, SIZE, #1
-        teq     DAT0, #0
-        beq     90f
-        tst     PTR, #3
-        bne     1b
-2:      @ Get to 4-word alignment, 1 word at a time
-        ldr     PATTERN, =0x80008000
-        setend  be
-        tst     PTR, #12
-        beq     4f
-3:      innerloop4
-        bne     91f
-        tst     PTR, #12
-        bne     3b
-4:      @ Get to cacheline (8-word) alignment
-        tst     PTR, #16
-        beq     5f
-        innerloop16  16
-        bne     93f
-5:      @ Check complete cachelines, with preloading
-        @ We need to stop when there are still (PRELOAD_DISTANCE+1)
-        @ complete cachelines to go
-        sub     SIZE, SIZE, #(PRELOAD_DISTANCE+2)*32
-6:      innerloop16  , do_preload
-        bne     93f
-        innerloop16  32
-        bne     93f
-        bcs     6b
-        @ Preload trailing part-cacheline, if any
-        tst     SIZE, #31
-        beq     7f
-        pld     [PTR, #(PRELOAD_DISTANCE+1)*32]
-        @ Check remaining data without doing any more preloads. First
-        @ do in chunks of 4 words:
-7:      adds    SIZE, SIZE, #(PRELOAD_DISTANCE+2)*32 - 16
-        bmi     9f
-8:      innerloop16  16
-        bne     93f
-        bcs     8b
-        @ Then in words:
-9:      adds    SIZE, SIZE, #16 - 4
-        bmi     11f
-10:     innerloop4
-        bne     91f
-        bcs     10b
-11:     setend  le
-        @ Check second byte of final halfword
-        ldrb    DAT0, [PTR, #-1]
-        teq     DAT0, #0
-        beq     90f
-        @ Check any remaining bytes
-        tst     SIZE, #3
-        beq     13f
-12:     ldrb    DAT0, [PTR], #1
-        sub     SIZE, SIZE, #1
-        teq     DAT0, #0
-        beq     90f
-        tst     SIZE, #3
-        bne     12b
-        @ No candidate found
-13:     sub     RESULT, PTR, BUF
-        b       99f
-
-60:     @ Small buffer - simply check by looping over bytes
-        subs    SIZE, SIZE, #1
-        bcc     99f
-61:     ldrb    DAT0, [PTR], #1
-        subs    SIZE, SIZE, #1
-        teq     DAT0, #0
-        beq     90f
-        bcs     61b
-        @ No candidate found
-        sub     RESULT, PTR, BUF
-        b       99f
-
-90:     @ Found a candidate at the preceding byte
-        sub     RESULT, PTR, BUF
-        sub     RESULT, RESULT, #1
-        b       99f
-
-91:     @ Found a candidate somewhere in the preceding 4 bytes
-        sub     RESULT, PTR, BUF
-        sub     RESULT, RESULT, #4
-        sub     TMP0, DAT0, #0x20000
-        bics    TMP0, TMP0, DAT0
-        itt     pl
-        ldrbpl  DAT0, [PTR, #-3]
-        addpl   RESULT, RESULT, #2
-        bpl     92f
-        teq     RESULT, #0
-        beq     98f @ don't look back a byte if found at first byte in buffer
-        ldrb    DAT0, [PTR, #-5]
-92:     teq     DAT0, #0
-        it      eq
-        subeq   RESULT, RESULT, #1
-        b       98f
-
-93:     @ Found a candidate somewhere in the preceding 16 bytes
-        sub     RESULT, PTR, BUF
-        sub     RESULT, RESULT, #16
-        teq     TMP0, #0
-        beq     95f @ not in first 4 bytes
-        sub     TMP0, DAT0, #0x20000
-        bics    TMP0, TMP0, DAT0
-        itt     pl
-        ldrbpl  DAT0, [PTR, #-15]
-        addpl   RESULT, RESULT, #2
-        bpl     94f
-        teq     RESULT, #0
-        beq     98f @ don't look back a byte if found at first byte in buffer
-        ldrb    DAT0, [PTR, #-17]
-94:     teq     DAT0, #0
-        it      eq
-        subeq   RESULT, RESULT, #1
-        b       98f
-95:     add     RESULT, RESULT, #4
-        teq     TMP1, #0
-        beq     96f @ not in next 4 bytes
-        sub     TMP1, DAT1, #0x20000
-        bics    TMP1, TMP1, DAT1
-        itee    mi
-        ldrbmi  DAT0, [PTR, #-13]
-        ldrbpl  DAT0, [PTR, #-11]
-        addpl   RESULT, RESULT, #2
-        teq     DAT0, #0
-        it      eq
-        subeq   RESULT, RESULT, #1
-        b       98f
-96:     add     RESULT, RESULT, #4
-        teq     TMP2, #0
-        beq     97f @ not in next 4 bytes
-        sub     TMP2, DAT2, #0x20000
-        bics    TMP2, TMP2, DAT2
-        itee    mi
-        ldrbmi  DAT0, [PTR, #-9]
-        ldrbpl  DAT0, [PTR, #-7]
-        addpl   RESULT, RESULT, #2
-        teq     DAT0, #0
-        it      eq
-        subeq   RESULT, RESULT, #1
-        b       98f
-97:     add     RESULT, RESULT, #4
-        sub     TMP3, DAT3, #0x20000
-        bics    TMP3, TMP3, DAT3
-        itee    mi
-        ldrbmi  DAT0, [PTR, #-5]
-        ldrbpl  DAT0, [PTR, #-3]
-        addpl   RESULT, RESULT, #2
-        teq     DAT0, #0
-        it      eq
-        subeq   RESULT, RESULT, #1
-        @ drop through to 98f
-98:     setend  le
-99:     pop     {v1-v6,pc}
-endfunc
-
-        .unreq  RESULT
-        .unreq  BUF
-        .unreq  SIZE
-        .unreq  PATTERN
-        .unreq  PTR
-        .unreq  DAT0
-        .unreq  DAT1
-        .unreq  DAT2
-        .unreq  DAT3
-        .unreq  TMP0
-        .unreq  TMP1
-        .unreq  TMP2
-        .unreq  TMP3
diff --git a/libavcodec/arm/h264dsp_init_arm.c b/libavcodec/arm/h264dsp_init_arm.c
index a0418fd..eb6c514 100644
--- a/libavcodec/arm/h264dsp_init_arm.c
+++ b/libavcodec/arm/h264dsp_init_arm.c
@@ -24,7 +24,7 @@
 #include "libavutil/arm/cpu.h"
 #include "libavcodec/h264dsp.h"

-int ff_h264_find_start_code_candidate_armv6(const uint8_t *buf, int size);
+int ff_startcode_find_candidate_armv6(const uint8_t *buf, int size);

 void ff_h264_v_loop_filter_luma_neon(uint8_t *pix, int stride, int alpha,
                                      int beta, int8_t *tc0);
@@ -109,7 +109,7 @@ av_cold void ff_h264dsp_init_arm(H264DSPContext *c, const int bit_depth,
     int cpu_flags = av_get_cpu_flags();

     if (have_armv6(cpu_flags))
-        c->h264_find_start_code_candidate = ff_h264_find_start_code_candidate_armv6;
+        c->h264_find_start_code_candidate = ff_startcode_find_candidate_armv6;
     if (have_neon(cpu_flags))
         h264dsp_init_neon(c, bit_depth, chroma_format_idc);
 }
diff --git a/libavcodec/arm/startcode_armv6.S b/libavcodec/arm/startcode_armv6.S
new file mode 100644
index 0000000..a46f009
--- /dev/null
+++ b/libavcodec/arm/startcode_armv6.S
@@ -0,0 +1,253 @@
+/*
+ * Copyright (c) 2013 RISC OS Open Ltd
+ * Author: Ben Avison <bavison@riscosopen.org>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "libavutil/arm/asm.S"
+
+RESULT  .req    a1
+BUF     .req    a1
+SIZE    .req    a2
+PATTERN .req    a3
+PTR     .req    a4
+DAT0    .req    v1
+DAT1    .req    v2
+DAT2    .req    v3
+DAT3    .req    v4
+TMP0    .req    v5
+TMP1    .req    v6
+TMP2    .req    ip
+TMP3    .req    lr
+
+#define PRELOAD_DISTANCE 4
+
+.macro innerloop4
+        ldr     DAT0, [PTR], #4
+        subs    SIZE, SIZE, #4 @ C flag survives rest of macro
+        sub     TMP0, DAT0, PATTERN, lsr #14
+        bic     TMP0, TMP0, DAT0
+        ands    TMP0, TMP0, PATTERN
+.endm
+
+.macro innerloop16  decrement, do_preload
+        ldmia   PTR!, {DAT0,DAT1,DAT2,DAT3}
+ .ifnc "\do_preload",""
+        pld     [PTR, #PRELOAD_DISTANCE*32]
+ .endif
+ .ifnc "\decrement",""
+        subs    SIZE, SIZE, #\decrement @ C flag survives rest of macro
+ .endif
+        sub     TMP0, DAT0, PATTERN, lsr #14
+        sub     TMP1, DAT1, PATTERN, lsr #14
+        bic     TMP0, TMP0, DAT0
+        bic     TMP1, TMP1, DAT1
+        sub     TMP2, DAT2, PATTERN, lsr #14
+        sub     TMP3, DAT3, PATTERN, lsr #14
+        ands    TMP0, TMP0, PATTERN
+        bic     TMP2, TMP2, DAT2
+        it      eq
+        andseq  TMP1, TMP1, PATTERN
+        bic     TMP3, TMP3, DAT3
+        itt     eq
+        andseq  TMP2, TMP2, PATTERN
+        andseq  TMP3, TMP3, PATTERN
+.endm
+
+/* int ff_startcode_find_candidate_armv6(const uint8_t *buf, int size) */
+function ff_startcode_find_candidate_armv6, export=1
+        push    {v1-v6,lr}
+        mov     PTR, BUF
+        @ Ensure there are at least (PRELOAD_DISTANCE+2) complete cachelines to go
+        @ before using code that does preloads
+        cmp     SIZE, #(PRELOAD_DISTANCE+3)*32 - 1
+        blo     60f
+
+        @ Get to word-alignment, 1 byte at a time
+        tst     PTR, #3
+        beq     2f
+1:      ldrb    DAT0, [PTR], #1
+        sub     SIZE, SIZE, #1
+        teq     DAT0, #0
+        beq     90f
+        tst     PTR, #3
+        bne     1b
+2:      @ Get to 4-word alignment, 1 word at a time
+        ldr     PATTERN, =0x80008000
+        setend  be
+        tst     PTR, #12
+        beq     4f
+3:      innerloop4
+        bne     91f
+        tst     PTR, #12
+        bne     3b
+4:      @ Get to cacheline (8-word) alignment
+        tst     PTR, #16
+        beq     5f
+        innerloop16  16
+        bne     93f
+5:      @ Check complete cachelines, with preloading
+        @ We need to stop when there are still (PRELOAD_DISTANCE+1)
+        @ complete cachelines to go
+        sub     SIZE, SIZE, #(PRELOAD_DISTANCE+2)*32
+6:      innerloop16  , do_preload
+        bne     93f
+        innerloop16  32
+        bne     93f
+        bcs     6b
+        @ Preload trailing part-cacheline, if any
+        tst     SIZE, #31
+        beq     7f
+        pld     [PTR, #(PRELOAD_DISTANCE+1)*32]
+        @ Check remaining data without doing any more preloads. First
+        @ do in chunks of 4 words:
+7:      adds    SIZE, SIZE, #(PRELOAD_DISTANCE+2)*32 - 16
+        bmi     9f
+8:      innerloop16  16
+        bne     93f
+        bcs     8b
+        @ Then in words:
+9:      adds    SIZE, SIZE, #16 - 4
+        bmi     11f
+10:     innerloop4
+        bne     91f
+        bcs     10b
+11:     setend  le
+        @ Check second byte of final halfword
+        ldrb    DAT0, [PTR, #-1]
+        teq     DAT0, #0
+        beq     90f
+        @ Check any remaining bytes
+        tst     SIZE, #3
+        beq     13f
+12:     ldrb    DAT0, [PTR], #1
+        sub     SIZE, SIZE, #1
+        teq     DAT0, #0
+        beq     90f
+        tst     SIZE, #3
+        bne     12b
+        @ No candidate found
+13:     sub     RESULT, PTR, BUF
+        b       99f
+
+60:     @ Small buffer - simply check by looping over bytes
+        subs    SIZE, SIZE, #1
+        bcc     99f
+61:     ldrb    DAT0, [PTR], #1
+        subs    SIZE, SIZE, #1
+        teq     DAT0, #0
+        beq     90f
+        bcs     61b
+        @ No candidate found
+        sub     RESULT, PTR, BUF
+        b       99f
+
+90:     @ Found a candidate at the preceding byte
+        sub     RESULT, PTR, BUF
+        sub     RESULT, RESULT, #1
+        b       99f
+
+91:     @ Found a candidate somewhere in the preceding 4 bytes
+        sub     RESULT, PTR, BUF
+        sub     RESULT, RESULT, #4
+        sub     TMP0, DAT0, #0x20000
+        bics    TMP0, TMP0, DAT0
+        itt     pl
+        ldrbpl  DAT0, [PTR, #-3]
+        addpl   RESULT, RESULT, #2
+        bpl     92f
+        teq     RESULT, #0
+        beq     98f @ don't look back a byte if found at first byte in buffer
+        ldrb    DAT0, [PTR, #-5]
+92:     teq     DAT0, #0
+        it      eq
+        subeq   RESULT, RESULT, #1
+        b       98f
+
+93:     @ Found a candidate somewhere in the preceding 16 bytes
+        sub     RESULT, PTR, BUF
+        sub     RESULT, RESULT, #16
+        teq     TMP0, #0
+        beq     95f @ not in first 4 bytes
+        sub     TMP0, DAT0, #0x20000
+        bics    TMP0, TMP0, DAT0
+        itt     pl
+        ldrbpl  DAT0, [PTR, #-15]
+        addpl   RESULT, RESULT, #2
+        bpl     94f
+        teq     RESULT, #0
+        beq     98f @ don't look back a byte if found at first byte in buffer
+        ldrb    DAT0, [PTR, #-17]
+94:     teq     DAT0, #0
+        it      eq
+        subeq   RESULT, RESULT, #1
+        b       98f
+95:     add     RESULT, RESULT, #4
+        teq     TMP1, #0
+        beq     96f @ not in next 4 bytes
+        sub     TMP1, DAT1, #0x20000
+        bics    TMP1, TMP1, DAT1
+        itee    mi
+        ldrbmi  DAT0, [PTR, #-13]
+        ldrbpl  DAT0, [PTR, #-11]
+        addpl   RESULT, RESULT, #2
+        teq     DAT0, #0
+        it      eq
+        subeq   RESULT, RESULT, #1
+        b       98f
+96:     add     RESULT, RESULT, #4
+        teq     TMP2, #0
+        beq     97f @ not in next 4 bytes
+        sub     TMP2, DAT2, #0x20000
+        bics    TMP2, TMP2, DAT2
+        itee    mi
+        ldrbmi  DAT0, [PTR, #-9]
+        ldrbpl  DAT0, [PTR, #-7]
+        addpl   RESULT, RESULT, #2
+        teq     DAT0, #0
+        it      eq
+        subeq   RESULT, RESULT, #1
+        b       98f
+97:     add     RESULT, RESULT, #4
+        sub     TMP3, DAT3, #0x20000
+        bics    TMP3, TMP3, DAT3
+        itee    mi
+        ldrbmi  DAT0, [PTR, #-5]
+        ldrbpl  DAT0, [PTR, #-3]
+        addpl   RESULT, RESULT, #2
+        teq     DAT0, #0
+        it      eq
+        subeq   RESULT, RESULT, #1
+        @ drop through to 98f
+98:     setend  le
+99:     pop     {v1-v6,pc}
+endfunc
+
+        .unreq  RESULT
+        .unreq  BUF
+        .unreq  SIZE
+        .unreq  PATTERN
+        .unreq  PTR
+        .unreq  DAT0
+        .unreq  DAT1
+        .unreq  DAT2
+        .unreq  DAT3
+        .unreq  TMP0
+        .unreq  TMP1
+        .unreq  TMP2
+        .unreq  TMP3
diff --git a/libavcodec/h264dsp.c b/libavcodec/h264dsp.c
index a2a4aba..a4da776 100644
--- a/libavcodec/h264dsp.c
+++ b/libavcodec/h264dsp.c
@@ -33,6 +33,7 @@
 #include "avcodec.h"
 #include "h264dsp.h"
 #include "h264idct.h"
+#include "startcode.h"
 #include "libavutil/common.h"

 #define BIT_DEPTH 8
@@ -63,34 +64,6 @@
 #include "h264addpx_template.c"
 #undef BIT_DEPTH

-static int h264_find_start_code_candidate_c(const uint8_t *buf, int size)
-{
-    int i = 0;
-#if HAVE_FAST_UNALIGNED
-    /* we check i < size instead of i + 3 / 7 because it is
-     * simpler and there must be FF_INPUT_BUFFER_PADDING_SIZE
-     * bytes at the end.
-     */
-#       if HAVE_FAST_64BIT
-    while (i < size &&
-            !((~*(const uint64_t *)(buf + i) &
-                    (*(const uint64_t *)(buf + i) - 0x0101010101010101ULL)) &
-                    0x8080808080808080ULL))
-        i += 8;
-#       else
-    while (i < size &&
-            !((~*(const uint32_t *)(buf + i) &
-                    (*(const uint32_t *)(buf + i) - 0x01010101U)) &
-                    0x80808080U))
-        i += 4;
-#       endif
-#endif
-    for (; i < size; i++)
-        if (!buf[i])
-            break;
-    return i;
-}
-
 av_cold void ff_h264dsp_init(H264DSPContext *c, const int bit_depth,
                              const int chroma_format_idc)
 {
@@ -178,7 +151,7 @@ av_cold void ff_h264dsp_init(H264DSPContext *c, const int bit_depth,
         H264_DSP(8);
         break;
     }
-    c->h264_find_start_code_candidate = h264_find_start_code_candidate_c;
+    c->h264_find_start_code_candidate = ff_startcode_find_candidate_c;

     if (ARCH_AARCH64) ff_h264dsp_init_aarch64(c, bit_depth, chroma_format_idc);
     if (ARCH_ARM) ff_h264dsp_init_arm(c, bit_depth, chroma_format_idc);
diff --git a/libavcodec/startcode.c b/libavcodec/startcode.c
new file mode 100644
index 0000000..5df7695
--- /dev/null
+++ b/libavcodec/startcode.c
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2003-2010 Michael Niedermayer <michaelni@gmx.at>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+/**
+ * @file
+ * Accelerated start code search function for start codes common to
+ * MPEG-1/2/4 video, VC-1, H.264/5
+ * @author Michael Niedermayer <michaelni@gmx.at>
+ */
+
+#include "startcode.h"
+#include "config.h"
+
+int ff_startcode_find_candidate_c(const uint8_t *buf, int size)
+{
+    int i = 0;
+#if HAVE_FAST_UNALIGNED
+    /* we check i < size instead of i + 3 / 7 because it is
+     * simpler and there must be FF_INPUT_BUFFER_PADDING_SIZE
+     * bytes at the end.
+     */
+#       if HAVE_FAST_64BIT
+    while (i < size &&
+            !((~*(const uint64_t *)(buf + i) &
+                    (*(const uint64_t *)(buf + i) - 0x0101010101010101ULL)) &
+                    0x8080808080808080ULL))
+        i += 8;
+#       else
+    while (i < size &&
+            !((~*(const uint32_t *)(buf + i) &
+                    (*(const uint32_t *)(buf + i) - 0x01010101U)) &
+                    0x80808080U))
+        i += 4;
+#       endif
+#endif
+    for (; i < size; i++)
+        if (!buf[i])
+            break;
+    return i;
+}
diff --git a/libavcodec/startcode.h b/libavcodec/startcode.h
new file mode 100644
index 0000000..cc55d5f
--- /dev/null
+++ b/libavcodec/startcode.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2003-2010 Michael Niedermayer <michaelni@gmx.at>
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+/**
+ * @file
+ * Accelerated start code search function for start codes common to
+ * MPEG-1/2/4 video, VC-1, H.264/5
+ * @author Michael Niedermayer <michaelni@gmx.at>
+ */
+
+#ifndef AVCODEC_STARTCODE_H
+#define AVCODEC_STARTCODE_H
+
+#include <stdint.h>
+
+int ff_startcode_find_candidate_c(const uint8_t *buf, int size);
+
+#endif /* AVCODEC_STARTCODE_H */
--
1.9.1
