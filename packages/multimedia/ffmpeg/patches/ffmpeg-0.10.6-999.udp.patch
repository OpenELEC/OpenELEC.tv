From eff39646c73e74124621120bdcdccec4d62db61f Mon Sep 17 00:00:00 2001
From: Michael Niedermayer <michaelni@gmx.at>
Date: Thu, 23 Feb 2012 23:22:16 +0100
Subject: [PATCH 2/5] udp: Fix sign of error codes.

Signed-off-by: Michael Niedermayer <michaelni@gmx.at>
---
 libavformat/udp.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/libavformat/udp.c b/libavformat/udp.c
index 9694ad2..309b18c 100644
--- a/libavformat/udp.c
+++ b/libavformat/udp.c
@@ -335,7 +335,7 @@ static void *circular_buffer_task( void *_URLContext)
         int len;
 
         if (ff_check_interrupt(&h->interrupt_callback)) {
-            s->circular_buffer_error = EINTR;
+            s->circular_buffer_error = AVERROR(EINTR);
             goto end;
         }
 
@@ -347,7 +347,7 @@ static void *circular_buffer_task( void *_URLContext)
         if (ret < 0) {
             if (ff_neterrno() == AVERROR(EINTR))
                 continue;
-            s->circular_buffer_error = EIO;
+            s->circular_buffer_error = AVERROR(EIO);
             goto end;
         }
 
@@ -361,14 +361,14 @@ static void *circular_buffer_task( void *_URLContext)
         /* No Space left, error, what do we do now */
         if(left < UDP_MAX_PKT_SIZE + 4) {
             av_log(h, AV_LOG_ERROR, "circular_buffer: OVERRUN\n");
-            s->circular_buffer_error = EIO;
+            s->circular_buffer_error = AVERROR(EIO);
             goto end;
         }
         left = FFMIN(left, s->fifo->end - s->fifo->wptr);
         len = recv(s->udp_fd, s->tmp+4, sizeof(s->tmp)-4, 0);
         if (len < 0) {
             if (ff_neterrno() != AVERROR(EAGAIN) && ff_neterrno() != AVERROR(EINTR)) {
-                s->circular_buffer_error = EIO;
+                s->circular_buffer_error = AVERROR(EIO);
                 goto end;
             }
             continue;
-- 
1.8.1.5


From 13abee9310f7dd5982e9a0c5fde9b7f2a0ad9ce0 Mon Sep 17 00:00:00 2001
From: Nicolas George <nicolas.george@normalesup.org>
Date: Thu, 15 Mar 2012 12:19:37 +0100
Subject: [PATCH 3/5] udp: fix non-blocking and interrupt handling.

In non-blocking mode, lowest-level read protocols are
supposed block only for a short amount of time to let
retry_transfer_wrapper() check for interrupts.

Also, checking the interrupt_callback in the receiving thread is
wrong, as interrupt_callback is not guaranteed to be thread-safe
and the job is already done by retry_transfer_wrapper(). The error
code was also incorrect.

Bug reported by Andrey Utkin.
---
 libavformat/udp.c | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

diff --git a/libavformat/udp.c b/libavformat/udp.c
index 309b18c..ed1559d 100644
--- a/libavformat/udp.c
+++ b/libavformat/udp.c
@@ -334,11 +334,6 @@ static void *circular_buffer_task( void *_URLContext)
         int ret;
         int len;
 
-        if (ff_check_interrupt(&h->interrupt_callback)) {
-            s->circular_buffer_error = AVERROR(EINTR);
-            goto end;
-        }
-
         FD_ZERO(&rfds);
         FD_SET(s->udp_fd, &rfds);
         tv.tv_sec = 1;
@@ -568,7 +563,7 @@ static int udp_read(URLContext *h, uint8_t *buf, int size)
 {
     UDPContext *s = h->priv_data;
     int ret;
-    int avail;
+    int avail, nonblock = h->flags & AVIO_FLAG_NONBLOCK;
 
 #if HAVE_PTHREADS
     if (s->fifo) {
@@ -592,12 +587,19 @@ static int udp_read(URLContext *h, uint8_t *buf, int size)
             } else if(s->circular_buffer_error){
                 pthread_mutex_unlock(&s->mutex);
                 return s->circular_buffer_error;
-            } else if(h->flags & AVIO_FLAG_NONBLOCK) {
+            } else if(nonblock) {
                 pthread_mutex_unlock(&s->mutex);
                 return AVERROR(EAGAIN);
             }
             else {
-                pthread_cond_wait(&s->cond, &s->mutex);
+                /* FIXME: using the monotonic clock would be better,
+                   but it does not exist on all supported platforms. */
+                int64_t t = av_gettime() + 100000;
+                struct timespec tv = { .tv_sec  =  t / 1000000,
+                                       .tv_nsec = (t % 1000000) * 1000 };
+                if (pthread_cond_timedwait(&s->cond, &s->mutex, &tv) < 0)
+                    return AVERROR(errno == ETIMEDOUT ? EAGAIN : errno);
+                nonblock = 1;
             }
         } while( 1);
     }
-- 
1.8.1.5

