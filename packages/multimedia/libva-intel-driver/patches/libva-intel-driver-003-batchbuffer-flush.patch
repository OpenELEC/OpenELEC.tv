
m d8effa37c2b0619a479bcd3306d8c7b2ba781c9c Mon Sep 17 00:00:00 2001
From: fritsch <Peter.Fruehberger@gmail.com>
Date: Thu, 25 Dec 2014 22:34:01 +0100
Subject: [PATCH] Batchbuffer: Correctly flush

---
 src/intel_batchbuffer.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/src/intel_batchbuffer.c b/src/intel_batchbuffer.c
index 60178c6..23c8bcd 100644
--- a/src/intel_batchbuffer.c
+++ b/src/intel_batchbuffer.c
@@ -190,6 +190,35 @@ intel_batchbuffer_data(struct intel_batchbuffer *batch,
     batch->ptr += size;
 }
 
+void hsw_test_flush(struct intel_batchbuffer *batch)
+{
+	/* PIPECONTROL with RO Cache Invalidation: Prior to programming a
+	 * PIPECONTROL command with any of the RO cache invalidation bit set,
+	 * program a PIPECONTROL flush command with "stall" bit and "HDC 
+	 * Flush" bit set.
+	 *
+	 * For HSW the follow are RO caches:
+	 * Depth Stall
+	 * Render Target Cache Flush
+	 * Depth Cache Flush
+	 *
+	 * FIXME: At this time, I don't know how to set HDC flush, but we can
+	 * just try cs stall for now.
+	 */
+
+	int flags = CMD_PIPE_CONTROL_NOWRITE |
+                    CMD_PIPE_CONTROL_CS_STALL |
+		    CMD_PIPE_CONTROL_STALL_AT_SCOREBOARD;
+
+	BEGIN_BATCH(batch, 5);
+	OUT_BATCH(batch, (CMD_PIPE_CONTROL | (5 - 2)));
+	OUT_BATCH(batch, flags);
+	OUT_BATCH(batch, 0);
+	OUT_BATCH(batch, 0);
+	OUT_BATCH(batch, 0);
+	ADVANCE_BATCH(batch);
+}
+
 void
 intel_batchbuffer_emit_mi_flush(struct intel_batchbuffer *batch)
 {
@@ -249,6 +278,7 @@ intel_batchbuffer_emit_mi_flush(struct intel_batchbuffer *batch)
                 OUT_BATCH(batch, 0); /* write data */
                 ADVANCE_BATCH(batch);
             } else {
+		hsw_test_flush(batch);
                 BEGIN_BATCH(batch, 4);
                 OUT_BATCH(batch, CMD_PIPE_CONTROL | (4 - 2));
 
-- 
1.9.1
